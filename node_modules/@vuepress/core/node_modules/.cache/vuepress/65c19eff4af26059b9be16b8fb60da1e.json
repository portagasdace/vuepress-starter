{"remainingRequest":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/liuyusheng/StudyDocuments/vuepress-starter/docs/flutter/42 - 存取本地数据.md?vue&type=template&id=e07b5d3e&","dependencies":[{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/docs/flutter/42 - 存取本地数据.md","mtime":1592464545000},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":1611639389731},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1608521194453},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":1611639389731},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/index.js","mtime":1608521194453},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js","mtime":1611639389082}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICLlrZjlj5bmnKzlnLDmlbDmja4iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI+WtmOWPluacrOWcsOaVsOaNriIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIg5a2Y5Y+W5pys5Zyw5pWw5o2uIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIuacrOiKguimgeWunueOsOS4gOS4quWKn+iDve+8muaJk+W8gCBBUFAg55qE5pe25YCZ5piv5LiK5qyh6YCJ5oup55qE5Z+O5biC44CCIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAi5omA5Lul6ZyA6KaB5oqK6YCJ5oup55qE5Z+O5biC55qE5pWw5o2u5L+d5a2Y6LW35p2l77yM6L+Z5Liq5pe25YCZ6ZyA6KaB55So5Yiw56ys5LiJ5pa55bqT77yaIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzaGFyZWRfcHJlZmVyZW5jZXMiKV0pLAogICAgICAgIF92bS5fdigi44CCIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAi5re75Yqg56ys5LiJ5pa55bqTIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiPmt7vliqDnrKzkuInmlrnlupMiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIOa3u+WKoOesrOS4ieaWueW6kyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCLlnKggIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJwdWJzcGVjLnlhbWwiKV0pLAogICAgICAgIF92bS5fdigiIOmHjOa3u+WKoO+8miIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KCJkZXBlbmRlbmNpZXM6XG4gIHNoYXJlZF9wcmVmZXJlbmNlczogXjAuNS4yXG5cbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIueEtuWQjui/kOihjO+8miIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZmx1dHRlciBwYWNrYWdlcyBnZXRcblxuIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAi6K+75Y+W5pWw5o2uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiPor7vlj5bmlbDmja4iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIOivu+WPluaVsOaNriIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIuWcqCBIb3RXaWRnZXRTdGF0ZSDnmoQgaW5pdFN0YXRlKCkg6YeM5aKe5Yqg5LiA5Liq6K+75Y+W5pWw5o2u55qE5pa55rOVIGluaXREYXRhKCks5rOo5oSP6L+Z6YeM6K+75Y+W5pWw5o2u5piv5byC5q2l55qE77yM5omA5LulIGluaXREYXRhKCkg5pa55rOV6KaB5YqgIGFzeW5j77yaIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImNsYXNzIEhvdFdpZGdldFN0YXRlIGV4dGVuZHMgU3RhdGU8SG90V2lkZ2V0PiB7XG4gIFN0cmluZyBjdXJDaXR5O1xuXG4gIEBvdmVycmlkZVxuICB2b2lkIGluaXRTdGF0ZSgpIHtcbiAgICAvLyBUT0RPOiBpbXBsZW1lbnQgaW5pdFN0YXRlXG4gICAgc3VwZXIuaW5pdFN0YXRlKCk7XG4gICAgcHJpbnQoJ0hvdFdpZGdldFN0YXRlIGluaXRTdGF0ZScpO1xuICAgIGluaXREYXRhKCk7XG4gIH1cblxuICB2b2lkIGluaXREYXRhKCkgYXN5bmMge1xuICAgIGZpbmFsIHByZWZzID0gYXdhaXQgU2hhcmVkUHJlZmVyZW5jZXMuZ2V0SW5zdGFuY2UoKTsvL+iOt+WPliBwcmVmc1xuXG4gICAgU3RyaW5nIGNpdHkgPSBwcmVmcy5nZXRTdHJpbmcoJ2N1ckNpdHknKTsvL+iOt+WPliBrZXkg5Li6IGN1ckNpdHkg55qE5YC8XG5cbiAgICBpZiAoY2l0eSAhPSBudWxsICYmIGNpdHkuaXNOb3RFbXB0eSkgeyAvL+WmguaenOacieWAvFxuICAgICAgc2V0U3RhdGUoKCl7XG4gICAgICAgIGN1ckNpdHkgPSBjaXR5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHsvL+WmguaenOayoeacieWAvO+8jOWImeS9v+eUqOm7mOiupOWAvFxuICAgICAgc2V0U3RhdGUoKCl7XG4gICAgICAgIGN1ckNpdHkgPSAn5rex5ZyzJztcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAuLi5cbn1cblxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAidWkt5pS56YCgIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiN1aS3mlLnpgKAiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBVSSDmlLnpgKAiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICLlm6DkuLror7vlj5bmlbDmja7mmK/lvILmraXnmoTvvIzlnKggYnVpbGQgV2lkZ2V0IOeahOaXtuWAmSBjdXJDaXR5IOWPr+iDveWwseaYr+epuueahO+8jOi/meagt+S8muWvvOiHtOaLieWPluS4jeWIsOaVsOaNru+8jOaJgOS7pSBVSSDov5nph4zopoHliqDkuIDkuKrpgLvovpHvvIzlpoLmnpwgY3VyQ2l0eSDkuI3kuLrnqbrvvIzlsLHov5Tlm57nlLXlvbHnmoRVSSzlkKbliJnov5Tlm57liLfmlrDnlYzpnaLvvJoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7XG4gICAgLy8gVE9ETzogaW1wbGVtZW50IGJ1aWxkXG4gICAgaWYgKGN1ckNpdHkgIT0gbnVsbCAmJiBjdXJDaXR5LmlzTm90RW1wdHkpIHsvL+WmguaenCBjdXJDaXR5IOS4jeS4uuepulxuICAgICAgcmV0dXJuIENvbHVtbihcbiAgICAgICAgLi4uXG4gICAgICApO1xuICAgIH0gZWxzZSB7Ly/lpoLmnpwgY3VyQ2l0eSDkuLrnqbpcbiAgICAgIHJldHVybiBDZW50ZXIoXG4gICAgICAgIGNoaWxkOiBDaXJjdWxhclByb2dyZXNzSW5kaWNhdG9yKCksXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigi5pWI5p6c5Li677yaIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vdXNlci1nb2xkLWNkbi54aXR1LmlvLzIwMTkvNC8yOS8xNmE2ODI2NGJkNWZkMGIyP3c9NDgwJmg9OTYwJmY9Z2lmJnM9MjAxNzA5IiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIuWtmOWPluaVsOaNriIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIj5a2Y5Y+W5pWw5o2uIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiDlrZjlj5bmlbDmja4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigi5ZyoIF9qdW1wVG9DaXR5c1dpZGdldCDph4zlop7liqDlrZjlj5bmlbDmja7nmoTku6PnoIE6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiICB2b2lkIF9qdW1wVG9DaXR5c1dpZGdldCgpIGFzeW5jIHtcbiAgICB2YXIgc2VsZWN0Q2l0eSA9XG4gICAgICAgIGF3YWl0IE5hdmlnYXRvci5wdXNoTmFtZWQoY29udGV4dCwgJy9DaXR5cycsIGFyZ3VtZW50czogY3VyQ2l0eSk7XG4gICAgaWYgKHNlbGVjdENpdHkgPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgZmluYWwgcHJlZnMgPSBhd2FpdCBTaGFyZWRQcmVmZXJlbmNlcy5nZXRJbnN0YW5jZSgpOyBcbiAgICBwcmVmcy5zZXRTdHJpbmcoJ2N1ckNpdHknLCBzZWxlY3RDaXR5KTsgLy/lrZjlj5bmlbDmja5cblxuICAgIHNldFN0YXRlKCgpIHtcbiAgICAgIGN1ckNpdHkgPSBzZWxlY3RDaXR5O1xuICAgIH0pO1xuICB9XG5cbiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}