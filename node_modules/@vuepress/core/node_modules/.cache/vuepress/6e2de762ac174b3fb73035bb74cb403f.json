{"remainingRequest":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/liuyusheng/StudyDocuments/vuepress-starter/docs/react-hooks /17 - 歌单详情3  打通歌单数据层.md?vue&type=template&id=458d9fbc&","dependencies":[{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/docs/react-hooks /17 - 歌单详情3  打通歌单数据层.md","mtime":1592464824000},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":1611639389731},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1608521194453},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":1611639389731},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/index.js","mtime":1608521194453},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js","mtime":1611639389082}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgW192bS5fdigi5pys6IqC5Luj56CB5a+55bqUIEdpdEh1YiDliIbmlK86IGNoYXB0ZXI2IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly9naXRodWIuY29tL3Nhbnl1YW4wNzA0L3JlYWN0LWNsb3VkLW11c2ljL3RyZWUvY2hhcHRlcjYiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIuS7k+W6k+S8oOmAgemXqCIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiYXhpb3Mt6K+35rGC5YeG5aSHIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNheGlvcy3or7fmsYLlh4blpIciIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIGF4aW9zIOivt+axguWHhuWkhyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCLlnKggYXBpL3JlcXVlc3QuanMg5Lit5Yqg5YWlOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImV4cG9ydCBjb25zdCBnZXRBbGJ1bURldGFpbFJlcXVlc3QgPSBpZCA9PiB7XG4gIHJldHVybiBheGlvc0luc3RhbmNlLmdldCAoYC9wbGF5bGlzdC9kZXRhaWw/aWQ9JHtpZH1gKTtcbn07XG5cbiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInJlZHV4LeWxguW8gOWPkSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcmVkdXgt5bGC5byA5Y+RIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiByZWR1eCDlsYLlvIDlj5EiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJfMS3lo7DmmI7liJ3lp4vljJYtc3RhdGUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18xLeWjsOaYjuWIneWni+WMli1zdGF0ZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuIOWjsOaYjuWIneWni+WMliBzdGF0ZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIvL3JlZHVjZXIuanNcbmltcG9ydCAqIGFzIGFjdGlvblR5cGVzIGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGZyb21KUyB9IGZyb20gJ2ltbXV0YWJsZSc7XG5cbmNvbnN0IGRlZmF1bHRTdGF0ZSA9IGZyb21KUyAoe1xuICBjdXJyZW50QWxidW06IHt9LFxuICBlbnRlckxvYWRpbmc6IGZhbHNlLFxufSlcblxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiXzIt5a6a5LmJLWNvbnN0YW50cyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzIt5a6a5LmJLWNvbnN0YW50cyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDIuIOWumuS5iSBjb25zdGFudHMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiLy9jb25zdGFudHMuanNcbmV4cG9ydCBjb25zdCBDSEFOR0VfQ1VSUkVOVF9BTEJVTSA9ICdhbGJ1bS9DSEFOR0VfQ1VSUkVOVF9BTEJVTSc7XG5leHBvcnQgY29uc3QgQ0hBTkdFX0VOVEVSX0xPQURJTkcgPSAnYWxidW0vQ0hBTkdFX0VOVEVSX0xPQURJTkcnO1xuXG4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJfMy3lrprkuYktcmVkdWNlci3lh73mlbAiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18zLeWumuS5iS1yZWR1Y2VyLeWHveaVsCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDMuIOWumuS5iSByZWR1Y2VyIOWHveaVsCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIvL3JlZHVjZXIuanNcbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IGRlZmF1bHRTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIGFjdGlvblR5cGVzLkNIQU5HRV9DVVJSRU5UX0FMQlVNOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldCAoJ2N1cnJlbnRBbGJ1bScsIGFjdGlvbi5kYXRhKTtcbiAgICBjYXNlIGFjdGlvblR5cGVzLkNIQU5HRV9FTlRFUl9MT0FESU5HOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldCAoJ2VudGVyTG9hZGluZycsIGFjdGlvbi5kYXRhKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuXG4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJfNC3nvJblhpnlhbfkvZPnmoQtYWN0aW9uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfNC3nvJblhpnlhbfkvZPnmoQtYWN0aW9uIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgNC4g57yW5YaZ5YW35L2T55qEIGFjdGlvbiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIvL2FjdGlvbkNyZWF0b3JzLmpzXG5pbXBvcnQgeyBDSEFOR0VfQ1VSUkVOVF9BTEJVTSwgQ0hBTkdFX0VOVEVSX0xPQURJTkcgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRBbGJ1bURldGFpbFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9hcGkvcmVxdWVzdCc7XG5pbXBvcnQgeyBmcm9tSlMgfSBmcm9tICdpbW11dGFibGUnO1xuXG5jb25zdCBjaGFuZ2VDdXJyZW50QWxidW0gPSAoZGF0YSkgPT4gKHtcbiAgdHlwZTogQ0hBTkdFX0NVUlJFTlRfQUxCVU0sXG4gIGRhdGE6IGZyb21KUyAoZGF0YSlcbn0pO1xuXG5leHBvcnQgY29uc3QgY2hhbmdlRW50ZXJMb2FkaW5nID0gKGRhdGEpID0+ICh7XG4gIHR5cGU6IENIQU5HRV9FTlRFUl9MT0FESU5HLFxuICBkYXRhXG59KTtcblxuZXhwb3J0IGNvbnN0IGdldEFsYnVtTGlzdCA9IChpZCkgPT4ge1xuICByZXR1cm4gZGlzcGF0Y2ggPT4ge1xuICAgIGdldEFsYnVtRGV0YWlsUmVxdWVzdCAoaWQpLnRoZW4gKHJlcyA9PiB7XG4gICAgICBsZXQgZGF0YSA9IHJlcy5wbGF5bGlzdDtcbiAgICAgIGRpc3BhdGNoIChjaGFuZ2VDdXJyZW50QWxidW0gKGRhdGEpKTtcbiAgICAgIGRpc3BhdGNoIChjaGFuZ2VFbnRlckxvYWRpbmcgKGZhbHNlKSk7XG4gICAgfSkuY2F0Y2ggKCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nIChcIuiOt+WPliBhbGJ1bSDmlbDmja7lpLHotKXvvIFcIilcbiAgICB9KTtcbiAgfVxufTtcblxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiXzUt5bCG55u45YWz5Y+Y6YeP5a+85Ye6IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfNS3lsIbnm7jlhbPlj5jph4/lr7zlh7oiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiA1LiDlsIbnm7jlhbPlj5jph4/lr7zlh7oiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiLy9pbmRleC5qc1xuaW1wb3J0IHJlZHVjZXIgZnJvbSAnLi9yZWR1Y2VyJ1xuaW1wb3J0ICogYXMgYWN0aW9uQ3JlYXRvcnMgZnJvbSAnLi9hY3Rpb25DcmVhdG9ycydcblxuZXhwb3J0IHsgcmVkdWNlciwgYWN0aW9uQ3JlYXRvcnMgfTtcblxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAi57uE5Lu26L+e5o6lLXJlZHV4IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiPnu4Tku7bov57mjqUtcmVkdXgiIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIOe7hOS7tui/nuaOpSBSZWR1eCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIummluWFiO+8jOmcgOimgeWwhiBBbGJ1bSDkuIvnmoQgcmVkdWNlciDms6jlhozliLDlhajlsYAgc3RvcmXvvIzlnKggc3JjIOebruW9leS4i+eahCBzdG9yZS9yZWR1Y2VyLmpzIOS4re+8jOWGheWuueWmguS4izoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgtaW1tdXRhYmxlJztcbmltcG9ydCB7IHJlZHVjZXIgYXMgcmVjb21tZW5kUmVkdWNlciB9IGZyb20gJy4uL2FwcGxpY2F0aW9uL1JlY29tbWVuZC9zdG9yZS9pbmRleCc7XG5pbXBvcnQgeyByZWR1Y2VyIGFzIHNpbmdlcnNSZWR1Y2VyIH0gZnJvbSAnLi4vYXBwbGljYXRpb24vU2luZ2Vycy9zdG9yZS9pbmRleCc7XG5pbXBvcnQgeyByZWR1Y2VyIGFzIHJhbmtSZWR1Y2VyIH0gZnJvbSAnLi4vYXBwbGljYXRpb24vUmFuay9zdG9yZS9pbmRleCc7XG5pbXBvcnQgeyByZWR1Y2VyIGFzIGFsYnVtUmVkdWNlciB9IGZyb20gJy4uL2FwcGxpY2F0aW9uL0FsYnVtL3N0b3JlL2luZGV4JztcblxuZXhwb3J0IGRlZmF1bHQgY29tYmluZVJlZHVjZXJzICh7XG4gIHJlY29tbWVuZDogcmVjb21tZW5kUmVkdWNlcixcbiAgc2luZ2Vyczogc2luZ2Vyc1JlZHVjZXIgLFxuICByYW5rOiByYW5rUmVkdWNlcixcbiAgYWxidW06IGFsYnVtUmVkdWNlclxufSk7XG5cbiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCLnjrDlnKjlnKggQWxidW0vaW5kZXguanMg5Lit77yM5YeG5aSH6L+e5o6lIFJlZHV444CCIOWinuWKoOS7o+eggToiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG4vLyDnu4Tku7bku6PnoIFcblxuLy8g5pig5bCEIFJlZHV4IOWFqOWxgOeahCBzdGF0ZSDliLDnu4Tku7bnmoQgcHJvcHMg5LiKXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+ICh7XG4gIGN1cnJlbnRBbGJ1bTogc3RhdGUuZ2V0SW4gKFsnYWxidW0nLCAnY3VycmVudEFsYnVtJ10pLFxuICBlbnRlckxvYWRpbmc6IHN0YXRlLmdldEluIChbJ2FsYnVtJywgJ2VudGVyTG9hZGluZyddKSxcbn0pO1xuLy8g5pig5bCEIGRpc3BhdGNoIOWIsCBwcm9wcyDkuIpcbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGdldEFsYnVtRGF0YURpc3BhdGNoIChpZCkge1xuICAgICAgZGlzcGF0Y2ggKGNoYW5nZUVudGVyTG9hZGluZyAodHJ1ZSkpO1xuICAgICAgZGlzcGF0Y2ggKGdldEFsYnVtTGlzdCAoaWQpKTtcbiAgICB9LFxuICB9XG59O1xuXG4vLyDlsIYgdWkg57uE5Lu25YyF6KOF5oiQ5a655Zmo57uE5Lu2XG5leHBvcnQgZGVmYXVsdCBjb25uZWN0IChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoUmVhY3QubWVtbyAoQWxidW0pKTtcblxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAi57uE5Lu25a+55o6l55yf5a6e5pWw5o2uIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiPnu4Tku7blr7nmjqXnnJ/lrp7mlbDmja4iIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiDnu4Tku7blr7nmjqXnnJ/lrp7mlbDmja4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigi5Zyo57uE5Lu25Luj56CB5Lit77yMIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZUVmZmVjdH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0QWxidW1MaXN0LCBjaGFuZ2VFbnRlckxvYWRpbmcgfSBmcm9tICcuL3N0b3JlL2FjdGlvbkNyZWF0b3JzJztcblxuLy8g5LuO6Lev55Sx5Lit5ou/5Yiw5q2M5Y2V55qEIGlkXG5jb25zdCBpZCA9IHByb3BzLm1hdGNoLnBhcmFtcy5pZDtcblxuY29uc3QgeyBjdXJyZW50QWxidW06Y3VycmVudEFsYnVtSW1tdXRhYmxlLCBlbnRlckxvYWRpbmcgfSA9IHByb3BzO1xuY29uc3QgeyBnZXRBbGJ1bURhdGFEaXNwYXRjaCB9ID0gcHJvcHM7XG5cbnVzZUVmZmVjdCAoKCkgPT4ge1xuICBnZXRBbGJ1bURhdGFEaXNwYXRjaCAoaWQpO1xufSwgW2dldEFsYnVtRGF0YURpc3BhdGNoLCBpZF0pO1xuXG4vLyDlkIzml7blsIYgbW9jayDmlbDmja7nmoTku6PnoIHliKDpmaRcbmxldCBjdXJyZW50QWxidW0gPSBjdXJyZW50QWxidW1JbW11dGFibGUudG9KUyAoKTtcblxuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAi5L2G5piv5aaC5p6c5L2g546w5Zyo6L+b5YWl6aG16Z2i77yM5Lya5oql5LiA5Liq6ZSZ6K+vOiBjYW5ub3QgcmVhZCBhdmF0YXJVcmwgb2YgdW5kZWZpbmVkIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIui/meaYr+S4uuS7gOS5iOWRou+8nyIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAi5b2T6aG16Z2i6L+b5YWlIEFqYXgg6K+35rGC6L+Y5rKh5pyJ6I635Y+W5pWw5o2u5pe277yMY3VycmVudEFsYnVtIOeahOWAvOS4uuWIneWni+aAgSB7feOAguebtOWIsOaVsOaNruW8guatpeWKoOi9veWujOaIkO+8jGN1cnJlbnRBbGJ1bSDmiY3kvJrmlLnlj5jvvIzpgqPkuYjlnKjov5nkuKrov4fnqIvkuK3vvIzpgJrov4cgY3VycmVudEFsYnVtLmNyZWF0b3Ig5Li6IHVuZGVmaW5lZO+8jOmAmui/hyBjdXJyZW50LmNyZWF0b3IuYXZhdGFyVXJsIOWPluWAvOiHqueEtuS8muaKpemUmeOAgui/meagt+eahOmXrumimOWcqOaXpeW4uOW8gOWPkeS4remdnuW4uOW4uOinge+8jOmCo+aAjuS5iOmBv+WFjei/meS4qumXrumimO+8nyIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCLmiJHku6zpnIDopoHlnKjmuLLmn5PliY3lgZrkuIDkuKrpnZ7nqbrlr7nosaHnmoTliKTmlq3jgIIiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCLpppblhYjlnKggYXBpL3V0aWxzIOS4reWGmeS4gOS4quW3peWFt+WHveaVsO+8miIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIi8vIOWIpOaWreS4gOS4quWvueixoeaYr+WQpuS4uuepulxuZXhwb3J0IGNvbnN0IGlzRW1wdHlPYmplY3QgPSBvYmogPT4gIW9iaiB8fCBPYmplY3Qua2V5cyAob2JqKS5sZW5ndGggPT09IDA7XG5cbiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCLnhLblkI7oh6rooYzlr7zlhaXliLAgQWxidW0g57uE5Lu25Lit44CCIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigi57uE5Lu25Lit5L+u5pS55aaC5LiLOiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIntcbiAgIWlzRW1wdHlPYmplY3QgKGN1cnJlbnRBbGJ1bSkgPyAoXG4gICAgPFNjcm9sbCBcbiAgICAgIG9uU2Nyb2xsPXtoYW5kbGVTY3JvbGx9IFxuICAgICAgYm91bmNlVG9wPXtmYWxzZX1cbiAgICA+XG4gICAgLy8g55yB55Wl5YaF6YOo5Luj56CBXG4gICAgPC9TY3JvbGw+XG4gICkgOiBudWxsXG59XG5cbiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCLov5nmoLfpobXpnaLlsLHog73mraPluLjmmL7npLrllabjgIIiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIui/m+Wcui1sb2Fpbmct5Yqo55S75re75YqgIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiPov5vlnLotbG9haW5nLeWKqOeUu+a3u+WKoCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIOi/m+WcuiBMb2Fpbmcg5Yqo55S75re75YqgIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgImltcG9ydCBMb2FkaW5nIGZyb20gJy4uLy4uL2Jhc2VVSS9sb2FkaW5nL2luZGV4JztcblxuLy8g5ZyoIENvbnRhaW5lciDmoLflvI/nu4Tku7bkuK3mt7vliqBcbnsgZW50ZXJMb2FkaW5nID8gPExvYWRpbmc+PC9Mb2FkaW5nPiA6IG51bGx9XG5cbiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCLliLDmraTkuLrmraLvvIxVSSDlkozmlbDmja7lt7Lnu4/miZPpgJrkuobvvIzmjqXkuIvmnaXmiJHku6zmnaXlgZrkuIDkupvkvJjljJbjgIIiKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}