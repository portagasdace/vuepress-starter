{"remainingRequest":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/liuyusheng/StudyDocuments/vuepress-starter/docs/flutter/17 - Flutter 基础 Widget —— SnackBar 和 Builder 的使用.md?vue&type=template&id=b5475ae4&","dependencies":[{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/docs/flutter/17 - Flutter 基础 Widget —— SnackBar 和 Builder 的使用.md","mtime":1592464545000},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":1611639389731},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1608521194453},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/cache-loader/dist/cjs.js","mtime":1611639389731},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/vue-loader/lib/index.js","mtime":1608521194453},{"path":"/Users/liuyusheng/StudyDocuments/vuepress-starter/node_modules/@vuepress/markdown-loader/index.js","mtime":1611639389082}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}