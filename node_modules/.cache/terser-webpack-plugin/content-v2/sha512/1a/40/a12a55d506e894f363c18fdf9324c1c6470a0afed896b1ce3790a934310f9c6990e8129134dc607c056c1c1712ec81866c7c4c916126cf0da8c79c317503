{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[327],{691:function(e,t,n){\"use strict\";n.r(t);var s=n(42),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[n(\"blockquote\",[n(\"p\",[e._v(\"本节代码对应 GitHub 分支: chapter10\")])]),e._v(\" \"),n(\"p\",[n(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter10\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"仓库传送门\"),n(\"OutboundLink\")],1)]),e._v(\" \"),n(\"p\",[e._v(\"首先开发 redux 数据层。\")]),e._v(\" \"),n(\"h2\",{attrs:{id:\"axios-请求准备\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#axios-请求准备\"}},[e._v(\"#\")]),e._v(\" axios 请求准备\")]),e._v(\" \"),n(\"p\",[e._v(\"在 api/request.js 中加入:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"export const getHotKeyWordsRequest = () => {\\n  return axiosInstance.get (`/search/hot`);\\n};\\n\\nexport const getSuggestListRequest = query => {\\n  return axiosInstance.get (`/search/suggest?keywords=${query}`);\\n};\\n\\nexport const getResultSongsListRequest = query => {\\n  return axiosInstance.get (`/search?keywords=${query}`);\\n};\\n\\n\")])])]),n(\"h2\",{attrs:{id:\"redux-层开发\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redux-层开发\"}},[e._v(\"#\")]),e._v(\" redux 层开发\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"_1-声明初始化-state\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-声明初始化-state\"}},[e._v(\"#\")]),e._v(\" 1. 声明初始化 state\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"//reducer.js\\nimport * as actionTypes from './constants';\\nimport { fromJS } from 'immutable';\\n\\nconst defaultState = fromJS ({\\n  hotList: [], // 热门关键词列表\\n  suggestList: [],// 列表，包括歌单和歌手\\n  songsList: [],// 歌曲列表\\n  enterLoading: false\\n})\\n\\n\")])])]),n(\"h3\",{attrs:{id:\"_2-定义-constants\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-定义-constants\"}},[e._v(\"#\")]),e._v(\" 2. 定义 constants\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"//constants.js\\nexport const SET_HOT_KEYWRODS = \\\"search/SET_HOT_KEYWRODS\\\";\\nexport const SET_SUGGEST_LIST = 'search/SET_SUGGEST_LIST';\\nexport const SET_RESULT_SONGS_LIST = 'search/SET_RESULT_SONGS_LIST'; \\nexport const SET_ENTER_LOADING = 'search/SET_ENTER_LOADING'; \\n\\n\")])])]),n(\"h3\",{attrs:{id:\"_3-定义-reducer-函数\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-定义-reducer-函数\"}},[e._v(\"#\")]),e._v(\" 3. 定义 reducer 函数\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"export default (state = defaultState, action) => {\\n  switch (action.type) {\\n    case actionTypes.SET_HOT_KEYWRODS:\\n      return state.set ('hotList', action.data);\\n    case actionTypes.SET_SUGGEST_LIST:\\n      return state.set ('suggestList', action.data);\\n    case actionTypes.SET_RESULT_SONGS_LIST:\\n      return state.set ('songsList', action.data);\\n    case actionTypes.SET_ENTER_LOADING:\\n      return state.set ('enterLoading', action.data);\\n    default:\\n      return state;\\n  }\\n}\\n\\n\")])])]),n(\"h3\",{attrs:{id:\"_4-编写具体的-action\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-编写具体的-action\"}},[e._v(\"#\")]),e._v(\" 4. 编写具体的 action\")]),e._v(\" \"),n(\"p\",[e._v(\"逻辑都非常简单，直接放出代码：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"//actionCreators.js\\n\\nimport { SET_HOT_KEYWRODS, SET_SUGGEST_LIST, SET_RESULT_SONGS_LIST, SET_ENTER_LOADING } from './constants';\\nimport { fromJS } from 'immutable';\\nimport { getHotKeyWordsRequest, getSuggestListRequest, getResultSongsListRequest } from './../../../api/request';\\n\\nconst changeHotKeyWords = (data) => ({\\n  type: SET_HOT_KEYWRODS,\\n  data: fromJS (data)\\n});\\n\\nconst changeSuggestList = (data) => ({\\n  type: SET_SUGGEST_LIST,\\n  data: fromJS (data)\\n});\\n\\nconst changeResultSongs = (data) => ({\\n  type: SET_RESULT_SONGS_LIST,\\n  data: fromJS (data)\\n});\\n\\nexport const changeEnterLoading = (data) => ({\\n  type: SET_ENTER_LOADING,\\n  data\\n});\\n\\nexport const getHotKeyWords = () => {\\n  return dispatch => {\\n    getHotKeyWordsRequest ().then (data => {\\n      // 拿到关键词列表\\n      let list = data.result.hots;\\n      dispatch (changeHotKeyWords (list));\\n    })\\n  }\\n};\\nexport const getSuggestList = (query) => {\\n  return dispatch => {\\n    getSuggestListRequest (query).then (data => {\\n      if (!data) return;\\n      let res = data.result || [];\\n      dispatch (changeSuggestList (res));\\n    })\\n    getResultSongsListRequest (query).then (data => {\\n      if (!data) return;\\n      let res = data.result.songs || [];\\n      dispatch (changeResultSongs (res));\\n      dispatch (changeEnterLoading (false));// 关闭 loading\\n    })\\n  }\\n};\\n\\n\")])])]),n(\"h3\",{attrs:{id:\"_5-将相关变量导出\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-将相关变量导出\"}},[e._v(\"#\")]),e._v(\" 5. 将相关变量导出\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"//index.js\\nimport reducer from './reducer'\\nimport * as actionCreators from './actionCreators'\\nimport * as constants from './constants'\\n\\nexport { reducer, actionCreators, constants };\\n\\n\")])])]),n(\"h2\",{attrs:{id:\"组件连接-redux\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#组件连接-redux\"}},[e._v(\"#\")]),e._v(\" 组件连接 Redux\")]),e._v(\" \"),n(\"p\",[e._v(\"首先，需要将 Search 下的 reducer 注册到全局 store，在 src 目录下的 store/reducer.js 中。(注意，这个操作非常重要，当时因为这个问题调整了很久，后来打开 redux-devtools 中才猛然发现。)\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('import { combineReducers } from \"redux-immutable\";\\nimport { reducer as recommendReducer } from \"../application/Recommend/store/index\";\\nimport { reducer as singersReducer } from \"../application/Singers/store/index\";\\nimport { reducer as rankReducer } from \"../application/Rank/store/index\";\\nimport { reducer as albumReducer } from \"../application/Album/store/index\";\\nimport { reducer as singerInfoReducer } from \"../application/Singer/store/index\";\\nimport { reducer as playerReducer } from \"../application/Player/store/index\";\\nimport { reducer as searchReducer } from \"../application/Search/store/index\";\\n\\nexport default combineReducers ({\\n  recommend: recommendReducer,\\n  singers: singersReducer,\\n  rank: rankReducer,\\n  album: albumReducer,\\n  singerInfo: singerInfoReducer,\\n  player: playerReducer,\\n  search: searchReducer,\\n});\\n\\n\\n')])])]),n(\"p\",[e._v(\"现在在 Search/index.js 中，准备连接 Redux。 增加代码:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"import { connect } from 'react-redux';\\n\\n// 组件代码\\n\\n// 映射 Redux 全局的 state 到组件的 props 上\\nconst mapStateToProps = (state) => ({\\n  hotList: state.getIn (['search', 'hotList']),\\n  enterLoading: state.getIn (['search', 'enterLoading']),\\n  suggestList: state.getIn (['search', 'suggestList']),\\n  songsCount: state.getIn (['player', 'playList']).size,\\n  songsList: state.getIn (['search', 'songsList'])\\n});\\n\\n// 映射 dispatch 到 props 上\\nconst mapDispatchToProps = (dispatch) => {\\n  return {\\n    getHotKeyWordsDispatch () {\\n      dispatch (getHotKeyWords ());\\n    },\\n    changeEnterLoadingDispatch (data) {\\n      dispatch (changeEnterLoading (data))\\n    },\\n    getSuggestListDispatch (data) {\\n      dispatch (getSuggestList (data));\\n    },\\n  }\\n};\\n// 将 ui 组件包装成容器组件\\nexport default connect (mapStateToProps, mapDispatchToProps)(React.memo (Search));\\n\\n\")])])]),n(\"h2\",{attrs:{id:\"组件对接真实数据\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#组件对接真实数据\"}},[e._v(\"#\")]),e._v(\" 组件对接真实数据\")]),e._v(\" \"),n(\"p\",[e._v(\"首先在组件中取出 redux 中的数据:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"import { getHotKeyWords, changeEnterLoading, getSuggestList } from './store/actionCreators';\\nimport { connect } from 'react-redux';\\nimport { Container, ShortcutWrapper, HotKey } from './style';\\nimport Scroll from '../../baseUI/scroll';\\n\\nconst {\\n  hotList, \\n  enterLoading, \\n  suggestList: immutableSuggestList, \\n  songsCount, \\n  songsList: immutableSongsList\\n} = props;\\n\\nconst suggestList = immutableSuggestList.toJS ();\\nconst songsList = immutableSongsList.toJS ();\\n\\nconst {\\n  getHotKeyWordsDispatch,\\n  changeEnterLoadingDispatch,\\n  getSuggestListDispatch,\\n  getSongDetailDispatch\\n} = props;\\n\\n\")])])]),n(\"p\",[e._v(\"我们接下来要做三件事情:\")]),e._v(\" \"),n(\"ol\",[n(\"li\",[e._v(\"当搜索框为空，展示热门搜索列表\")]),e._v(\" \"),n(\"li\",[e._v(\"当搜索框有内容时，发送 Ajax 请求，显示搜索结果\")]),e._v(\" \"),n(\"li\",[e._v(\"点击搜索结果，分别进入到不同的详情页中\")])]),e._v(\" \"),n(\"p\",[e._v(\"第一步，当搜索框为空时：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('//Search 组件内\\nconst renderHotKey = () => {\\n  let list = hotList ? hotList.toJS (): [];\\n  return (\\n    <ul>\\n      {\\n        list.map (item => {\\n          return (\\n            <li className=\"item\" key={item.first} onClick={() => setQuery (item.first)}>\\n              <span>{item.first}</span>\\n            </li>\\n          )\\n        })\\n      }\\n    </ul>\\n  )\\n};\\n//Container 组件中添加\\n<ShortcutWrapper show={!query}>\\n  <Scroll>\\n    <div>\\n      <HotKey>\\n        <h1 className=\"title\"> 热门搜索 </h1>\\n        {renderHotKey ()}\\n      </HotKey>\\n    </div>\\n  </Scroll>\\n</ShortcutWrapper>\\n\\n')])])]),n(\"p\",[e._v(\"对应的 style.js：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('export const ShortcutWrapper = styled.div`\\n  position: absolute;\\n  top: 40px;\\n  bottom: 0;\\n  width: 100%;\\n  display: ${props => props.show ? \"\":\"none\"};\\n`\\n\\nexport const HotKey = styled.div`\\n  margin: 0 20px 20px 20px;\\n  .title {\\n    padding-top: 35px;\\n    margin-bottom: 20px;\\n    font-size: ${style [\"font-size-m\"]};\\n    color: ${style [\"font-color-desc-v2\"]};\\n  }\\n  .item {\\n    display: inline-block;\\n    padding: 5px 10px;\\n    margin: 0 20px 10px 0;\\n    border-radius: 6px;\\n    background: ${style [\"highlight-background-color\"]};\\n    font-size: ${style [\"font-size-m\"]};\\n    color: ${style [\"font-color-desc\"]};\\n  }\\n`\\n\\n')])])]),n(\"p\",[e._v(\"当组件初次渲染时，我们发送 Ajax 请求拿到热门列表。\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"useEffect (() => {\\n  setShow (true);\\n  // 用了 redux 缓存，不再赘述\\n  if (!hotList.size)\\n    getHotKeyWordsDispatch ();\\n}, []);\\n\\n\")])])]),n(\"p\",[e._v(\"现在就能成功地看到热门标签了，而且点击标记，搜索框的内容也能跟着改变。\")]),e._v(\" \"),n(\"p\",[e._v(\"第二步，搜索框有内容时:\")]),e._v(\" \"),n(\"p\",[e._v(\"在 handleQuery 中加入下面的逻辑。\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const handleQuery = (q) => {\\n  //...\\n  if (!q) return;\\n  changeEnterLoadingDispatch (true);\\n  getSuggestListDispatch (q);\\n}\\n\\n\")])])]),n(\"p\",[e._v(\"然后分别渲染歌单、歌手和单曲列表。\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"// 顺便引入 Loading\\nimport Loading from './../../baseUI/loading/index';\\n\\nconst renderSingers = () => {};\\nconst renderAlbum = () => {};\\nconst renderSongs = () => {};\\n\\n{/* 紧接在热门列表后面 */}\\n{/* 下面为搜索结果 */}\\n<ShortcutWrapper show={query}>\\n  <Scroll onScorll={forceCheck}>\\n    <div>\\n      {renderSingers ()}\\n      {renderAlbum ()}\\n      {renderSongs ()}\\n    </div>\\n  </Scroll>\\n</ShortcutWrapper>\\n{ enterLoading? <Loading></Loading> : null }\\n\\n\")])])]),n(\"p\",[e._v(\"对于歌单而言:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('// 注意引入相应组件\\nimport LazyLoad, {forceCheck} from \\'react-lazyload\\';\\nimport { List, ListItem } from \\'./style\\';\\n\\nconst renderAlbum = () => {\\n  let albums = suggestList.playlists;\\n  if (!albums || !albums.length) return;\\n  return (\\n    <List>\\n      <h1 className=\"title\"> 相关歌单 </h1>\\n      {\\n        albums.map ((item, index) => {\\n          return (\\n            <ListItem key={item.accountId+\"\"+index}>\\n              <div className=\"img_wrapper\">\\n                <LazyLoad placeholder={<img width=\"100%\" height=\"100%\" src={require (\\'./music.png\\')} alt=\"music\"/>}>\\n                  <img src={item.coverImgUrl} width=\"100%\" height=\"100%\" alt=\"music\"/>\\n                </LazyLoad>\\n              </div>\\n              <span className=\"name\"> 歌单: {item.name}</span>\\n            </ListItem>\\n          )\\n        })\\n      }\\n    </List>\\n  )\\n};\\n\\n')])])]),n(\"p\",[e._v(\"style.js 中的 List 和 ListItem 如下:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('export const List = styled.div`\\n  display: flex;\\n  margin: auto;\\n  flex-direction: column;\\n  overflow: hidden;\\n  .title {\\n    margin:10px 0 10px 10px;\\n    color: ${style [\"font-color-desc\"]};\\n    font-size: ${style [\"font-size-s\"]};\\n  }\\n`;\\nexport const ListItem = styled.div`\\n  box-sizing: border-box;\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0 5px;\\n  padding: 5px 0;\\n  align-items: center;\\n  border-bottom: 1px solid ${style [\"border-color\"]};\\n  .img_wrapper {\\n    margin-right: 20px;\\n    img {\\n      border-radius: 3px;\\n      width: 50px;\\n      height: 50px;\\n    }\\n  }\\n  .name {\\n    font-size: ${style [\"font-size-m\"]};\\n    color: ${style [\"font-color-desc\"]};\\n    font-weight: 500;\\n  }\\n`;\\n\\n')])])]),n(\"p\",[e._v(\"这里进入的是一个全新的路由。但是我们可以复用 Album 组件，在 routes/index.js 增加:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('//...\\n// 增加 album 路由，用来显示歌单\\n{\\n  path: \"/album/:id\",\\n  exact: true,\\n  key: \"album\",\\n  component: Album\\n},\\n{\\n  path: \"/search\",\\n  exact: true,\\n  key: \"search\",\\n  component: Search\\n}\\n//...\\n\\n')])])]),n(\"p\",[e._v(\"对于歌手而言:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('const renderSingers = () => {\\n  let singers = suggestList.artists;\\n  if (!singers || !singers.length) return;\\n  return (\\n    <List>\\n      <h1 className=\"title\"> 相关歌手 </h1>\\n      {\\n        singers.map ((item, index) => {\\n          return (\\n            <ListItem key={item.accountId+\"\"+index}>\\n              <div className=\"img_wrapper\">\\n                <LazyLoad placeholder={<img width=\"100%\" height=\"100%\" src={require (\\'./singer.png\\')} alt=\"singer\"/>}>\\n                  <img src={item.picUrl} width=\"100%\" height=\"100%\" alt=\"music\"/>\\n                </LazyLoad>\\n              </div>\\n              <span className=\"name\"> 歌手: {item.name}</span>\\n            </ListItem>\\n          )\\n        })\\n      }\\n    </List>\\n  )\\n};\\n\\n')])])]),n(\"p\",[e._v(\"对于单曲列表:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"// 引入代码\\nimport { SongItem } from './style';\\nimport { getName } from '../../api/utils';\\n\\nconst renderSongs = () => {\\n  return (\\n    <SongItem style={{paddingLeft: \\\"20px\\\"}}> \\n      {\\n        songsList.map (item => {\\n          return (\\n            <li key={item.id}>\\n              <div className=\\\"info\\\">\\n                <span>{item.name}</span>\\n                <span>\\n                  { getName (item.artists) } - { item.album.name }\\n                </span>\\n              </div>\\n            </li>\\n          )\\n        })\\n      }\\n    </SongItem>\\n)\\n\\n\")])])]),n(\"p\",[e._v(\"SongItem 对应的样式代码:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('export const SongItem = styled.ul`\\n  >li {\\n    display: flex;\\n    height: 60px;\\n    align-items: center;  \\n    .index {\\n      width: 60px;\\n      height: 60px;\\n      line-height: 60px;\\n      text-align: center;\\n    }\\n    .info {\\n      box-sizing: border-box;\\n      flex: 1;\\n      display: flex;\\n      height: 100%;\\n      padding: 5px 0;\\n      flex-direction: column;\\n      justify-content: space-around;\\n      border-bottom: 1px solid ${style [\"border-color\"]};\\n      >span:first-child {\\n        color: ${style [\"font-color-desc\"]};\\n      }\\n      >span:last-child {\\n        font-size: ${style [\"font-size-s\"]};\\n        color: #bba8a8;\\n      }\\n    }\\n  }\\n`\\n\\n')])])]),n(\"p\",[e._v(\"对应的 music.png 和 singer.png 占位图片已经放在仓库中，有需要可以去仓库拷贝一份。\")]),e._v(\" \"),n(\"p\",[e._v(\"这三者的逻辑虽然有点复杂，但是难度并不大。这里就不过多的拆解，大家将代码过一遍，能够理解每一步做的什么事情即可。\")]),e._v(\" \"),n(\"p\",[e._v(\"第三步，点击结果，进入到各自的详情页。\")]),e._v(\" \"),n(\"p\",[e._v(\"在 renderSingers 方法中:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('<ListItem key={item.accountId+\"\"+index} onClick={() => props.history.push (`/singers/${item.id}`)}>\\n\\n')])])]),n(\"p\",[e._v(\"在 renderAlbum 方法中:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('<ListItem key={item.accountId+\"\"+index} onClick={() => props.history.push (`/album/${item.id}`)}>\\n\\n')])])]),n(\"p\",[e._v(\"在 renderSongs 方法中:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"<li key={item.id} onClick={(e) => selectItem (e, item.id)}>\\n\\n\")])])]),n(\"p\",[e._v(\"而 selectItem 定义如下:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const selectItem = (e, id) => {\\n\\n}\\n\\n\")])])]),n(\"p\",[e._v(\"重点来了！现在歌单和歌手详情页都能正确跳转，后面的逻辑当然能走的通了，剩下的就是如何处理单曲的问题。我们希望点击单曲后能够直接播放，那么首先需要 将选中的单曲加入到播放列表中。顺便提一句，网易云给到的搜索单曲的接口中数据并不完整，需要我们拿到 id 再重新获取具体的单曲数据，然后再添加到播放列表中。\")]),e._v(\" \"),n(\"p\",[e._v(\"axios 请求部分:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"export const getSongDetailRequest = id => {\\n  return axiosInstance.get (`/song/detail?ids=${id}`);\\n};\\n\\n\")])])]),n(\"p\",[e._v(\"关于歌曲的逻辑属于播放器部分，因此我们转到 Player/store/actionCreators.js 中来编写：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"import { getSongDetailRequest } from '../../../api/request';\\nimport { INSERT_SONG } from './constants';\\n\\nexport const insertSong = (data) => ({\\n  type: INSERT_SONG,\\n  data\\n});\\n\\nexport const getSongDetail = (id) => {\\n  return (dispatch) => {\\n    getSongDetailRequest (id).then (data => {\\n      let song = data.songs [0];\\n      dispatch (insertSong ( song));\\n    })\\n  }\\n}\\n\\n\")])])]),n(\"p\",[e._v(\"同目录 constants.js 中添加:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"export const INSERT_SONG = 'player/INSERT_SONG';\\n\\n\")])])]),n(\"p\",[e._v(\"然后再 reducer 编写具体的 insert 逻辑:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"export default (state = defaultState, action) => {\\n  switch (action.type) {\\n    //...\\n    case actionTypes.INSERT_SONG:\\n      return handleInsertSong (state, action.data);\\n    default:\\n      return state;\\n  }\\n}\\n\\n\")])])]),n(\"p\",[e._v(\"handleInsertSong 的逻辑还是比较复杂的，我们单独拎出来拆解:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const handleInsertSong = (state, song) => {\\n  const playList = JSON.parse (JSON.stringify (state.get ('playList').toJS ()));\\n  const sequenceList = JSON.parse (JSON.stringify (state.get ('sequencePlayList').toJS ()));\\n  let currentIndex = state.get ('currentIndex');\\n  // 看看有没有同款\\n  let fpIndex = findIndex (song, playList);\\n  // 如果是当前歌曲直接不处理\\n  if (fpIndex === currentIndex && currentIndex !== -1) return state;\\n  currentIndex++;\\n  // 把歌放进去，放到当前播放曲目的下一个位置\\n  playList.splice (currentIndex, 0, song);\\n  // 如果列表中已经存在要添加的歌，暂且称它 oldSong\\n  if (fpIndex > -1) {\\n    // 如果 oldSong 的索引在目前播放歌曲的索引小，那么删除它，同时当前 index 要减一\\n    if (currentIndex > fpIndex) {\\n      playList.splice (fpIndex, 1);\\n      currentIndex--;\\n    } else {\\n      // 否则直接删掉 oldSong\\n      playList.splice (fpIndex+1, 1);\\n    }\\n  }\\n  // 同理，处理 sequenceList\\n  let sequenceIndex = findIndex (playList [currentIndex], sequenceList) + 1;\\n  let fsIndex = findIndex (song, sequenceList);\\n  // 插入歌曲\\n  sequenceList.splice (sequenceIndex, 0, song);\\n  if (fsIndex > -1) {\\n    // 跟上面类似的逻辑。如果在前面就删掉，index--; 如果在后面就直接删除\\n    if (sequenceIndex > fsIndex) {\\n      sequenceList.splice (fsIndex, 1);\\n      sequenceIndex--;\\n    } else {\\n      sequenceList.splice (fsIndex + 1, 1);\\n    }\\n  }\\n  return state.merge ({\\n    'playList': fromJS (playList),\\n    'sequencePlayList': fromJS (sequenceList),\\n    'currentIndex': fromJS (currentIndex),\\n  });\\n}\\n\\n\")])])]),n(\"p\",[e._v(\"现在插入的逻辑可以在 Search 组件中运用了。\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const mapDispatchToProps = (dispatch) => {\\n  return {\\n    //...\\n    getSongDetailDispatch (id) {\\n      dispatch (getSongDetail (id));\\n    }\\n  }\\n};\\n\\n\")])])]),n(\"p\",[e._v(\"在组件中：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const selectItem = (e, id) => {\\n  getSongDetailDispatch (id);\\n}\\n\\n\")])])]),n(\"p\",[e._v(\"现在点击单曲后，歌曲就能正常播放啦！\")]),e._v(\" \"),n(\"p\",[e._v(\"由于没有加上音符组件，因此这里不会有音符坠落的动画，加上去也非常简单。\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"import MusicalNote from '../../baseUI/music-note';\\nimport { useRef } from 'react';\\n// 组件内部\\nconst musicNoteRef = useRef ();\\n\\n// 返回的 JSX\\n// Container 标签中加入\\n<MusicalNote ref={musicNoteRef}></MusicalNote>\\n\\n\")])])]),n(\"p\",[e._v(\"然后在 selectItem 方法中加入一行代码就 OK:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"const selectItem = (e, id) => {\\n  getSongDetailDispatch (id);\\n  musicNoteRef.current.startAnimation ({x:e.nativeEvent.clientX, y:e.nativeEvent.clientY});\\n}\\n\\n\")])])]),n(\"p\",[e._v(\"当然，还剩下一个小小的 bug，事实上 Container 还是会遮盖住 miniPlayer。\")]),e._v(\" \"),n(\"p\",[e._v(\"之前专门修复了不少这样的 bug, 现在贴上代码:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"//Search/index.js\\n<Container play={songsCount}>\\n\\n\")])])]),n(\"p\",[e._v(\"style.js 中:\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('export const Container = styled.div`\\n  //...\\n  bottom: ${props => props.play > 0 ? \"60px\": 0};\\n  //...\\n`\\n\\n')])])]),n(\"p\",[e._v(\"搜索模块现在就开发完毕了。总体来说，还是非常复杂的一个组件。希望大家好好消化一下，对自己是一个很好的锻炼。\")])])}),[],!1,null,null,null);t.default=a.exports}}]);","extractedComments":[]}