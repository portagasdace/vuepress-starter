{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{610:function(t,s,a){\"use strict\";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"_1-3-给-npm-script-传递参数和添加注释\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-给-npm-script-传递参数和添加注释\"}},[t._v(\"#\")]),t._v(\" 1.3 给 npm script 传递参数和添加注释\")]),t._v(\" \"),a(\"p\",[t._v(\"本小节会介绍 3 个知识点：给 npm script 传递参数以减少重复的 npm script；增加注释提高 npm script 脚本的可读性；控制运行时日志输出能让你专注在重要信息上。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"给-npm-script-传递参数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#给-npm-script-传递参数\"}},[t._v(\"#\")]),t._v(\" 给 npm script 传递参数\")]),t._v(\" \"),a(\"p\",[t._v(\"eslint 内置了代码风格自动修复模式，只需给它传入 \"),a(\"code\",[t._v(\"--fix\")]),t._v(\" 参数即可，在 scripts 中声明检查代码命令的同时你可能也需要声明修复代码的命令，面对这种需求，大多数同学可能会忍不住复制粘贴，如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('diff --git a/package.json b/package.json\\nindex c32da1c..b6fb03e 100644\\n--- a/package.json\\n+++ b/package.json\\n@@ -5,6 +5,7 @@\\n     \"lint:js\": \"eslint *.js\",\\n+    \"lint:js:fix\": \"eslint *.js --fix\",\\n')])])]),a(\"p\",[t._v(\"在 \"),a(\"code\",[t._v(\"lint:js\")]),t._v(\" 命令比较短的时候复制粘贴的方法简单粗暴有效，但是当 \"),a(\"code\",[t._v(\"lint:js\")]),t._v(\" 命令变的很长之后，难免后续会有人改了 \"),a(\"code\",[t._v(\"lint:js\")]),t._v(\" 而忘记修改 \"),a(\"code\",[t._v(\"lint:js:fix\")]),t._v(\"（\"),a(\"strong\",[t._v(\"别问我为啥，我就是踩着坑过来的\")]),t._v(\"），更健壮的做法是，在运行 npm script 时给定额外的参数，代码修改如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('diff --git a/package.json b/package.json\\n--- a/package.json\\n+++ b/package.json\\n@@ -5,6 +5,7 @@\\n     \"lint:js\": \"eslint *.js\",\\n+    \"lint:js:fix\": \"npm run lint:js -- --fix\",\\n')])])]),a(\"p\",[t._v(\"要格外注意 \"),a(\"code\",[t._v(\"--fix\")]),t._v(\" 参数前面的 \"),a(\"code\",[t._v(\"--\")]),t._v(\" 分隔符，意指要给 \"),a(\"code\",[t._v(\"npm run lint:js\")]),t._v(\" 实际指向的命令传递额外的参数。\")]),t._v(\" \"),a(\"p\",[t._v(\"运行效果如下图：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2017/11/27/15ffa71dbf43d9ff?w=1702&h=376&f=jpeg&s=77949\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"上图第2个红色框里面是实际执行的命令，可以看到 \"),a(\"code\",[t._v(\"--fix\")]),t._v(\" 参数附加在了后面。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[a(\"strong\",[t._v(\"TIP#6\")]),t._v(\"：如果你不想单独声明 \"),a(\"code\",[t._v(\"lint:js:fix\")]),t._v(\" 命令，在需要的时候直接运行： \"),a(\"code\",[t._v(\"npm run lint:js -- --fix\")]),t._v(\" 来实现同样的效果。\")])]),t._v(\" \"),a(\"p\",[t._v(\"问题来了，如果我想为 mocha 命令增加 \"),a(\"code\",[t._v(\"--watch\")]),t._v(\" 模式方便在开发时立即看到测试结果，该怎么做呢？相信读到这里你心中已经有了答案。\")]),t._v(\" \"),a(\"p\",[t._v(\"😛\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"给-npm-script-添加注释\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#给-npm-script-添加注释\"}},[t._v(\"#\")]),t._v(\" 给 npm script 添加注释\")]),t._v(\" \"),a(\"p\",[t._v(\"如果 package.json 中的 scripts 越来越多，或者出现复杂的编排命令，你可能需要给它们添加注释以保障代码可读性，但 json 天然是不支持添加注释的，下面是 2 种比较 trick 的方式。\")]),t._v(\" \"),a(\"p\",[t._v(\"第一种方式是，package.json 中可以增加 \"),a(\"code\",[t._v(\"//\")]),t._v(\" 为键的值，注释就可以写在对应的值里面，npm 会忽略这种键，比如，我们想要给 test 命令添加注释，按如下方式添加：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('diff --git a/package.json b/package.json\\n--- a/package.json\\n+++ b/package.json\\n@@ -10,6 +10,7 @@\\n+    \"//\": \"运行所有代码检查和单元测试\",\\n     \"test\": \"npm-run-all --parallel lint:* mocha\"\\n')])])]),a(\"p\",[t._v(\"这种方式的明显不足是，npm run 列出来的命令列表不能把注释和实际命令对应上，如果你声明了多个，npm run 只会列出最后那个，如下图：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2017/11/27/15ffa7295bd69b87?w=844&h=441&f=png&s=56037\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"另外一种方式是直接在 script 声明中做手脚，因为命令的本质是 shell 命令（适用于 linux 平台），我们可以在命令前面加上注释，具体做法如下：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('diff --git a/package.json b/package.json\\n--- a/package.json\\n+++ b/package.json\\n@@ -10,8 +10,7 @@\\n-    \"//\": \"运行所有代码检查和单元测试\",\\n-    \"test\": \"npm-run-all --parallel lint:* mocha\"\\n+    \"test\": \"# 运行所有代码检查和单元测试 \\\\n    npm-run-all --parallel lint:* mocha\"\\n')])])]),a(\"p\",[t._v(\"注意注释后面的换行符 \"),a(\"code\",[t._v(\"\\\\n\")]),t._v(\" 和多余的空格，换行符是用于将注释和命令分隔开，这样命令就相当于微型的 shell 脚本，多余的空格是为了控制缩进，也可以用制表符 \"),a(\"code\",[t._v(\"\\\\t\")]),t._v(\" 替代。这种做法能让 npm run 列出来的命令更美观，但是 scripts 声明阅读起来不那么整齐美观。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2017/11/27/15ffa72c247900f5?w=846&h=412&f=png&s=54745\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"上面两种方式都有明显的缺陷，个人建议的更优方案还是把复杂的命令剥离到单独的文件中管理，在单独的文件中可以自由给它添加注释，详见后续章节。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"调整-npm-script-运行时日志输出\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#调整-npm-script-运行时日志输出\"}},[t._v(\"#\")]),t._v(\" 调整 npm script 运行时日志输出\")]),t._v(\" \"),a(\"p\",[t._v(\"在运行 npm script 出现问题时你需要有能力去调试它，某些情况下你需要让 npm script 以静默的方式运行，这类需求可通过控制运行时日志输出级别来实现。\")]),t._v(\" \"),a(\"p\",[t._v(\"日志级别控制参数有好几个，简单举例如下：\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"默认日志输出级别\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#默认日志输出级别\"}},[t._v(\"#\")]),t._v(\" 默认日志输出级别\")]),t._v(\" \"),a(\"p\",[t._v(\"即不加任何日志控制参数得到的输出，可能是你最常用的，能看到执行的命令、命令执行的结果。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"显示尽可能少的有用信息\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#显示尽可能少的有用信息\"}},[t._v(\"#\")]),t._v(\" 显示尽可能少的有用信息\")]),t._v(\" \"),a(\"p\",[t._v(\"结合其他工具调用 npm script 的时候比较有用，需要使用 \"),a(\"code\",[t._v(\"--loglevel silent\")]),t._v(\"，或者 \"),a(\"code\",[t._v(\"--silent\")]),t._v(\"，或者更简单的 \"),a(\"code\",[t._v(\"-s\")]),t._v(\" 来控制，这个日志级别的输出实例如下（只有命令本身的输出，读起来非常的简洁）：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2017/11/27/15ffa73279c8a9e8?w=782&h=232&f=png&s=20452\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"如果执行各种 lint script 的时候启用了 \"),a(\"code\",[t._v(\"-s\")]),t._v(\" 配置，代码都符合规范的话，你不会看到任何输出，这就是\"),a(\"strong\",[t._v(\"没有消息是最好的消息\")]),t._v(\"的由来，哈哈！\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"显示尽可能多的运行时状态\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#显示尽可能多的运行时状态\"}},[t._v(\"#\")]),t._v(\" 显示尽可能多的运行时状态\")]),t._v(\" \"),a(\"p\",[t._v(\"排查脚本问题的时候比较有用，需要使用 \"),a(\"code\",[t._v(\"--loglevel verbose\")]),t._v(\"，或者 \"),a(\"code\",[t._v(\"--verbose\")]),t._v(\"，或者更简单的 \"),a(\"code\",[t._v(\"-d\")]),t._v(\" 来控制，这个日志级别的输出实例如下（详细打印出了每个步骤的参数、返回值，下面的截图只是部分）：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2017/11/27/15ffa734d9168dff?w=826&h=691&f=png&s=157260\",alt:\"\"}})]),t._v(\" \"),a(\"hr\"),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"本节用到的代码见 \"),a(\"a\",{attrs:{href:\"https://github.com/wangshijun/automated-workflow-with-npm-script/tree/03-arguments-comments-logs\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"GitHub\"),a(\"OutboundLink\")],1),t._v(\"，想边看边动手练习的同学可以拉下来自己改，注意切换到正确的分支 \"),a(\"code\",[t._v(\"03-arguments-comments-logs\")]),t._v(\"。\")])]),t._v(\" \"),a(\"hr\")])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}