{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[224],{577:function(_,v,e){\"use strict\";e.r(v);var a=e(42),t=Object(a.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":_.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"事务隔离级别和mvcc\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务隔离级别和mvcc\"}},[_._v(\"#\")]),_._v(\" 事务隔离级别和MVCC\")]),_._v(\" \"),e(\"p\",[_._v(\"标签： MySQL是怎样运行的\")]),_._v(\" \"),e(\"hr\"),_._v(\" \"),e(\"h2\",{attrs:{id:\"事前准备\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事前准备\"}},[_._v(\"#\")]),_._v(\" 事前准备\")]),_._v(\" \"),e(\"p\",[_._v(\"为了故事的顺利发展，我们需要创建一个表：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"CREATE TABLE hero (\\n    number INT,\\n    name VARCHAR(100),\\n    country varchar(100),\\n    PRIMARY KEY (number)\\n) Engine=InnoDB CHARSET=utf8;\\n\")])])]),e(\"div\",{staticClass:\"language-! extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"小贴士：\\n\\n注意我们把这个hero表的主键命名为number，而不是id，主要是想和后边要用到的事务id做区别，大家不用大惊小怪哈～ \\n\")])])]),e(\"p\",[_._v(\"然后向这个表里插入一条数据：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"INSERT INTO hero VALUES(1, '刘备', '蜀');\\n\")])])]),e(\"p\",[_._v(\"现在表里的数据就是这样的：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"mysql> SELECT * FROM hero;\\n+--------+--------+---------+\\n| number | name   | country |\\n+--------+--------+---------+\\n|      1 | 刘备   | 蜀      |\\n+--------+--------+---------+\\n1 row in set (0.00 sec)\\n\")])])]),e(\"h2\",{attrs:{id:\"事务隔离级别\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务隔离级别\"}},[_._v(\"#\")]),_._v(\" 事务隔离级别\")]),_._v(\" \"),e(\"p\",[_._v(\"我们知道\"),e(\"code\",[_._v(\"MySQL\")]),_._v(\"是一个\"),e(\"code\",[_._v(\"客户端／服务器\")]),_._v(\"架构的软件，对于同一个服务器来说，可以有若干个客户端与之连接，每个客户端与服务器连接上之后，就可以称之为一个会话（\"),e(\"code\",[_._v(\"Session\")]),_._v(\"）。每个客户端都可以在自己的会话中向服务器发出请求语句，一个请求语句可能是某个事务的一部分，也就是对于服务器来说可能同时处理多个事务。在事务简介的章节中我们说过事务有一个称之为\"),e(\"code\",[_._v(\"隔离性\")]),_._v(\"的特性，理论上在某个事务对某个数据进行访问时，其他事务应该进行排队，当该事务提交之后，其他事务才可以继续访问这个数据。但是这样子的话对性能影响太大，我们既想保持事务的\"),e(\"code\",[_._v(\"隔离性\")]),_._v(\"，又想让服务器在处理访问同一数据的多个事务时性能尽量高些，鱼和熊掌不可得兼，舍一部分\"),e(\"code\",[_._v(\"隔离性\")]),_._v(\"而取性能者也。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"事务并发执行遇到的问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务并发执行遇到的问题\"}},[_._v(\"#\")]),_._v(\" 事务并发执行遇到的问题\")]),_._v(\" \"),e(\"p\",[_._v(\"怎么个舍弃法呢？我们先得看一下访问相同数据的事务在不保证串行执行（也就是执行完一个再执行另一个）的情况下可能会出现哪些问题：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"脏写（\"),e(\"code\",[_._v(\"Dirty Write\")]),_._v(\"）\")]),_._v(\" \"),e(\"p\",[_._v(\"如果\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"一个事务修改了另一个未提交事务修改过的数据\")]),_._v(\"，那就意味着发生了\"),e(\"code\",[_._v(\"脏写\")]),_._v(\"，示意图如下：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/18/16a2f43405cb6e70?w=1020&h=503&f=png&s=80035\",alt:\"image_1d8nigfq618jd1cc56231rt0uq19.png-78.2kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"如上图，\"),e(\"code\",[_._v(\"Session A\")]),_._v(\"和\"),e(\"code\",[_._v(\"Session B\")]),_._v(\"各开启了一个事务，\"),e(\"code\",[_._v(\"Session B\")]),_._v(\"中的事务先将\"),e(\"code\",[_._v(\"number\")]),_._v(\"列为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录的\"),e(\"code\",[_._v(\"name\")]),_._v(\"列更新为\"),e(\"code\",[_._v(\"'关羽'\")]),_._v(\"，然后\"),e(\"code\",[_._v(\"Session A\")]),_._v(\"中的事务接着又把这条\"),e(\"code\",[_._v(\"number\")]),_._v(\"列为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录的\"),e(\"code\",[_._v(\"name\")]),_._v(\"列更新为\"),e(\"code\",[_._v(\"张飞\")]),_._v(\"。如果之后\"),e(\"code\",[_._v(\"Session B\")]),_._v(\"中的事务进行了回滚，那么\"),e(\"code\",[_._v(\"Session A\")]),_._v(\"中的更新也将不复存在，这种现象就称之为\"),e(\"code\",[_._v(\"脏写\")]),_._v(\"。这时\"),e(\"code\",[_._v(\"Session A\")]),_._v(\"中的事务就很懵逼，我明明把数据更新了，最后也提交事务了，怎么到最后说自己啥也没干呢？\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"脏读（\"),e(\"code\",[_._v(\"Dirty Read\")]),_._v(\"）\")]),_._v(\" \"),e(\"p\",[_._v(\"如果\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"一个事务读到了另一个未提交事务修改过的数据\")]),_._v(\"，那就意味着发生了\"),e(\"code\",[_._v(\"脏读\")]),_._v(\"，示意图如下：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/18/16a2f79b4eacc05d?w=1002&h=479&f=png&s=94019\",alt:\"image_1d8nn50kndkd8641epplvelhk9.png-91.8kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"如上图，\"),e(\"code\",[_._v(\"Session A\")]),_._v(\"和\"),e(\"code\",[_._v(\"Session B\")]),_._v(\"各开启了一个事务，\"),e(\"code\",[_._v(\"Session B\")]),_._v(\"中的事务先将\"),e(\"code\",[_._v(\"number\")]),_._v(\"列为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录的\"),e(\"code\",[_._v(\"name\")]),_._v(\"列更新为\"),e(\"code\",[_._v(\"'关羽'\")]),_._v(\"，然后\"),e(\"code\",[_._v(\"Session A\")]),_._v(\"中的事务再去查询这条\"),e(\"code\",[_._v(\"number\")]),_._v(\"为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录，如果du到列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的值为\"),e(\"code\",[_._v(\"'关羽'\")]),_._v(\"，而\"),e(\"code\",[_._v(\"Session B\")]),_._v(\"中的事务稍后进行了回滚，那么\"),e(\"code\",[_._v(\"Session A\")]),_._v(\"中的事务相当于读到了一个不存在的数据，这种现象就称之为\"),e(\"code\",[_._v(\"脏读\")]),_._v(\"。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"不可重复读（Non-Repeatable Read）\")]),_._v(\" \"),e(\"p\",[_._v(\"如果\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值\")]),_._v(\"，那就意味着发生了\"),e(\"code\",[_._v(\"不可重复读\")]),_._v(\"，示意图如下：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/18/16a2f5b32bc1f76b?w=988&h=482&f=png&s=142755\",alt:\"image_1d8nk4k1e1mt51nsj1hg41cd7v5950.png-139.4kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"如上图，我们在\"),e(\"code\",[_._v(\"Session B\")]),_._v(\"中提交了几个隐式事务（注意是隐式事务，意味着语句结束事务就提交了），这些事务都修改了\"),e(\"code\",[_._v(\"number\")]),_._v(\"列为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的值，每次事务提交之后，如果\"),e(\"code\",[_._v(\"Session A\")]),_._v(\"中的事务都可以查看到最新的值，这种现象也被称之为\"),e(\"code\",[_._v(\"不可重复读\")]),_._v(\"。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"幻读（Phantom）\")]),_._v(\" \"),e(\"p\",[_._v(\"如果\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来\")]),_._v(\"，那就意味着发生了\"),e(\"code\",[_._v(\"幻读\")]),_._v(\"，示意图如下：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/18/16a2f5b32d7b9ada?w=1019&h=377&f=png&s=98399\",alt:\"image_1d8nl564faluogc1eqn1am812v79.png-96.1kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"如上图，\"),e(\"code\",[_._v(\"Session A\")]),_._v(\"中的事务先根据条件\"),e(\"code\",[_._v(\"number > 0\")]),_._v(\"这个条件查询表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"，得到了\"),e(\"code\",[_._v(\"name\")]),_._v(\"列值为\"),e(\"code\",[_._v(\"'刘备'\")]),_._v(\"的记录；之后\"),e(\"code\",[_._v(\"Session B\")]),_._v(\"中提交了一个隐式事务，该事务向表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"中插入了一条新记录；之后\"),e(\"code\",[_._v(\"Session A\")]),_._v(\"中的事务再根据相同的条件\"),e(\"code\",[_._v(\"number > 0\")]),_._v(\"查询表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"，得到的结果集中包含\"),e(\"code\",[_._v(\"Session B\")]),_._v(\"中的事务新插入的那条记录，这种现象也被称之为\"),e(\"code\",[_._v(\"幻读\")]),_._v(\"。\")]),_._v(\" \"),e(\"p\",[_._v(\"有的同学会有疑问，那如果\"),e(\"code\",[_._v(\"Session B\")]),_._v(\"中是删除了一些符合\"),e(\"code\",[_._v(\"number > 0\")]),_._v(\"的记录而不是插入新记录，那\"),e(\"code\",[_._v(\"Session A\")]),_._v(\"中之后再根据\"),e(\"code\",[_._v(\"number > 0\")]),_._v(\"的条件读取的记录变少了，这种现象算不算\"),e(\"code\",[_._v(\"幻读\")]),_._v(\"呢？明确说一下，这种现象不属于\"),e(\"code\",[_._v(\"幻读\")]),_._v(\"，\"),e(\"code\",[_._v(\"幻读\")]),_._v(\"强调的是一个事务按照某个相同条件多次读取记录时，后读取时读到了之前没有读到的记录。\")]),_._v(\" \"),e(\"div\",{staticClass:\"language-! extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"小贴士：\\n\\n那对于先前已经读到的记录，之后又读取不到这种情况，算啥呢？其实这相当于对每一条记录都发生了不可重复读的现象。幻读只是重点强调了读取到了之前读取没有获取到的记录。\\n\")])])])])]),_._v(\" \"),e(\"h3\",{attrs:{id:\"sql标准中的四种隔离级别\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sql标准中的四种隔离级别\"}},[_._v(\"#\")]),_._v(\" SQL标准中的四种隔离级别\")]),_._v(\" \"),e(\"p\",[_._v(\"我们上边介绍了几种并发事务执行过程中可能遇到的一些问题，这些问题也有轻重缓急之分，我们给这些问题按照严重性来排一下序：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"脏写 > 脏读 > 不可重复读 > 幻读\\n\")])])]),e(\"p\",[_._v(\"我们上边所说的舍弃一部分隔离性来换取一部分性能在这里就体现在：\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"设立一些隔离级别，隔离级别越低，越严重的问题就越可能发生\")]),_._v(\"。有一帮人（并不是设计\"),e(\"code\",[_._v(\"MySQL\")]),_._v(\"的大叔们）制定了一个所谓的\"),e(\"code\",[_._v(\"SQL标准\")]),_._v(\"，在标准中设立了4个\"),e(\"code\",[_._v(\"隔离级别\")]),_._v(\"：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"READ UNCOMMITTED\")]),_._v(\"：未提交读。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"READ COMMITTED\")]),_._v(\"：已提交读。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"：可重复读。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"SERIALIZABLE\")]),_._v(\"：可串行化。\")])])]),_._v(\" \"),e(\"p\",[e(\"code\",[_._v(\"SQL标准\")]),_._v(\"中规定，针对不同的隔离级别，并发事务可以发生不同严重程度的问题，具体情况如下：\")]),_._v(\" \"),e(\"table\",[e(\"thead\",[e(\"tr\",[e(\"th\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"隔离级别\")]),_._v(\" \"),e(\"th\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"脏读\")]),_._v(\" \"),e(\"th\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"不可重复读\")]),_._v(\" \"),e(\"th\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"幻读\")])])]),_._v(\" \"),e(\"tbody\",[e(\"tr\",[e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[e(\"code\",[_._v(\"READ UNCOMMITTED\")])]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Possible\")]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Possible\")]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Possible\")])]),_._v(\" \"),e(\"tr\",[e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[e(\"code\",[_._v(\"READ COMMITTED\")])]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Not Possible\")]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Possible\")]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Possible\")])]),_._v(\" \"),e(\"tr\",[e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[e(\"code\",[_._v(\"REPEATABLE READ\")])]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Not Possible\")]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Not Possible\")]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Possible\")])]),_._v(\" \"),e(\"tr\",[e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[e(\"code\",[_._v(\"SERIALIZABLE\")])]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Not Possible\")]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Not Possible\")]),_._v(\" \"),e(\"td\",{staticStyle:{\"text-align\":\"center\"}},[_._v(\"Not Possible\")])])])]),_._v(\" \"),e(\"p\",[_._v(\"也就是说：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"READ UNCOMMITTED\")]),_._v(\"隔离级别下，可能发生\"),e(\"code\",[_._v(\"脏读\")]),_._v(\"、\"),e(\"code\",[_._v(\"不可重复读\")]),_._v(\"和\"),e(\"code\",[_._v(\"幻读\")]),_._v(\"问题。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"READ COMMITTED\")]),_._v(\"隔离级别下，可能发生\"),e(\"code\",[_._v(\"不可重复读\")]),_._v(\"和\"),e(\"code\",[_._v(\"幻读\")]),_._v(\"问题，但是不可以发生\"),e(\"code\",[_._v(\"脏读\")]),_._v(\"问题。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"隔离级别下，可能发生\"),e(\"code\",[_._v(\"幻读\")]),_._v(\"问题，但是不可以发生\"),e(\"code\",[_._v(\"脏读\")]),_._v(\"和\"),e(\"code\",[_._v(\"不可重复读\")]),_._v(\"的问题。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"SERIALIZABLE\")]),_._v(\"隔离级别下，各种问题都不可以发生。\")])])]),_._v(\" \"),e(\"p\",[e(\"code\",[_._v(\"脏写\")]),_._v(\"是怎么回事儿？怎么里边都没写呢？\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"这是因为脏写这个问题太严重了，不论是哪种隔离级别，都不允许脏写的情况发生\")]),_._v(\"。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"mysql中支持的四种隔离级别\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mysql中支持的四种隔离级别\"}},[_._v(\"#\")]),_._v(\" MySQL中支持的四种隔离级别\")]),_._v(\" \"),e(\"p\",[_._v(\"不同的数据库厂商对\"),e(\"code\",[_._v(\"SQL标准\")]),_._v(\"中规定的四种隔离级别支持不一样，比方说\"),e(\"code\",[_._v(\"Oracle\")]),_._v(\"就只支持\"),e(\"code\",[_._v(\"READ COMMITTED\")]),_._v(\"和\"),e(\"code\",[_._v(\"SERIALIZABLE\")]),_._v(\"隔离级别。本书中所讨论的\"),e(\"code\",[_._v(\"MySQL\")]),_._v(\"虽然支持4种隔离级别，但与\"),e(\"code\",[_._v(\"SQL标准\")]),_._v(\"中所规定的各级隔离级别允许发生的问题却有些出入，\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"MySQL在REPEATABLE READ隔离级别下，是可以禁止幻读问题的发生的\")]),_._v(\"（关于如何禁止我们之后会详细说明的）。\")]),_._v(\" \"),e(\"p\",[e(\"code\",[_._v(\"MySQL\")]),_._v(\"的默认隔离级别为\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"，我们可以手动修改一下事务的隔离级别。\")]),_._v(\" \"),e(\"h4\",{attrs:{id:\"如何设置事务的隔离级别\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何设置事务的隔离级别\"}},[_._v(\"#\")]),_._v(\" 如何设置事务的隔离级别\")]),_._v(\" \"),e(\"p\",[_._v(\"我们可以通过下边的语句修改事务的隔离级别：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SET [GLOBAL|SESSION] TRANSACTION ISOLATION LEVEL level;\\n\")])])]),e(\"p\",[_._v(\"其中的\"),e(\"code\",[_._v(\"level\")]),_._v(\"可选值有4个：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"level: {\\n     REPEATABLE READ\\n   | READ COMMITTED\\n   | READ UNCOMMITTED\\n   | SERIALIZABLE\\n}\\n\")])])]),e(\"p\",[_._v(\"设置事务的隔离级别的语句中，在\"),e(\"code\",[_._v(\"SET\")]),_._v(\"关键字后可以放置\"),e(\"code\",[_._v(\"GLOBAL\")]),_._v(\"关键字、\"),e(\"code\",[_._v(\"SESSION\")]),_._v(\"关键字或者什么都不放，这样会对不同范围的事务产生不同的影响，具体如下：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"使用\"),e(\"code\",[_._v(\"GLOBAL\")]),_._v(\"关键字（在全局范围影响）：\")]),_._v(\" \"),e(\"p\",[_._v(\"比方说这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SET GLOBAL TRANSACTION ISOLATION LEVEL SERIALIZABLE;\\n\")])])]),e(\"p\",[_._v(\"则：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"只对执行完该语句之后产生的会话起作用。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"当前已经存在的会话无效。\")])])])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"使用\"),e(\"code\",[_._v(\"SESSION\")]),_._v(\"关键字（在会话范围影响）：\")]),_._v(\" \"),e(\"p\",[_._v(\"比方说这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;\\n\")])])]),e(\"p\",[_._v(\"则：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"对当前会话的所有后续的事务有效\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"该语句可以在已经开启的事务中间执行，但不会影响当前正在执行的事务。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果在事务之间执行，则对后续的事务有效。\")])])])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"上述两个关键字都不用（只对执行语句后的下一个事务产生影响）：\")]),_._v(\" \"),e(\"p\",[_._v(\"比方说这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\\n\")])])]),e(\"p\",[_._v(\"则：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"只对当前会话中下一个即将开启的事务有效。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"下一个事务执行完后，后续事务将恢复到之前的隔离级别。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"该语句不能在已经开启的事务中间执行，会报错的。\")])])])])]),_._v(\" \"),e(\"p\",[_._v(\"如果我们在服务器启动时想改变事务的默认隔离级别，可以修改启动参数\"),e(\"code\",[_._v(\"transaction-isolation\")]),_._v(\"的值，比方说我们在启动服务器时指定了\"),e(\"code\",[_._v(\"--transaction-isolation=SERIALIZABLE\")]),_._v(\"，那么事务的默认隔离级别就从原来的\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"变成了\"),e(\"code\",[_._v(\"SERIALIZABLE\")]),_._v(\"。\")]),_._v(\" \"),e(\"p\",[_._v(\"想要查看当前会话默认的隔离级别可以通过查看系统变量\"),e(\"code\",[_._v(\"transaction_isolation\")]),_._v(\"的值来确定：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"mysql> SHOW VARIABLES LIKE 'transaction_isolation';\\n+-----------------------+-----------------+\\n| Variable_name         | Value           |\\n+-----------------------+-----------------+\\n| transaction_isolation | REPEATABLE-READ |\\n+-----------------------+-----------------+\\n1 row in set (0.02 sec)\\n\")])])]),e(\"p\",[_._v(\"或者使用更简便的写法：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"mysql> SELECT @@transaction_isolation;\\n+-------------------------+\\n| @@transaction_isolation |\\n+-------------------------+\\n| REPEATABLE-READ         |\\n+-------------------------+\\n1 row in set (0.00 sec)\\n\")])])]),e(\"div\",{staticClass:\"language-! extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"小贴士：\\n\\n我们也可以使用设置系统变量transaction_isolation的方式来设置事务的隔离级别，不过我们前边介绍过，一般系统变量只有GLOBAL和SESSION两个作用范围，而这个transaction_isolation却有3个（与上边 SET TRANSACTION ISOLATION LEVEL的语法相对应），设置语法上有些特殊，更多详情可以参见文档：https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_transaction_isolation。\\n\\n另外，transaction_isolation是在MySQL 5.7.20的版本中引入来替换tx_isolation的，如果你使用的是之前版本的MySQL，请将上述用到系统变量transaction_isolation的地方替换为tx_isolation。\\n\")])])]),e(\"h2\",{attrs:{id:\"mvcc原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mvcc原理\"}},[_._v(\"#\")]),_._v(\" MVCC原理\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"版本链\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#版本链\"}},[_._v(\"#\")]),_._v(\" 版本链\")]),_._v(\" \"),e(\"p\",[_._v(\"我们前边说过，对于使用\"),e(\"code\",[_._v(\"InnoDB\")]),_._v(\"存储引擎的表来说，它的聚簇索引记录中都包含两个必要的隐藏列（\"),e(\"code\",[_._v(\"row_id\")]),_._v(\"并不是必要的，我们创建的表中有主键或者非NULL的UNIQUE键时都不会包含\"),e(\"code\",[_._v(\"row_id\")]),_._v(\"列）：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"trx_id\")]),_._v(\"：每次一个事务对某条聚簇索引记录进行改动时，都会把该事务的\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"赋值给\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"隐藏列。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"roll_pointer\")]),_._v(\"：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到\"),e(\"code\",[_._v(\"undo日志\")]),_._v(\"中，然后这个隐藏列就相当于一个指针，可以通过它来找到该记录修改前的信息。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"比方说我们的表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"现在只包含一条记录：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"mysql> SELECT * FROM hero;\\n+--------+--------+---------+\\n| number | name   | country |\\n+--------+--------+---------+\\n|      1 | 刘备   | 蜀      |\\n+--------+--------+---------+\\n1 row in set (0.07 sec)\\n\")])])]),e(\"p\",[_._v(\"假设插入该记录的\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"为\"),e(\"code\",[_._v(\"80\")]),_._v(\"，那么此刻该条记录的示意图如下所示：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/19/16a337f526c95a9e?w=934&h=237&f=png&s=22949\",alt:\"image_1d8oab1ubb7v5f41j2pai21co19.png-22.4kB\"}})]),_._v(\" \"),e(\"div\",{staticClass:\"language-! extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"小贴士：\\n\\n实际上insert undo只在事务回滚时起作用，当事务提交后，该类型的undo日志就没用了，它占用的Undo Log Segment也会被系统回收（也就是该undo日志占用的Undo页面链表要么被重用，要么被释放）。虽然真正的insert undo日志占用的存储空间被释放了，但是roll_pointer的值并不会被清除，roll_pointer属性占用7个字节，第一个比特位就标记着它指向的undo日志的类型，如果该比特位的值为1时，就代表着它指向的undo日志类型为insert undo。所以我们之后在画图时都会把insert undo给去掉，大家留意一下就好了。\\n\")])])]),e(\"p\",[_._v(\"假设之后两个\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"分别为\"),e(\"code\",[_._v(\"100\")]),_._v(\"、\"),e(\"code\",[_._v(\"200\")]),_._v(\"的事务对这条记录进行\"),e(\"code\",[_._v(\"UPDATE\")]),_._v(\"操作，操作流程如下：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/19/16a337f52a913b66?w=939&h=511&f=png&s=94535\",alt:\"image_1d8obbc861ulkpt3no31gecrho16.png-92.3kB\"}})]),_._v(\" \"),e(\"div\",{staticClass:\"language-! extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"小贴士：\\n\\n能不能在两个事务中交叉更新同一条记录呢？哈哈，这不就是一个事务修改了另一个未提交事务修改过的数据，沦为了脏写了么？InnoDB使用锁来保证不会有脏写情况的发生，也就是在第一个事务更新了某条记录后，就会给这条记录加锁，另一个事务再次更新时就需要等待第一个事务提交了，把锁释放之后才可以继续更新。关于锁的更多细节我们后续的文章中再唠叨哈～\\n\")])])]),e(\"p\",[_._v(\"每次对记录进行改动，都会记录一条\"),e(\"code\",[_._v(\"undo日志\")]),_._v(\"，每条\"),e(\"code\",[_._v(\"undo日志\")]),_._v(\"也都有一个\"),e(\"code\",[_._v(\"roll_pointer\")]),_._v(\"属性（\"),e(\"code\",[_._v(\"INSERT\")]),_._v(\"操作对应的\"),e(\"code\",[_._v(\"undo日志\")]),_._v(\"没有该属性，因为该记录并没有更早的版本），可以将这些\"),e(\"code\",[_._v(\"undo日志\")]),_._v(\"都连起来，串成一个链表，所以现在的情况就像下图一样：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/19/16a33e277a98dbec?w=1144&h=605&f=png&s=83629\",alt:\"image_1d8po6kgkejilj2g4t3t81evm20.png-81.7kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"对该记录每次更新后，都会将旧值放到一条\"),e(\"code\",[_._v(\"undo日志\")]),_._v(\"中，就算是该记录的一个旧版本，随着更新次数的增多，所有的版本都会被\"),e(\"code\",[_._v(\"roll_pointer\")]),_._v(\"属性连接成一个链表，我们把这个链表称之为\"),e(\"code\",[_._v(\"版本链\")]),_._v(\"，\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"版本链的头节点就是当前记录最新的值\")]),_._v(\"。另外，每个版本中还包含生成该版本时对应的\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"，这个信息很重要，我们稍后就会用到。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"readview\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#readview\"}},[_._v(\"#\")]),_._v(\" ReadView\")]),_._v(\" \"),e(\"p\",[_._v(\"对于使用\"),e(\"code\",[_._v(\"READ UNCOMMITTED\")]),_._v(\"隔离级别的事务来说，由于可以读到未提交事务修改过的记录，所以直接读取记录的最新版本就好了；对于使用\"),e(\"code\",[_._v(\"SERIALIZABLE\")]),_._v(\"隔离级别的事务来说，设计\"),e(\"code\",[_._v(\"InnoDB\")]),_._v(\"的大叔规定使用加锁的方式来访问记录（加锁是啥我们后续文章中说哈）；对于使用\"),e(\"code\",[_._v(\"READ COMMITTED\")]),_._v(\"和\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"隔离级别的事务来说，都必须保证读到已经提交了的事务修改过的记录，也就是说假如另一个事务已经修改了记录但是尚未提交，是不能直接读取最新版本的记录的，核心问题就是：\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"需要判断一下版本链中的哪个版本是当前事务可见的\")]),_._v(\"。为此，设计\"),e(\"code\",[_._v(\"InnoDB\")]),_._v(\"的大叔提出了一个\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"的概念，这个\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"中主要包含4个比较重要的内容：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"m_ids\")]),_._v(\"：表示在生成\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"时当前系统中活跃的读写事务的\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"列表。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"min_trx_id\")]),_._v(\"：表示在生成\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"时当前系统中活跃的读写事务中最小的\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"，也就是\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"中的最小值。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"max_trx_id\")]),_._v(\"：表示生成\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"时系统中应该分配给下一个事务的\"),e(\"code\",[_._v(\"id\")]),_._v(\"值。\")]),_._v(\" \"),e(\"div\",{staticClass:\"language-! extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"小贴士：\\n\\n注意max_trx_id并不是m_ids中的最大值，事务id是递增分配的。比方说现在有id为1，2，3这三个事务，之后id为3的事务提交了。那么一个新的读事务在生成ReadView时，m_ids就包括1和2，min_trx_id的值就是1，max_trx_id的值就是4。\\n\")])])])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"creator_trx_id\")]),_._v(\"：表示生成该\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"的事务的\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"。\")]),_._v(\" \"),e(\"div\",{staticClass:\"language-! extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"小贴士：\\n\\n我们前边说过，只有在对表中的记录做改动时（执行INSERT、DELETE、UPDATE这些语句时）才会为事务分配事务id，否则在一个只读事务中的事务id值都默认为0。\\n\")])])])])]),_._v(\" \"),e(\"p\",[_._v(\"有了这个\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"，这样在访问某条记录时，只需要按照下边的步骤判断记录的某个版本是否可见：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"如果被访问版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"属性值与\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"中的\"),e(\"code\",[_._v(\"creator_trx_id\")]),_._v(\"值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果被访问版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"属性值小于\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"中的\"),e(\"code\",[_._v(\"min_trx_id\")]),_._v(\"值，表明生成该版本的事务在当前事务生成\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"前已经提交，所以该版本可以被当前事务访问。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果被访问版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"属性值大于\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"中的\"),e(\"code\",[_._v(\"max_trx_id\")]),_._v(\"值，表明生成该版本的事务在当前事务生成\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"后才开启，所以该版本不可以被当前事务访问。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果被访问版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"属性值在\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"的\"),e(\"code\",[_._v(\"min_trx_id\")]),_._v(\"和\"),e(\"code\",[_._v(\"max_trx_id\")]),_._v(\"之间，那就需要判断一下\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"属性值是不是在\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表中，如果在，说明创建\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"时生成该版本的事务已经被提交，该版本可以被访问。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。\")]),_._v(\" \"),e(\"p\",[_._v(\"在\"),e(\"code\",[_._v(\"MySQL\")]),_._v(\"中，\"),e(\"code\",[_._v(\"READ COMMITTED\")]),_._v(\"和\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"隔离级别的的一个非常大的区别就是\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"它们生成ReadView的时机不同\")]),_._v(\"。我们还是以表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"为例来，假设现在表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"中只有一条由\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"为\"),e(\"code\",[_._v(\"80\")]),_._v(\"的事务插入的一条记录：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"mysql> SELECT * FROM hero;\\n+--------+--------+---------+\\n| number | name   | country |\\n+--------+--------+---------+\\n|      1 | 刘备   | 蜀      |\\n+--------+--------+---------+\\n1 row in set (0.07 sec)\\n\")])])]),e(\"p\",[_._v(\"接下来看一下\"),e(\"code\",[_._v(\"READ COMMITTED\")]),_._v(\"和\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"所谓的\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"生成ReadView的时机不同\")]),_._v(\"到底不同在哪里。\")]),_._v(\" \"),e(\"h4\",{attrs:{id:\"read-committed-每次读取数据前都生成一个readview\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#read-committed-每次读取数据前都生成一个readview\"}},[_._v(\"#\")]),_._v(\" READ COMMITTED —— 每次读取数据前都生成一个ReadView\")]),_._v(\" \"),e(\"p\",[_._v(\"比方说现在系统里有两个\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"分别为\"),e(\"code\",[_._v(\"100\")]),_._v(\"、\"),e(\"code\",[_._v(\"200\")]),_._v(\"的事务在执行：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# Transaction 100\\nBEGIN;\\n\\nUPDATE hero SET name = '关羽' WHERE number = 1;\\n\\nUPDATE hero SET name = '张飞' WHERE number = 1;\\n\")])])]),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# Transaction 200\\nBEGIN;\\n\\n# 更新了一些别的表的记录\\n...\\n\")])])]),e(\"div\",{staticClass:\"language-! extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"小贴士：\\n\\n再次强调一遍，事务执行过程中，只有在第一次真正修改记录时（比如使用INSERT、DELETE、UPDATE语句），才会被分配一个单独的事务id，这个事务id是递增的。所以我们才在Transaction 200中更新一些别的表的记录，目的是让它分配事务id。\\n\")])])]),e(\"p\",[_._v(\"此刻，表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"中\"),e(\"code\",[_._v(\"number\")]),_._v(\"为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录得到的版本链表如下所示：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/19/16a33e277e11d7b8?w=1150&h=382&f=png&s=65259\",alt:\"image_1d8poeb056ck1d552it4t91aro2d.png-63.7kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"假设现在有一个使用\"),e(\"code\",[_._v(\"READ COMMITTED\")]),_._v(\"隔离级别的事务开始执行：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# 使用READ COMMITTED隔离级别的事务\\nBEGIN;\\n\\n# SELECT1：Transaction 100、200未提交\\nSELECT * FROM hero WHERE number = 1; # 得到的列name的值为'刘备'\\n\")])])]),e(\"p\",[_._v(\"这个\"),e(\"code\",[_._v(\"SELECT1\")]),_._v(\"的执行过程如下：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"在执行\"),e(\"code\",[_._v(\"SELECT\")]),_._v(\"语句时会先生成一个\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"，\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"的\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表的内容就是\"),e(\"code\",[_._v(\"[100, 200]\")]),_._v(\"，\"),e(\"code\",[_._v(\"min_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"100\")]),_._v(\"，\"),e(\"code\",[_._v(\"max_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"201\")]),_._v(\"，\"),e(\"code\",[_._v(\"creator_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"0\")]),_._v(\"。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"然后从版本链中挑选可见的记录，从图中可以看出，最新版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'张飞'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值为\"),e(\"code\",[_._v(\"100\")]),_._v(\"，在\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表内，所以不符合可见性要求，根据\"),e(\"code\",[_._v(\"roll_pointer\")]),_._v(\"跳到下一个版本。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"下一个版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'关羽'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值也为\"),e(\"code\",[_._v(\"100\")]),_._v(\"，也在\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表内，所以也不符合要求，继续跳到下一个版本。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"下一个版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'刘备'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值为\"),e(\"code\",[_._v(\"80\")]),_._v(\"，小于\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"中的\"),e(\"code\",[_._v(\"min_trx_id\")]),_._v(\"值\"),e(\"code\",[_._v(\"100\")]),_._v(\"，所以这个版本是符合要求的，最后返回给用户的版本就是这条列\"),e(\"code\",[_._v(\"name\")]),_._v(\"为\"),e(\"code\",[_._v(\"'刘备'\")]),_._v(\"的记录。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"之后，我们把\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"为\"),e(\"code\",[_._v(\"100\")]),_._v(\"的事务提交一下，就像这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# Transaction 100\\nBEGIN;\\n\\nUPDATE hero SET name = '关羽' WHERE number = 1;\\n\\nUPDATE hero SET name = '张飞' WHERE number = 1;\\n\\nCOMMIT;\\n\")])])]),e(\"p\",[_._v(\"然后再到\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"为\"),e(\"code\",[_._v(\"200\")]),_._v(\"的事务中更新一下表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"中\"),e(\"code\",[_._v(\"number\")]),_._v(\"为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# Transaction 200\\nBEGIN;\\n\\n# 更新了一些别的表的记录\\n...\\n\\nUPDATE hero SET name = '赵云' WHERE number = 1;\\n\\nUPDATE hero SET name = '诸葛亮' WHERE number = 1;\\n\")])])]),e(\"p\",[_._v(\"此刻，表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"中\"),e(\"code\",[_._v(\"number\")]),_._v(\"为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录的版本链就长这样：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/19/16a33e277f08dc3c?w=1112&h=585&f=png&s=80473\",alt:\"image_1d8poudrjdrk4k0i22bj10g82q.png-78.6kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"然后再到刚才使用\"),e(\"code\",[_._v(\"READ COMMITTED\")]),_._v(\"隔离级别的事务中继续查找这个\"),e(\"code\",[_._v(\"number\")]),_._v(\"为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录，如下：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# 使用READ COMMITTED隔离级别的事务\\nBEGIN;\\n\\n# SELECT1：Transaction 100、200均未提交\\nSELECT * FROM hero WHERE number = 1; # 得到的列name的值为'刘备'\\n\\n# SELECT2：Transaction 100提交，Transaction 200未提交\\nSELECT * FROM hero WHERE number = 1; # 得到的列name的值为'张飞'\\n\")])])]),e(\"p\",[_._v(\"这个\"),e(\"code\",[_._v(\"SELECT2\")]),_._v(\"的执行过程如下：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"在执行\"),e(\"code\",[_._v(\"SELECT\")]),_._v(\"语句时会\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"又会单独生成\")]),_._v(\"一个\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"，该\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"的\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表的内容就是\"),e(\"code\",[_._v(\"[200]\")]),_._v(\"（\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"为\"),e(\"code\",[_._v(\"100\")]),_._v(\"的那个事务已经提交了，所以再次生成快照时就没有它了），\"),e(\"code\",[_._v(\"min_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"200\")]),_._v(\"，\"),e(\"code\",[_._v(\"max_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"201\")]),_._v(\"，\"),e(\"code\",[_._v(\"creator_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"0\")]),_._v(\"。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"然后从版本链中挑选可见的记录，从图中可以看出，最新版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'诸葛亮'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值为\"),e(\"code\",[_._v(\"200\")]),_._v(\"，在\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表内，所以不符合可见性要求，根据\"),e(\"code\",[_._v(\"roll_pointer\")]),_._v(\"跳到下一个版本。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"下一个版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'赵云'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值为\"),e(\"code\",[_._v(\"200\")]),_._v(\"，也在\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表内，所以也不符合要求，继续跳到下一个版本。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"下一个版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'张飞'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值为\"),e(\"code\",[_._v(\"100\")]),_._v(\"，小于\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"中的\"),e(\"code\",[_._v(\"min_trx_id\")]),_._v(\"值\"),e(\"code\",[_._v(\"200\")]),_._v(\"，所以这个版本是符合要求的，最后返回给用户的版本就是这条列\"),e(\"code\",[_._v(\"name\")]),_._v(\"为\"),e(\"code\",[_._v(\"'张飞'\")]),_._v(\"的记录。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"以此类推，如果之后\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"为\"),e(\"code\",[_._v(\"200\")]),_._v(\"的记录也提交了，再此在使用\"),e(\"code\",[_._v(\"READ COMMITTED\")]),_._v(\"隔离级别的事务中查询表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"中\"),e(\"code\",[_._v(\"number\")]),_._v(\"值为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录时，得到的结果就是\"),e(\"code\",[_._v(\"'诸葛亮'\")]),_._v(\"了，具体流程我们就不分析了。总结一下就是：\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"使用READ COMMITTED隔离级别的事务在每次查询开始时都会生成一个独立的ReadView\")]),_._v(\"。\")]),_._v(\" \"),e(\"h4\",{attrs:{id:\"repeatable-read-在第一次读取数据时生成一个readview\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#repeatable-read-在第一次读取数据时生成一个readview\"}},[_._v(\"#\")]),_._v(\" REPEATABLE READ —— 在第一次读取数据时生成一个ReadView\")]),_._v(\" \"),e(\"p\",[_._v(\"对于使用\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"隔离级别的事务来说，只会在第一次执行查询语句时生成一个\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"，之后的查询就不会重复生成了。我们还是用例子看一下是什么效果。\")]),_._v(\" \"),e(\"p\",[_._v(\"比方说现在系统里有两个\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"分别为\"),e(\"code\",[_._v(\"100\")]),_._v(\"、\"),e(\"code\",[_._v(\"200\")]),_._v(\"的事务在执行：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# Transaction 100\\nBEGIN;\\n\\nUPDATE hero SET name = '关羽' WHERE number = 1;\\n\\nUPDATE hero SET name = '张飞' WHERE number = 1;\\n\")])])]),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# Transaction 200\\nBEGIN;\\n\\n# 更新了一些别的表的记录\\n...\\n\")])])]),e(\"p\",[_._v(\"此刻，表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"中\"),e(\"code\",[_._v(\"number\")]),_._v(\"为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录得到的版本链表如下所示：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/19/16a33e277f5bfb75?w=1117&h=361&f=png&s=62362\",alt:\"image_1d8pt2nd6moqtjn12hibgj91f37.png-60.9kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"假设现在有一个使用\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"隔离级别的事务开始执行：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# 使用REPEATABLE READ隔离级别的事务\\nBEGIN;\\n\\n# SELECT1：Transaction 100、200未提交\\nSELECT * FROM hero WHERE number = 1; # 得到的列name的值为'刘备'\\n\")])])]),e(\"p\",[_._v(\"这个\"),e(\"code\",[_._v(\"SELECT1\")]),_._v(\"的执行过程如下：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"在执行\"),e(\"code\",[_._v(\"SELECT\")]),_._v(\"语句时会先生成一个\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"，\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"的\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表的内容就是\"),e(\"code\",[_._v(\"[100, 200]\")]),_._v(\"，\"),e(\"code\",[_._v(\"min_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"100\")]),_._v(\"，\"),e(\"code\",[_._v(\"max_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"201\")]),_._v(\"，\"),e(\"code\",[_._v(\"creator_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"0\")]),_._v(\"。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"然后从版本链中挑选可见的记录，从图中可以看出，最新版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'张飞'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值为\"),e(\"code\",[_._v(\"100\")]),_._v(\"，在\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表内，所以不符合可见性要求，根据\"),e(\"code\",[_._v(\"roll_pointer\")]),_._v(\"跳到下一个版本。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"下一个版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'关羽'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值也为\"),e(\"code\",[_._v(\"100\")]),_._v(\"，也在\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表内，所以也不符合要求，继续跳到下一个版本。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"下一个版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'刘备'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值为\"),e(\"code\",[_._v(\"80\")]),_._v(\"，小于\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"中的\"),e(\"code\",[_._v(\"min_trx_id\")]),_._v(\"值\"),e(\"code\",[_._v(\"100\")]),_._v(\"，所以这个版本是符合要求的，最后返回给用户的版本就是这条列\"),e(\"code\",[_._v(\"name\")]),_._v(\"为\"),e(\"code\",[_._v(\"'刘备'\")]),_._v(\"的记录。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"之后，我们把\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"为\"),e(\"code\",[_._v(\"100\")]),_._v(\"的事务提交一下，就像这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# Transaction 100\\nBEGIN;\\n\\nUPDATE hero SET name = '关羽' WHERE number = 1;\\n\\nUPDATE hero SET name = '张飞' WHERE number = 1;\\n\\nCOMMIT;\\n\")])])]),e(\"p\",[_._v(\"然后再到\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"为\"),e(\"code\",[_._v(\"200\")]),_._v(\"的事务中更新一下表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"中\"),e(\"code\",[_._v(\"number\")]),_._v(\"为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# Transaction 200\\nBEGIN;\\n\\n# 更新了一些别的表的记录\\n...\\n\\nUPDATE hero SET name = '赵云' WHERE number = 1;\\n\\nUPDATE hero SET name = '诸葛亮' WHERE number = 1;\\n\")])])]),e(\"p\",[_._v(\"此刻，表\"),e(\"code\",[_._v(\"hero\")]),_._v(\"中\"),e(\"code\",[_._v(\"number\")]),_._v(\"为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录的版本链就长这样：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/19/16a33e277f809c36?w=1099&h=580&f=png&s=80117\",alt:\"image_1d8ptbc339kdk0b1du3nef6s03k.png-78.2kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"然后再到刚才使用\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"隔离级别的事务中继续查找这个\"),e(\"code\",[_._v(\"number\")]),_._v(\"为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录，如下：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"# 使用REPEATABLE READ隔离级别的事务\\nBEGIN;\\n\\n# SELECT1：Transaction 100、200均未提交\\nSELECT * FROM hero WHERE number = 1; # 得到的列name的值为'刘备'\\n\\n# SELECT2：Transaction 100提交，Transaction 200未提交\\nSELECT * FROM hero WHERE number = 1; # 得到的列name的值仍为'刘备'\\n\")])])]),e(\"p\",[_._v(\"这个\"),e(\"code\",[_._v(\"SELECT2\")]),_._v(\"的执行过程如下：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"因为当前事务的隔离级别为\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"，而之前在执行\"),e(\"code\",[_._v(\"SELECT1\")]),_._v(\"时已经生成过\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"了，所以此时直接复用之前的\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"，之前的\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"的\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表的内容就是\"),e(\"code\",[_._v(\"[100, 200]\")]),_._v(\"，\"),e(\"code\",[_._v(\"min_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"100\")]),_._v(\"，\"),e(\"code\",[_._v(\"max_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"201\")]),_._v(\"，\"),e(\"code\",[_._v(\"creator_trx_id\")]),_._v(\"为\"),e(\"code\",[_._v(\"0\")]),_._v(\"。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"然后从版本链中挑选可见的记录，从图中可以看出，最新版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'诸葛亮'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值为\"),e(\"code\",[_._v(\"200\")]),_._v(\"，在\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表内，所以不符合可见性要求，根据\"),e(\"code\",[_._v(\"roll_pointer\")]),_._v(\"跳到下一个版本。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"下一个版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'赵云'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值为\"),e(\"code\",[_._v(\"200\")]),_._v(\"，也在\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表内，所以也不符合要求，继续跳到下一个版本。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"下一个版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'张飞'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值为\"),e(\"code\",[_._v(\"100\")]),_._v(\"，而\"),e(\"code\",[_._v(\"m_ids\")]),_._v(\"列表中是包含值为\"),e(\"code\",[_._v(\"100\")]),_._v(\"的\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"的，所以该版本也不符合要求，同理下一个列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'关羽'\")]),_._v(\"的版本也不符合要求。继续跳到下一个版本。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"下一个版本的列\"),e(\"code\",[_._v(\"name\")]),_._v(\"的内容是\"),e(\"code\",[_._v(\"'刘备'\")]),_._v(\"，该版本的\"),e(\"code\",[_._v(\"trx_id\")]),_._v(\"值为\"),e(\"code\",[_._v(\"80\")]),_._v(\"，小于\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"中的\"),e(\"code\",[_._v(\"min_trx_id\")]),_._v(\"值\"),e(\"code\",[_._v(\"100\")]),_._v(\"，所以这个版本是符合要求的，最后返回给用户的版本就是这条列\"),e(\"code\",[_._v(\"c\")]),_._v(\"为\"),e(\"code\",[_._v(\"'刘备'\")]),_._v(\"的记录。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"也就是说两次\"),e(\"code\",[_._v(\"SELECT\")]),_._v(\"查询得到的结果是重复的，记录的列\"),e(\"code\",[_._v(\"c\")]),_._v(\"值都是\"),e(\"code\",[_._v(\"'刘备'\")]),_._v(\"，这就是\"),e(\"code\",[_._v(\"可重复读\")]),_._v(\"的含义。如果我们之后再把\"),e(\"code\",[_._v(\"事务id\")]),_._v(\"为\"),e(\"code\",[_._v(\"200\")]),_._v(\"的记录提交了，然后再到刚才使用\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"隔离级别的事务中继续查找这个\"),e(\"code\",[_._v(\"number\")]),_._v(\"为\"),e(\"code\",[_._v(\"1\")]),_._v(\"的记录，得到的结果还是\"),e(\"code\",[_._v(\"'刘备'\")]),_._v(\"，具体执行过程大家可以自己分析一下。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"mvcc小结\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mvcc小结\"}},[_._v(\"#\")]),_._v(\" MVCC小结\")]),_._v(\" \"),e(\"p\",[_._v(\"从上边的描述中我们可以看出来，所谓的\"),e(\"code\",[_._v(\"MVCC\")]),_._v(\"（Multi-Version Concurrency Control ，多版本并发控制）指的就是在使用\"),e(\"code\",[_._v(\"READ COMMITTD\")]),_._v(\"、\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"这两种隔离级别的事务在执行普通的\"),e(\"code\",[_._v(\"SEELCT\")]),_._v(\"操作时访问记录的版本链的过程，这样子可以使不同事务的\"),e(\"code\",[_._v(\"读-写\")]),_._v(\"、\"),e(\"code\",[_._v(\"写-读\")]),_._v(\"操作并发执行，从而提升系统性能。\"),e(\"code\",[_._v(\"READ COMMITTD\")]),_._v(\"、\"),e(\"code\",[_._v(\"REPEATABLE READ\")]),_._v(\"这两个隔离级别的一个很大不同就是：\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"生成ReadView的时机不同，READ COMMITTD在每一次进行普通SELECT操作前都会生成一个ReadView，而REPEATABLE READ只在第一次进行普通SELECT操作前生成一个ReadView，之后的查询操作都重复使用这个ReadView就好了\")]),_._v(\"。\")]),_._v(\" \"),e(\"div\",{staticClass:\"language-! extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"小贴士：\\n\\n我们之前说执行DELETE语句或者更新主键的UPDATE语句并不会立即把对应的记录完全从页面中删除，而是执行一个所谓的delete mark操作，相当于只是对记录打上了一个删除标志位，这主要就是为MVCC服务的，大家可以对比上边举的例子自己试想一下怎么使用。\\n\\n另外，所谓的MVCC只是在我们进行普通的SEELCT查询时才生效，截止到目前我们所见的所有SELECT语句都算是普通的查询，至于啥是个不普通的查询，我们稍后再说哈～\\n\")])])]),e(\"h2\",{attrs:{id:\"关于purge\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#关于purge\"}},[_._v(\"#\")]),_._v(\" 关于purge\")]),_._v(\" \"),e(\"p\",[_._v(\"大家有没有发现两件事儿：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"我们说\"),e(\"code\",[_._v(\"insert undo\")]),_._v(\"在事务提交之后就可以被释放掉了，而\"),e(\"code\",[_._v(\"update undo\")]),_._v(\"由于还需要支持\"),e(\"code\",[_._v(\"MVCC\")]),_._v(\"，不能立即删除掉。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"为了支持\"),e(\"code\",[_._v(\"MVCC\")]),_._v(\"，对于\"),e(\"code\",[_._v(\"delete mark\")]),_._v(\"操作来说，仅仅是在记录上打一个删除标记，并没有真正将它删除掉。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"随着系统的运行，在确定系统中包含最早产生的那个\"),e(\"code\",[_._v(\"ReadView\")]),_._v(\"的事务不会再访问某些\"),e(\"code\",[_._v(\"update undo日志\")]),_._v(\"以及被打了删除标记的记录后，有一个后台运行的\"),e(\"code\",[_._v(\"purge线程\")]),_._v(\"会把它们真正的删除掉。关于更多的purge细节，我们将放到纸质书中进行详细唠叨，不见不散哈～\")])])}),[],!1,null,null,null);v.default=t.exports}}]);","extractedComments":[]}