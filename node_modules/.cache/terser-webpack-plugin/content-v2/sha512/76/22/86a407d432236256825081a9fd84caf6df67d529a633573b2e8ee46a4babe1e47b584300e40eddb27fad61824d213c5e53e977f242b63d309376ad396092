{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[333],{693:function(n,e,t){\"use strict\";t.r(e);var s=t(42),i=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[t(\"blockquote\",[t(\"p\",[n._v(\"本节代码对应 GitHub 分支: chapter3\")])]),n._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter3\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"仓库传送门\"),t(\"OutboundLink\")],1)]),n._v(\" \"),t(\"h1\",{attrs:{id:\"一、轮播组件开发\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、轮播组件开发\"}},[n._v(\"#\")]),n._v(\" 一、轮播组件开发\")]),n._v(\" \"),t(\"p\",[n._v(\"现在来开发 recommend 组件，首先进入到 src 目录下 application/Recommend/index.js 中:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"import React from 'react';\\nimport Slider from '../../components/slider';\\n\\nfunction Recommend () {\\n\\n  //mock 数据\\n  const bannerList = [1,2,3,4].map (item => {\\n    return { imageUrl: \\\"http://p1.music.126.net/ZYLJ2oZn74yUz5x8NBGkVA==/109951164331219056.jpg\\\" }\\n  });\\n\\n  return (\\n    <div>\\n      <Slider bannerList={bannerList}></Slider>\\n    </div>\\n  )\\n}\\n\\nexport default React.memo (Recommend);\\n\\n\")])])]),t(\"p\",[n._v(\"现在就可以着手编写 slider 组件的具体内容了。首先安装一个插件:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"npm install swiper --save\\n\\n\")])])]),t(\"p\",[n._v(\"接下来，在 slider/index.js 中：\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('//components/slider/index.js\\nimport React, { useEffect, useState } from \\'react\\';\\nimport { SliderContainer } from \\'./style\\';\\nimport \"swiper/css/swiper.css\";\\nimport Swiper from \"swiper\";\\n\\nfunction Slider (props) {\\n  const [sliderSwiper, setSliderSwiper] = useState (null);\\n  const { bannerList } = props;\\n\\n  useEffect (() => {\\n    if (bannerList.length && !sliderSwiper){\\n        let newSliderSwiper = new Swiper(\".slider-container\", {\\n          loop: true,\\n          autoplay: {\\n            delay: 3000,\\n            disableOnInteraction: false,\\n          },\\n          pagination: {el:\\'.swiper-pagination\\'},\\n        });\\n        setSliderSwiper(newSliderSwiper);\\n    }\\n  }, [bannerList.length, sliderSwiper]);\\n  \\n  return (\\n    <SliderContainer>\\n      <div className=\"slider-container\">\\n        <div className=\"swiper-wrapper\">\\n          {\\n            bannerList.map (slider => {\\n              return (\\n                <div className=\"swiper-slide\" key={slider.imageUrl}>\\n                  <div className=\"slider-nav\">\\n                    <img src={slider.imageUrl} width=\"100%\" height=\"100%\" alt=\"推荐\" />\\n                  </div>\\n                </div>\\n              );\\n            })\\n          }\\n        </div>\\n        <div className=\"swiper-pagination\"></div>\\n      </div> \\n    </SliderContainer>\\n  );\\n}\\n\\nexport default React.memo (Slider);\\n\\n')])])]),t(\"p\",[n._v(\"对应的 style.js 文件:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"import styled from'styled-components';\\nimport style from '../../assets/global-style';\\n\\nexport const SliderContainer = styled.div`\\n  position: relative;\\n  box-sizing: border-box;\\n  width: 100%;\\n  height: 100%;\\n  margin: auto;\\n  background: white;\\n  .before {\\n    position: absolute;\\n    top: 0;\\n    height: 60%;\\n    width: 100%;\\n    background: ${style [\\\"theme-color\\\"]};\\n  }\\n  .slider-container {\\n    position: relative;\\n    width: 98%;\\n    height: 160px;\\n    overflow: hidden;\\n    margin: auto;\\n    border-radius: 6px;\\n    .slider-nav {\\n      position: absolute;\\n      display: block;\\n      width: 100%;\\n      height: 100%;\\n    }\\n    .swiper-pagination-bullet-active {\\n      background: ${style [\\\"theme-color\\\"]};\\n    }\\n  }\\n`\\n\\n\\n\")])])]),t(\"p\",[n._v(\"现在打开页面可以看到这个效果:\")]),n._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/10/18/16dddee709659acb?w=375&h=254&f=jpeg&s=21721\",alt:\"\"}})]),n._v(\" \"),t(\"p\",[n._v(\"轮播的功能已经具备，但是这个效果并不是我们想要的，我们希望它是两边并不是完全空白，而是有一部分红色做衬托，如图:\")]),n._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/10/18/16dddee925d33b38?w=373&h=263&f=jpeg&s=21930\",alt:\"\"}})]),n._v(\" \"),t(\"p\",[n._v(\"这个效果如何来实现？如果说单纯去增加 Home 组件的高度，那么其他的组件并不需要下面的这些红色背景，显然不合适，我们只能在 slider 组件上做一些手脚。 我们在 SliderContainer 标签内新建一个 div:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('<div className=\"before\"></div>\\n\\n')])])]),t(\"p\",[n._v(\"样式已经写在上面的 style.js 中了，大家可以翻到上面看看，还是比较 tricky 的一个操作，相当于另外做了一层遮罩，我们之后开发歌手详情页同样会用到这个方法。\")]),n._v(\" \"),t(\"h1\",{attrs:{id:\"二、推荐列表开发\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、推荐列表开发\"}},[n._v(\"#\")]),n._v(\" 二、推荐列表开发\")]),n._v(\" \"),t(\"p\",[n._v(\"首先在 recommend 组件中:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"import React from 'react';\\nimport Slider from '../../components/slider';\\nimport RecommendList from '../../components/list';\\n\\nfunction Recommend () {\\n\\n  //mock 数据\\n  const bannerList = [1,2,3,4].map (item => {\\n    return { imageUrl: \\\"http://p1.music.126.net/ZYLJ2oZn74yUz5x8NBGkVA==/109951164331219056.jpg\\\" }\\n  });\\n\\n  const recommendList = [1,2,3,4,5,6,7,8,9,10].map (item => {\\n    return {\\n      id: 1,\\n      picUrl: \\\"https://p1.music.126.net/fhmefjUfMD-8qtj3JKeHbA==/18999560928537533.jpg\\\",\\n      playCount: 17171122,\\n      name: \\\"朴树、许巍、李健、郑钧、老狼、赵雷\\\"\\n    }\\n  });\\n\\n  return (\\n    <div>\\n      <Slider bannerList={bannerList}></Slider>\\n      <RecommendList recommendList={recommendList}></RecommendList> \\n    </div>\\n  )\\n}\\n\\nexport default React.memo (Recommend);\\n\\n\")])])]),t(\"p\",[n._v(\"现在来开发 list 这个组件，首先展示 DOM 结构，\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('import React from \\'react\\';\\nimport { \\n  ListWrapper,\\n  ListItem,\\n  List\\n} from \\'./style\\';\\n\\nfunction RecommendList (props) {\\n  return (\\n    <ListWrapper>\\n      <h1 className=\"title\"> 推荐歌单 </h1>\\n      <List>\\n        {\\n          props.recommendList.map ((item, index) => {\\n            return (\\n              <ListItem key={item.id + index}>\\n                <div className=\"img_wrapper\">\\n                  <div className=\"decorate\"></div>\\n                    {/* 加此参数可以减小请求的图片资源大小 */}\\n                    <img src={item.picUrl + \"?param=300x300\"} width=\"100%\" height=\"100%\" alt=\"music\"/>\\n                  <div className=\"play_count\">\\n                    <i className=\"iconfont play\">&#xe885;</i>\\n                    <span className=\"count\">{getCount (item.playCount)}</span>\\n                  </div>\\n                </div>\\n                <div className=\"desc\">{item.name}</div>\\n              </ListItem>\\n            )\\n          })\\n        }\\n      </List>\\n    </ListWrapper>\\n  );\\n  }\\n \\nexport default React.memo (RecommendList);\\n\\n')])])]),t(\"p\",[n._v(\"这里需要提醒大家一下，getCount 是一个工具类函数，与我们的业务功能关系不大，我们把它放到专门的目录下去编写：\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('// 大家按照这个目录层级新建文件\\n//src/api/utils.js\\nexport const getCount = (count) => {\\n  if (count < 0) return;\\n  if (count < 10000) {\\n    return count;\\n  } else if (Math.floor (count / 10000) < 10000) {\\n    return Math.floor (count/1000)/10 + \"万\";\\n  } else  {\\n    return Math.floor (count / 10000000)/ 10 + \"亿\";\\n  }\\n}\\n\\n')])])]),t(\"p\",[n._v(\"刚才的 list/index.js 中并没有引入这个函数，现在需要加一行引入代码:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('import { getCount } from \"../../api/utils\";\\n\\n')])])]),t(\"p\",[n._v(\"样式部分的 js 代码如下:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('import styled from\\'styled-components\\';\\nimport style from \\'../../assets/global-style\\';\\n\\nexport const ListWrapper = styled.div`\\n  max-width: 100%;\\n  .title {\\n    font-weight: 700;\\n    padding-left: 6px;\\n    font-size: 14px;\\n    line-height: 60px;\\n  }\\n`;\\nexport const List = styled.div`\\n  width: 100%;\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n  justify-content: space-around;\\n`;\\n\\nexport const ListItem = styled.div`\\n  position: relative;\\n  width: 32%;\\n\\n  .img_wrapper {\\n    .decorate {\\n      position: absolute;\\n      top: 0;\\n      width: 100%;\\n      height: 35px;\\n      border-radius: 3px;\\n      background: linear-gradient (hsla (0,0%,43%,.4),hsla (0,0%,100%,0));\\n    }\\n    position: relative;\\n    height: 0;\\n    padding-bottom: 100%;\\n    .play_count {\\n      position: absolute;\\n      right: 2px;\\n      top: 2px;\\n      font-size: ${style [\"font-size-s\"]};\\n      line-height: 15px;\\n      color: ${style [\"font-color-light\"]};\\n      .play {\\n        vertical-align: top;\\n      }\\n    }\\n    img {\\n      position: absolute;\\n      width: 100%;\\n      height: 100%;\\n      border-radius: 3px;\\n    }\\n  }\\n  .desc {\\n      overflow: hidden;\\n      margin-top: 2px;\\n      padding: 0 2px;\\n      height: 50px;\\n      text-align: left;\\n      font-size: ${style [\"font-size-s\"]};\\n      line-height: 1.4;\\n      color: ${style [\"font-color-desc\"]};\\n    }\\n`;\\n\\n')])])]),t(\"p\",[n._v(\"值得关注的是：\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('<div className=\"decorate\"></div>\\n\\n')])])]),t(\"p\",[n._v(\"上面 style.js 中对应样式:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\".decorate {\\n  position: absolute;\\n  top: 0;\\n  width: 100%;\\n  height: 35px;\\n  border-radius: 3px;\\n  background: linear-gradient(hsla(0,0%,43%,.4),hsla(0,0%,100%,0));\\n}\\n\\n\")])])]),t(\"p\",[n._v(\"这个标签的样式，它的作用就是给图片上的图标和文字提供一个遮罩，因为在字体颜色是白色，在面对白色图片背景的时候，文字会看不清或者看不到，因此提供一个阴影来衬托出文字，这个细节很容易被忽略，希望大家也能注意一下。\")])])}),[],!1,null,null,null);e.default=i.exports}}]);","extractedComments":[]}