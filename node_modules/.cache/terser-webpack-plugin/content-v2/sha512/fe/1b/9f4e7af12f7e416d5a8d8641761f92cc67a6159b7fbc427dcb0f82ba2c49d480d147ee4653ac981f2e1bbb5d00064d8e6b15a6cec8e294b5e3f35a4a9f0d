{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[304],{661:function(t,n,e){\"use strict\";e.r(n);var a=e(42),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"blockquote\",[e(\"p\",[t._v(\"本节代码对应 GitHub 分支: chapter4\")])]),t._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter4\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"仓库传送门\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"p\",[t._v(\"为了做出小小的分类横向滚动列表，可谓花了不少的力气。不过做完了这个，再来开发歌手列表，简直易如反掌了。\")]),t._v(\" \"),e(\"p\",[t._v(\"进入 Singers/index.js, 增加以下代码，\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('//mock 数据\\nconst singerList = [1, 2,3, 4,5,6,7,8,9,10,11,12].map (item => {\\n  return {\\n    picUrl: \"https://p2.music.126.net/uTwOm8AEFFX_BYHvfvFcmQ==/109951164232057952.jpg\",\\n    name: \"隔壁老樊\",\\n    accountId: 277313426,\\n  }\\n}); \\n\\n// 渲染函数，返回歌手列表\\nconst renderSingerList = () => {\\n  return (\\n    <List>\\n      {\\n        singerList.map ((item, index) => {\\n          return (\\n            <ListItem key={item.accountId+\"\"+index}>\\n              <div className=\"img_wrapper\">\\n                <img src={`${item.picUrl}?param=300x300`} width=\"100%\" height=\"100%\" alt=\"music\"/>\\n              </div>\\n              <span className=\"name\">{item.name}</span>\\n            </ListItem>\\n          )\\n        })\\n      }\\n    </List>\\n  )\\n};\\n\\n')])])]),e(\"p\",[t._v(\"然后将返回的 JSX 代码做一些改动:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('return (\\n  <div>\\n    <NavContainer>\\n      <Horizen \\n        list={categoryTypes} \\n        title={\"分类 (默认热门):\"} \\n        handleClick={(val) => handleUpdateCatetory (val)} \\n        oldVal={category}></Horizen>\\n      <Horizen \\n        list={alphaTypes} \\n        title={\"首字母:\"} \\n        handleClick={val => handleUpdateAlpha (val)} \\n        oldVal={alpha}></Horizen>\\n    </NavContainer> \\n    <ListContainer>\\n      <Scroll>\\n        { renderSingerList () }\\n      </Scroll>\\n    </ListContainer>\\n  </div>\\n)\\n\\n')])])]),e(\"p\",[t._v(\"现在项目会报错，因为样式组件还没有定义，我们在 style.js 中添加：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('export const ListContainer = styled.div`\\n  position: fixed;\\n  top: 160px;\\n  left: 0;\\n  bottom: 0;\\n  overflow: hidden;\\n  width: 100%;\\n`;\\n\\nexport const List = styled.div`\\n  display: flex;\\n  margin: auto;\\n  flex-direction: column;\\n  overflow: hidden;\\n  .title {\\n    margin:10px 0 10px 10px;\\n    color: ${style [\"font-color-desc\"]};\\n    font-size: ${style [\"font-size-s\"]};\\n  }\\n`;\\nexport const ListItem = styled.div`\\n  box-sizing: border-box;\\n  display: flex;\\n  flex-direction: row;\\n  margin: 0 5px;\\n  padding: 5px 0;\\n  align-items: center;\\n  border-bottom: 1px solid ${style [\"border-color\"]};\\n  .img_wrapper {\\n    margin-right: 20px;\\n    img {\\n      border-radius: 3px;\\n      width: 50px;\\n      height: 50px;\\n    }\\n  }\\n  .name {\\n    font-size: ${style [\"font-size-m\"]};\\n    color: ${style [\"font-color-desc\"]};\\n    font-weight: 500;\\n  }\\n`;\\n\\n')])])]),e(\"p\",[t._v(\"在 index.js 中引入:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('import { \\n  NavContainer,\\n  ListContainer,\\n  List,\\n  ListItem\\n} from \"./style\";\\n\\n')])])]),e(\"p\",[t._v(\"现在你就能看到一个可以滚动的歌手列表啦！\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/10/18/16dddf3919da2c45?w=372&h=567&f=gif&s=766039\",alt:\"\"}})]),t._v(\" \"),e(\"h2\",{attrs:{id:\"数据层开发\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据层开发\"}},[t._v(\"#\")]),t._v(\" 数据层开发\")]),t._v(\" \"),e(\"p\",[t._v(\"刚刚只是mock数据，要实现真正的线上功能，还有很多工作要做。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"axios请求处理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#axios请求处理\"}},[t._v(\"#\")]),t._v(\" axios请求处理\")]),t._v(\" \"),e(\"p\",[t._v(\"进入到api/request.js中，加入下面的请求代码:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"export const getHotSingerListRequest = (count) => {\\n  return axiosInstance.get(`/top/artists?offset=${count}`);\\n}\\n\\nexport const getSingerListRequest= (category, alpha, count) => {\\n  return axiosInstance.get(`/artist/list?cat=${category}&initial=${alpha.toLowerCase()}&offset=${count}`);\\n}\\n\\n\")])])]),e(\"p\",[t._v(\"这就是我们目前需要的全部ajax请求。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"redux层开发\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redux层开发\"}},[t._v(\"#\")]),t._v(\" redux层开发\")]),t._v(\" \"),e(\"p\",[t._v(\"redux刚开始接触的时候确实是比较复杂，但多些几次你就会发现其实就是一些模板代码，并没有什么难的。还是按推荐模块一样，我们来按照步骤开发redux模块。\")]),t._v(\" \"),e(\"p\",[t._v(\"注意，在这里我们会添加一些新的业务逻辑，比如上拉/下拉/进场加载动画的控制、列表页数的控制，大家看到不要感到奇怪。\")]),t._v(\" \"),e(\"p\",[t._v(\"在Singers目录下，新建store文件夹，然后新建以下文件:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"actionCreators.js //放不同action的地方\\nconstants.js      //常量集合，存放不同action的type值\\nindex.js          //用来导出reducer，action\\nreducer.js        //存放initialState和reducer函数\\n\\n\")])])]),e(\"h4\",{attrs:{id:\"_1-声明初始化state\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-声明初始化state\"}},[t._v(\"#\")]),t._v(\" 1.声明初始化state\")]),t._v(\" \"),e(\"p\",[t._v(\"初始化state在reducer中进行\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"//reducer.js\\nimport { fromJS } from 'immutable';\\n\\nconst defaultState = fromJS({\\n  singerList: [],\\n  enterLoading: true,     //控制进场Loading\\n  pullUpLoading: false,   //控制上拉加载动画\\n  pullDownLoading: false, //控制下拉加载动画\\n  pageCount: 0            //这里是当前页数，我们即将实现分页功能\\n});\\n\\n\")])])]),e(\"h4\",{attrs:{id:\"_2-定义constants\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-定义constants\"}},[t._v(\"#\")]),t._v(\" 2.定义constants\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"export const CHANGE_SINGER_LIST = 'singers/CHANGE_SINGER_LIST';\\nexport const CHANGE_PAGE_COUNT = 'singers/PAGE_COUNT';\\nexport const CHANGE_ENTER_LOADING = 'singers/ENTER_LOADING';\\nexport const CHANGE_PULLUP_LOADING = 'singers/PULLUP_LOADING';\\nexport const CHANGE_PULLDOWN_LOADING = 'singers/PULLDOWN_LOADING';\\n\\n\")])])]),e(\"h4\",{attrs:{id:\"_3-定义reducer函数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-定义reducer函数\"}},[t._v(\"#\")]),t._v(\" 3.定义reducer函数\")]),t._v(\" \"),e(\"p\",[t._v(\"在reducer.js文件中加入以下处理逻辑，由于存放的是immutable数据结构，所以必须用set方法来设置新状态，同时取状态用get方法。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"export default (state = defaultState, action) => {\\n  switch(action.type) {\\n    case actionTypes.CHANGE_SINGER_LIST:\\n      return state.set('singerList', action.data);\\n    case actionTypes.CHANGE_PAGE_COUNT:\\n      return state.set('pageCount', action.data);\\n    case actionTypes.CHANGE_ENTER_LOADING:\\n      return state.set('enterLoading', action.data);\\n    case actionTypes.CHANGE_PULLUP_LOADING:\\n      return state.set('pullUpLoading', action.data);\\n    case actionTypes.CHANGE_PULLDOWN_LOADING:\\n      return state.set('pullDownLoading', action.data);\\n    default:\\n      return state;\\n  }\\n}\\n\\n\")])])]),e(\"h4\",{attrs:{id:\"_4-编写具体的action\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-编写具体的action\"}},[t._v(\"#\")]),t._v(\" 4.编写具体的action\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"import {\\n  getHotSingerListRequest,\\n  getSingerListRequest\\n} from \\\"../../../api/request\\\";\\nimport {\\n  CHANGE_SINGER_LIST,\\n  CHANGE_CATOGORY,\\n  CHANGE_ALPHA,\\n  CHANGE_PAGE_COUNT,\\n  CHANGE_PULLUP_LOADING,\\n  CHANGE_PULLDOWN_LOADING,\\n  CHANGE_ENTER_LOADING\\n} from './constants';\\nimport {\\n  fromJS\\n} from 'immutable';\\n\\n\\nconst changeSingerList = (data) => ({\\n  type: CHANGE_SINGER_LIST,\\n  data: fromJS(data)\\n});\\n\\nexport const changePageCount = (data) => ({\\n  type: CHANGE_PAGE_COUNT,\\n  data\\n});\\n\\n//进场loading\\nexport const changeEnterLoading = (data) => ({\\n  type: CHANGE_ENTER_LOADING,\\n  data\\n});\\n\\n//滑动最底部loading\\nexport const changePullUpLoading = (data) => ({\\n  type: CHANGE_PULLUP_LOADING,\\n  data\\n});\\n\\n//顶部下拉刷新loading\\nexport const changePullDownLoading = (data) => ({\\n  type: CHANGE_PULLDOWN_LOADING,\\n  data\\n});\\n\\n//第一次加载热门歌手\\nexport const getHotSingerList = () => {\\n  return (dispatch) => {\\n    getHotSingerListRequest(0).then(res => {\\n      const data = res.artists;\\n      dispatch(changeSingerList(data));\\n      dispatch(changeEnterLoading(false));\\n      dispatch(changePullDownLoading(false));\\n    }).catch(() => {\\n      console.log('热门歌手数据获取失败');\\n    })\\n  }\\n};\\n\\n//加载更多热门歌手\\nexport const refreshMoreHotSingerList = () => {\\n  return (dispatch, getState) => {\\n    const pageCount = getState().getIn(['singers', 'pageCount']);\\n    const singerList = getState().getIn(['singers', 'singerList']).toJS();\\n    getHotSingerListRequest(pageCount).then(res => {\\n      const data = [...singerList, ...res.artists];\\n      dispatch(changeSingerList(data));\\n      dispatch(changePullUpLoading(false));\\n    }).catch(() => {\\n      console.log('热门歌手数据获取失败');\\n    });\\n  }\\n};\\n\\n//第一次加载对应类别的歌手\\nexport const getSingerList = (category, alpha) => {\\n  return (dispatch, getState) => {\\n    getSingerListRequest(category, alpha, 0).then(res => {\\n      const data = res.artists;\\n      dispatch(changeSingerList(data));\\n      dispatch(changeEnterLoading(false));\\n      dispatch(changePullDownLoading(false));\\n    }).catch(() => {\\n      console.log('歌手数据获取失败');\\n    });\\n  }\\n};\\n\\n//加载更多歌手\\nexport const refreshMoreSingerList = (category, alpha) => {\\n  return (dispatch, getState) => {\\n    const pageCount = getState().getIn(['singers', 'pageCount']);\\n    const singerList = getState().getIn(['singers', 'singerList']).toJS();\\n    getSingerListRequest(category, alpha, pageCount).then(res => {\\n      const data = [...singerList, ...res.artists];\\n      dispatch(changeSingerList(data));\\n      dispatch(changePullUpLoading(false));\\n    }).catch(() => {\\n      console.log('歌手数据获取失败');\\n    });\\n  }\\n};\\n\\n\")])])]),e(\"h4\",{attrs:{id:\"_5-将相关变量导出\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-将相关变量导出\"}},[t._v(\"#\")]),t._v(\" 5.将相关变量导出\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"//index.js\\nimport reducer from './reducer'\\nimport * as actionCreators from './actionCreators'\\n\\nexport { reducer, actionCreators };\\n\\n\")])])]),e(\"h3\",{attrs:{id:\"组件连接redux\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#组件连接redux\"}},[t._v(\"#\")]),t._v(\" 组件连接Redux\")]),t._v(\" \"),e(\"p\",[t._v(\"首先，需要将Singers下的reducer注册到全局store，在src目录下的store/reducer.js中，内容如下:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"import { combineReducers } from 'redux-immutable';\\nimport { reducer as recommendReducer } from '../application/Recommend/store/index';\\nimport { reducer as singersReducer } from '../application/Singers/store/index';\\n\\nexport default combineReducers({\\n  recommend: recommendReducer,\\n  singers: singersReducer,\\n});\\n\\n\")])])]),e(\"p\",[t._v(\"好，现在已经在全局的store下面注册完成。现在在Singers/index.js中，准备连接Redux。 增加代码:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"import React, {useState, useEffect} from 'react';\\nimport Horizen from '../../baseUI/horizen-item';\\nimport { categoryTypes, alphaTypes } from '../../api/config';\\nimport { \\n  NavContainer,\\n  ListContainer,\\n  List,\\n  ListItem,\\n} from \\\"./style\\\";\\nimport { \\n  getSingerList, \\n  getHotSingerList, \\n  changeEnterLoading, \\n  changePageCount, \\n  refreshMoreSingerList, \\n  changePullUpLoading, \\n  changePullDownLoading, \\n  refreshMoreHotSingerList \\n} from './store/actionCreators';\\nimport Scroll from './../../baseUI/scroll/index';\\nimport {connect} from 'react-redux';\\n\\n//在此省略组件代码\\n\\nconst mapStateToProps = (state) => ({\\n  singerList: state.getIn(['singers', 'singerList']),\\n  enterLoading: state.getIn(['singers', 'enterLoading']),\\n  pullUpLoading: state.getIn(['singers', 'pullUpLoading']),\\n  pullDownLoading: state.getIn(['singers', 'pullDownLoading']),\\n  pageCount: state.getIn(['singers', 'pageCount'])\\n});\\nconst mapDispatchToProps = (dispatch) => {\\n  return {\\n    getHotSingerDispatch() {\\n      dispatch(getHotSingerList());\\n    },\\n    updateDispatch(category, alpha) {\\n      dispatch(changePageCount(0));//由于改变了分类，所以pageCount清零\\n      dispatch(changeEnterLoading(true));//loading，现在实现控制逻辑，效果实现放到下一节，后面的loading同理\\n      dispatch(getSingerList(category, alpha));\\n    },\\n    // 滑到最底部刷新部分的处理\\n    pullUpRefreshDispatch(category, alpha, hot, count) {\\n      dispatch(changePullUpLoading(true));\\n      dispatch(changePageCount(count+1));\\n      if(hot){\\n        dispatch(refreshMoreHotSingerList());\\n      } else {\\n        dispatch(refreshMoreSingerList(category, alpha));\\n      }\\n    },\\n    //顶部下拉刷新\\n    pullDownRefreshDispatch(category, alpha) {\\n      dispatch(changePullDownLoading(true));\\n      dispatch(changePageCount(0));//属于重新获取数据\\n      if(category === '' && alpha === ''){\\n        dispatch(getHotSingerList());\\n      } else {\\n        dispatch(getSingerList(category, alpha));\\n      }\\n    }\\n  }\\n};   \\n\\n\")])])]),e(\"p\",[t._v(\"记得最后用react-redux中的connect包裹:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"export default connect(mapStateToProps, mapDispatchToProps)(React.memo(Singers));\\n\\n\")])])]),e(\"p\",[t._v(\"好，现在就可以完美地显示真实的列表了。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"分类和列表联动\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分类和列表联动\"}},[t._v(\"#\")]),t._v(\" 分类和列表联动\")]),t._v(\" \"),e(\"p\",[t._v(\"但是，点击不同的分类并没有获取相应的列表，现在我们就来实现分类和列表联动的功能。\")]),t._v(\" \"),e(\"p\",[t._v(\"这当然要从handleUpdatexxx函数开始着手啦。其实非常简单，只需做如下修改即可：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"let handleUpdateAlpha = (val) => {\\n  setAlpha(val);\\n  updateDispatch(category, val);\\n};\\n\\nlet handleUpdateCatetory = (val) => {\\n  setCategory(val);\\n  updateDispatch(val, alpha);\\n};\\n\\n\")])])]),e(\"p\",[t._v(\"至此，这样联动效果就实现啦！\")])])}),[],!1,null,null,null);n.default=s.exports}}]);","extractedComments":[]}