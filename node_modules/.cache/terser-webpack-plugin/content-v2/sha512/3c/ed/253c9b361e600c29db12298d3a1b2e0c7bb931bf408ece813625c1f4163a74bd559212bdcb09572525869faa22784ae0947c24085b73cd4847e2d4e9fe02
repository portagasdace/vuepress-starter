{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[332],{689:function(t,e,n){\"use strict\";n.r(e);var a=n(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"p\",[t._v(\"项目开始前，有必要跟大家说一下仓库的分支规划。不同的小册章节内容对应不同仓库分支，方便大家针对性的学习:\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"chapter1 和 chapter2 已经在第 4 节和第 5 节声明。\\n6-9 节 -> chapter3\\n10-12 节 -> chapter4\\n13-14 节 -> chapter5\\n15-19 节 -> chapter6\\n20-22 节 -> chapter7\\n23-28 节 -> chapter8\\n28-31 节 -> chapter9\\n32-34 节 -> chapter10\\n\\n\")])])]),n(\"blockquote\",[n(\"p\",[t._v(\"温馨提示: 本小节代码大家可以去参考 GitHub 仓库 chapter1 分支。\")])]),t._v(\" \"),n(\"p\",[n(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter1\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"仓库传送门\"),n(\"OutboundLink\")],1)]),t._v(\" \"),n(\"h2\",{attrs:{id:\"create-react-app-脚手架初始化\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#create-react-app-脚手架初始化\"}},[t._v(\"#\")]),t._v(\" create-react-app 脚手架初始化\")]),t._v(\" \"),n(\"p\",[t._v(\"首先通过 create-react-app 这个脚手架工具生成项目的初始化化结构。\")]),t._v(\" \"),n(\"blockquote\",[n(\"p\",[t._v(\"注意: 请保证你的 create-react-app 是最新版本，不然目录结构不会生成。\")])]),t._v(\" \"),n(\"p\",[t._v(\"在命令行中输入以下命令:\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"create-react-app cloud-music\\n\\n\")])])]),n(\"p\",[t._v(\"完成后，根据提示：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"cd cloud-music\\n\\n\")])])]),n(\"p\",[t._v(\"启动项目:\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"npm start\\n\\n\")])])]),n(\"h2\",{attrs:{id:\"项目目录说明\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#项目目录说明\"}},[t._v(\"#\")]),t._v(\" 项目目录说明\")]),t._v(\" \"),n(\"p\",[t._v(\"开始这个项目之前，我们需要对目录进行一下改造。如下 (主要针对 src 目录):\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"├─api                   // 网路请求代码、工具类函数和相关配置\\n├─application           // 项目核心功能\\n├─assets                // 字体配置及全局样式\\n├─baseUI                // 基础 UI 轮子\\n├─components            // 可复用的 UI 组件\\n├─routes                // 路由配置文件\\n└─store                 //redux 相关文件\\n  App.js                // 根组件\\n  index.js              // 入口文件\\n  serviceWorker.js      // PWA 离线应用配置\\n  style.js              // 默认样式\\n\\n\")])])]),n(\"p\",[t._v(\"脚手架生成的无用文件已经删除，大家注意也把相关的引入语句也删除。目前应该是整个应用的最终工程目录，以后的开发都会基于这个目录结构进行。\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"默认样式及字体图标准备\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#默认样式及字体图标准备\"}},[t._v(\"#\")]),t._v(\" 默认样式及字体图标准备\")]),t._v(\" \"),n(\"p\",[t._v(\"本项目的样式采用 styled-components 来进行开发，也就是利用 css in js 的方式，我为什么要这么做，有兴趣的同学可以阅读一下我之前在掘金写的文章 \"),n(\"a\",{attrs:{href:\"https://juejin.im/post/5d1ae68fe51d454f7230255d\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"styled-components: 前端组件拆分新思路\"),n(\"OutboundLink\")],1),t._v(\"。当然后面有人看了我的项目后给我提了这个库的一些缺点，但我依然坚持用它进行开发，因为它在工程化方面的优势依然非常明显，而且大部分缺点我们也可以有意识的去避开，这个具体在后面的章节里面再说吧。\")]),t._v(\" \"),n(\"p\",[t._v(\"其实 styled-components 的使用是相当简单的，不需要额外专门的学习，所以大家跟着我写一遍，熟悉一下就行了。\")]),t._v(\" \"),n(\"p\",[t._v(\"不知道你有没有发现一个问题，上面目录中默认样式文件是 style.js，而不是.css，没错，这就是使用了 styled-components 后的结果。\")]),t._v(\" \"),n(\"p\",[t._v(\"我们先安装这个库:\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"npm install styled-components --save\\n\\n\")])])]),n(\"p\",[t._v(\"在刚刚的 style.js 中，\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"import { createGlobalStyle } from'styled-components';\\n\\nexport const GlobalStyle = createGlobalStyle`\\n\\thtml, body, div, span, applet, object, iframe,\\n\\th1, h2, h3, h4, h5, h6, p, blockquote, pre,\\n\\ta, abbr, acronym, address, big, cite, code,\\n\\tdel, dfn, em, img, ins, kbd, q, s, samp,\\n\\tsmall, strike, strong, sub, sup, tt, var,\\n\\tb, u, i, center,\\n\\tdl, dt, dd, ol, ul, li,\\n\\tfieldset, form, label, legend,\\n\\ttable, caption, tbody, tfoot, thead, tr, th, td,\\n\\tarticle, aside, canvas, details, embed, \\n\\tfigure, figcaption, footer, header, hgroup, \\n\\tmenu, nav, output, ruby, section, summary,\\n\\ttime, mark, audio, video {\\n\\t\\tmargin: 0;\\n\\t\\tpadding: 0;\\n\\t\\tborder: 0;\\n\\t\\tfont-size: 100%;\\n\\t\\tfont: inherit;\\n\\t\\tvertical-align: baseline;\\n\\t}\\n\\t/* HTML5 display-role reset for older browsers */\\n\\tarticle, aside, details, figcaption, figure, \\n\\tfooter, header, hgroup, menu, nav, section {\\n\\t\\tdisplay: block;\\n\\t}\\n\\tbody {\\n\\t\\tline-height: 1;\\n\\t}\\n\\thtml, body {\\n\\t\\tbackground: #f2f3f4;;\\n\\t}\\n\\tol, ul {\\n\\t\\tlist-style: none;\\n\\t}\\n\\tblockquote, q {\\n\\t\\tquotes: none;\\n\\t}\\n\\tblockquote:before, blockquote:after,\\n\\tq:before, q:after {\\n\\t\\tcontent: '';\\n\\t\\tcontent: none;\\n\\t}\\n\\ttable {\\n\\t\\tborder-collapse: collapse;\\n\\t\\tborder-spacing: 0;\\n\\t}\\n\\ta {\\n\\t\\ttext-decoration: none;\\n\\t\\tcolor: #fff;\\n\\t}\\n`\\n\\n\")])])]),n(\"p\",[t._v(\"这就是 styled-components 创建全局样式并导出的代码。\")]),t._v(\" \"),n(\"p\",[t._v(\"这段代码导出到哪里去呢？导入到 App.js 中。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"//App.js 中添加这一句\\nimport { GlobalStyle } from  './style';\\n\\n\")])])]),n(\"p\",[t._v(\"我们继续来引入字体图标文件，这里的字体图标是采用的阿里图标库 \"),n(\"a\",{attrs:{href:\"https://www.iconfont.cn/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"地址\"),n(\"OutboundLink\")],1)]),t._v(\" \"),n(\"p\",[t._v(\"选择好图标之后下载至本地 (本项目下载 unicode 模式)。这个操作不属于本项目的重点，也过于简单，就不在这浪费篇幅了。\")]),t._v(\" \"),n(\"p\",[t._v(\"在 assets 目录下新建一个名为 iconfont 的文件夹，将.css, .eot, .svg, .ttf, .woff 为后缀的文件放到这个文件夹中。 然后将这个 css 文件做一些手脚，需要改成 js 代码。\")]),t._v(\" \"),n(\"p\",[t._v(\"所以现在的 iconfont.css 需要改成 iconfont.js，这里做了一些省略，具体代码大家直接看 GitHub 仓库 chapter1 分支吧。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"import {createGlobalStyle} from'styled-components';\\n\\nexport const IconStyle = createGlobalStyle`\\n@font-face {font-family: \\\"iconfont\\\";\\n  src: url ('iconfont.eot?t=1565320061289'); /* IE9 */\\n  src: url ('iconfont.eot?t=1565320061289#iefix' ... 省略 base64 巨长字符) format ('embedded-opentype'), /* IE6-IE8 */\\n  url ('data:application/x-font-woff2;charset=utf-8) format ('woff2'),\\n  url ('iconfont.woff?t=1565320061289') format ('woff'),\\n  url ('iconfont.ttf?t=1565320061289') format ('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\\n  url ('iconfont.svg?t=1565320061289#iconfont') format ('svg'); /* iOS 4.1- */\\n}\\n\\n.iconfont {\\n  font-family: \\\"iconfont\\\" !important;\\n  font-size: 16px;\\n  font-style: normal;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n...\\n`\\n\\n\")])])]),n(\"p\",[t._v(\"接下来，咱们把字体引入 App.js 中。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"//App.js\\nimport React from 'react';\\nimport { IconStyle } from './assets/iconfont/iconfont';\\nimport { GlobalStyle } from './style';\\n\\nfunction App () {\\n  return (\\n    <div className=\\\"App\\\">\\n      <GlobalStyle></GlobalStyle>\\n      <IconStyle></IconStyle>\\n      <i className=\\\"iconfont\\\">&#xe62b;</i>\\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\\n\")])])]),n(\"p\",[t._v(\"接下来大家打开页面可以看到一个小小的放大镜，背景变为浅灰色，字体图标和默认样式起到了效果。\")]),t._v(\" \"),n(\"p\",[t._v(\"到此为止，默认样式和字体图标就算一同引入到了项目中。大家可能对字体图标的用法有了一些了解，但是中间的 unicode 编码怎么来的呢？别担心，我专门在 iconfont 文件夹中放了 demo_index.html 文件，打开便能索引不同图标的 unicode 值啦。\")])])}),[],!1,null,null,null);e.default=s.exports}}]);","extractedComments":[]}