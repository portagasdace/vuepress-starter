{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[332],{687:function(e,n,t){\"use strict\";t.r(n);var r=t(42),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"p\",[e._v(\"现在我们来进入项目基础搭建的环节。\")]),e._v(\" \"),t(\"blockquote\",[t(\"p\",[e._v(\"本节代码对应 GitHub 分支: chapter2\")])]),e._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter2\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"仓库传送门\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"p\",[e._v(\"初始项目的搭建主要分为三个部分进行:\")]),e._v(\" \"),t(\"ol\",[t(\"li\",[t(\"p\",[e._v(\"路由的配置和应用部分\")])]),e._v(\" \"),t(\"li\",[t(\"p\",[e._v(\"公共组件的开发\")])]),e._v(\" \"),t(\"li\",[t(\"p\",[e._v(\"redux 的 store 创建和引入\")])])]),e._v(\" \"),t(\"p\",[e._v(\"现在让我们开始吧。\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"一、路由配置\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、路由配置\"}},[e._v(\"#\")]),e._v(\" 一、路由配置\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"路由文件编写\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#路由文件编写\"}},[e._v(\"#\")]),e._v(\" 路由文件编写\")]),e._v(\" \"),t(\"p\",[e._v(\"要开发一个复杂应用的时候，首先要做的并不是上来就开始写具体功能，要想清楚整个应用的结构，从路由开始入手编写是一个比较好的方式，也建议大家拿到别人的项目的时候从路由开始着手，可以很好的整理我们的思路。\")]),e._v(\" \"),t(\"p\",[e._v(\"应用的骨架其实非常简单，顶部有固定的内容及 tab 栏，下面对应不同的功能组件。\")]),e._v(\" \"),t(\"p\",[e._v(\"首先安装依赖。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"npm install react-router react-router-dom react-router-config --save\\n\\n\")])])]),t(\"p\",[e._v(\"现在我们在 routes 目录下新建 index.js 文件，利用 react-router-config 来对路由进行配置。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('//routes/index.js\\nimport React from \\'react\\';\\nimport { Redirect } from \"react-router-dom\";\\nimport Home from \\'../application/Home\\';\\nimport Recommend from \\'../application/Recommend\\';\\nimport Singers from \\'../application/Singers\\';\\nimport Rank from \\'../application/Rank\\';\\n\\nexport default [\\n  {\\n    path: \"/\",\\n    component: Home,\\n    routes: [\\n      {\\n        path: \"/\",\\n        exact: true,\\n        render: () => (\\n          <Redirect to={\"/recommend\"}/>\\n        )\\n      },\\n      {\\n        path: \"/recommend\",\\n        component: Recommend\\n      },\\n      {\\n        path: \"/singers\",\\n        component: Singers\\n      },\\n      {\\n        path: \"/rank\",\\n        component: Rank\\n      }\\n    ]\\n  }\\n]\\n\\n')])])]),t(\"p\",[e._v(\"Home 组件对应公共组件，下面的推荐组件、歌手列表组件和排行榜组件为具体的功能组件。\")]),e._v(\" \"),t(\"p\",[e._v(\"为了让路由文件生效，必须在 App 根组件下面导入路由配置，现在在 App.js 中:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"import React from 'react';\\nimport { GlobalStyle } from  './style';\\nimport { renderRoutes } from 'react-router-config';//renderRoutes 读取路由配置转化为 Route 标签\\nimport { IconStyle } from './assets/iconfont/iconfont';\\nimport routes from './routes/index.js';\\nimport { HashRouter } from 'react-router-dom';\\n\\nfunction App () {\\n  return (\\n    <HashRouter>\\n      <GlobalStyle></GlobalStyle>\\n      <IconStyle></IconStyle>\\n      { renderRoutes (routes) }\\n    </HashRouter>\\n  )\\n}\\n\\nexport default App;\\n\\n\")])])]),t(\"h3\",{attrs:{id:\"新建组件文件\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#新建组件文件\"}},[e._v(\"#\")]),e._v(\" 新建组件文件\")]),e._v(\" \"),t(\"p\",[e._v(\"现在你的项目应该是无法启动的，因为这些组件你都没有定义和引入。\")]),e._v(\" \"),t(\"p\",[e._v(\"现在， 在 application 目录下，新建 Home 文件夹，然后新建 index.js 文件，\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"//src/appliction/Home/index.js\\nimport React from 'react';\\n\\nfunction Home (props) {\\n  return (\\n    <div>Home</div>\\n  )\\n}\\n\\nexport default React.memo (Home);\\n\\n\")])])]),t(\"p\",[e._v(\"然后类似的，创建 Recommend、Singers 和 Rank 组件。\")]),e._v(\" \"),t(\"p\",[e._v('启动项目，打开页面，你可以看到 \"home\" 已经显示到屏幕，但是这还不够，我们需要展示下面的功能组件，但是你在地址后面加上 /recommend，却并没有显示 Recommend 组件相应的内容，因为 renderRoutes 这个方法只渲染一层路由，之前 Home 处于数组第一层，后面的功能组件在第二层，当然不能正常渲染啦。其实要解决这个问题也非常简单，只需在 Home 中再次调用 renderRoutes 即可。')]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"//src/appliction/Home/index.js\\nimport React from 'react';\\nimport { renderRoutes } from \\\"react-router-config\\\";\\n\\nfunction Home (props) {\\n  const { route } = props;\\n\\n  return (\\n    <div>\\n      <div>Home</div>\\n      { renderRoutes (route.routes) }\\n    </div>\\n  )\\n}\\n\\nexport default React.memo (Home);\\n\\n\")])])]),t(\"p\",[e._v(\"好，现在你可以访问 /recommend 路由，应该可以看到 Recommend 中的内容。同理，现在也可以正常访问其它的路由啦。\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"二、公共组件开发\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、公共组件开发\"}},[e._v(\"#\")]),e._v(\" 二、公共组件开发\")]),e._v(\" \"),t(\"p\",[e._v(\"路由折腾清楚后，我们来着手开发项目的第一个组件: Home 组件。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"全局样式准备\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#全局样式准备\"}},[e._v(\"#\")]),e._v(\" 全局样式准备\")]),e._v(\" \"),t(\"p\",[e._v(\"现在要真正开始写样式了，为了统一风格，需要一些全局样式配置，在 assets 目录下新建 global-style.js, 内容如下:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// 扩大可点击区域\\nconst extendClick = () => {\\n  return `\\n    position: relative;\\n    &:before {\\n      content: '';\\n      position: absolute;\\n      top: -10px; bottom: -10px; left: -10px; right: -10px;\\n    };\\n  `\\n}\\n// 一行文字溢出部分用... 代替\\nconst noWrap = () => {\\n  return `\\n    text-overflow: ellipsis;\\n    overflow: hidden;\\n    white-space: nowrap;\\n  `\\n}\\n\\nexport default {\\n  'theme-color': '#d44439',\\n  'theme-color-shadow': 'rgba (212, 68, 57, .5)',\\n  'font-color-light': '#f1f1f1',\\n  'font-color-desc': '#2E3030',\\n  'font-color-desc-v2': '#bba8a8',// 略淡\\n  'font-size-ss': '10px',\\n  'font-size-s': '12px',\\n  'font-size-m': '14px',\\n  'font-size-l': '16px',\\n  'font-size-ll': '18px',\\n  \\\"border-color\\\": '#e4e4e4',\\n  'background-color': '#f2f3f4',\\n  'background-color-shadow': 'rgba (0, 0, 0, 0.3)',\\n  'highlight-background-color': '#fff',\\n  extendClick,\\n  noWrap\\n}\\n\\n\\n\")])])]),t(\"h3\",{attrs:{id:\"顶部栏开发\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#顶部栏开发\"}},[e._v(\"#\")]),e._v(\" 顶部栏开发\")]),e._v(\" \"),t(\"p\",[e._v(\"首先，在 Home 目录下新建 style.js，创建 CSS 样式组件\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"import styled from'styled-components';\\nimport style from '../../assets/global-style';\\n\\nexport const Top = styled.div`\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  padding: 5px 10px;\\n  background: ${style [\\\"theme-color\\\"]};\\n  &>span {\\n    line-height: 40px;\\n    color: #f1f1f1;\\n    font-size: 20px;\\n    &.iconfont {\\n      font-size: 25px;\\n    }\\n  }\\n`\\n\\n\")])])]),t(\"p\",[e._v(\"很简单的布局和样式，就不过多解释了。接下来在 Home 组件应用这些样式，\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('//src/appliction/Home/index.js\\nimport React from \\'react\\';\\nimport { renderRoutes } from \"react-router-config\";\\nimport { Top } from \\'./style\\';\\n\\nfunction Home (props) {\\n  const { route } = props;\\n\\n  return (\\n    <div>\\n      <Top>\\n        <span className=\"iconfont menu\">&#xe65c;</span>\\n        <span className=\"title\">WebApp</span>\\n        <span className=\"iconfont search\">&#xe62b;</span>\\n      </Top>\\n      { renderRoutes (route.routes) }\\n    </div>\\n  )\\n}\\n\\nexport default React.memo (Home);\\n\\n')])])]),t(\"p\",[e._v(\"接着来编写上面的 tab 栏，先定义样式:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('export const Tab = styled.div`\\n  height: 44px;\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-around;\\n  background: ${style [\"theme-color\"]};\\n  a {\\n    flex: 1;\\n    padding: 2px 0;\\n    font-size: 14px;\\n    color: #e4e4e4;\\n    &.selected {\\n      span {\\n        padding: 3px 0;\\n        font-weight: 700;\\n        color: #f1f1f1;\\n        border-bottom: 2px solid #f1f1f1;\\n      }\\n    }\\n  }\\n`\\nexport const TabItem = styled.div`\\n  height: 100%;\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: center;\\n  align-items: center;\\n`\\n\\n')])])]),t(\"p\",[e._v(\"在 Home 组件中使用:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('import React from \\'react\\';\\nimport { renderRoutes } from \"react-router-config\";\\nimport {\\n  Top,\\n  Tab,\\n  TabItem,\\n} from \\'./style\\';\\nimport { NavLink } from \\'react-router-dom\\';// 利用 NavLink 组件进行路由跳转\\n\\nfunction Home (props){\\n  const { route } = props;\\n\\n  return (\\n    <div>\\n      <Top>\\n        <span className=\"iconfont menu\">&#xe65c;</span>\\n        <span className=\"title\">Web App</span>\\n        <span className=\"iconfont search\">&#xe62b;</span>\\n      </Top>\\n      <Tab>\\n        <NavLink to=\"/recommend\" activeClassName=\"selected\"><TabItem><span > 推荐 </span></TabItem></NavLink>\\n        <NavLink to=\"/singers\" activeClassName=\"selected\"><TabItem><span > 歌手 </span></TabItem></NavLink>\\n        <NavLink to=\"/rank\" activeClassName=\"selected\"><TabItem><span > 排行榜 </span></TabItem></NavLink>\\n      </Tab>\\n      { renderRoutes (route.routes) }\\n    </div>\\n  );\\n}\\n \\nexport default React.memo (Home);\\n\\n')])])]),t(\"p\",[e._v(\"打开页面，现在一个像样的 WebApp 头部就出来了，并且点击不同的 tab 会显示不同的功能组件。\")]),e._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/10/18/16ddde8e77cd852a?w=376&h=152&f=jpeg&s=9724\",alt:\"\"}})]),e._v(\" \"),t(\"h2\",{attrs:{id:\"三、redux-准备\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、redux-准备\"}},[e._v(\"#\")]),e._v(\" 三、redux 准备\")]),e._v(\" \"),t(\"p\",[e._v(\"本项目开发的一大核心理念就是用 Redux 这一成熟的状态管理库实现单一数据源。因此，在后面的具体功能开发之前，有必要准备一些关于 Redux 的工作。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"安装相应依赖\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装相应依赖\"}},[e._v(\"#\")]),e._v(\" 安装相应依赖\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"npm install redux redux-thunk redux-immutable react-redux immutable --save\\n\\n\")])])]),t(\"p\",[e._v(\"其中 redux-immutable 大家可能比较陌生，因为项目中需要用到 immutable.js 中的数据结构，所以合并不同模块 reducer 的时候需要用到 redux-immutable 中的方法。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"创建-store\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建-store\"}},[e._v(\"#\")]),e._v(\" 创建 store\")]),e._v(\" \"),t(\"p\",[e._v(\"在 store 文件夹下面新建 index.js 和 reducer.js 文件:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"//reducer.js\\nimport { combineReducers } from 'redux-immutable';\\n\\nexport default combineReducers ({\\n// 之后开发具体功能模块的时候添加 reducer\\n});\\n\\n\\n\")])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"//index.js\\nimport { createStore, compose, applyMiddleware } from 'redux'\\nimport thunk from 'redux-thunk'\\nimport reducer from './reducer'\\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\\n\\nconst store = createStore (reducer, composeEnhancers (\\n  applyMiddleware (thunk)\\n));\\n\\nexport default store;\\n\\n\")])])]),t(\"h3\",{attrs:{id:\"项目中注入-store\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#项目中注入-store\"}},[e._v(\"#\")]),e._v(\" 项目中注入 store\")]),e._v(\" \"),t(\"p\",[e._v(\"现在 App.js 中代码如下:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"import React from 'react'\\nimport { Provider } from 'react-redux'\\nimport { GlobalStyle } from  './style'\\nimport { renderRoutes } from 'react-router-config'\\nimport { IconStyle } from './assets/iconfont/iconfont'\\nimport store from './store/index'\\nimport routes from './routes/index.js'\\nimport { HashRouter } from 'react-router-dom';\\n\\nfunction App () {\\n  return (\\n    <Provider store={store}>\\n      <HashRouter>\\n        <GlobalStyle></GlobalStyle>\\n        <IconStyle></IconStyle>\\n        { renderRoutes (routes) }\\n      </HashRouter>\\n    </Provider>\\n  )\\n}\\n\\nexport default App;\\n\\n\")])])]),t(\"p\",[e._v(\"现在功能依旧能用，但是打开控制台会有这样一段报错:\")]),e._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/10/18/16ddde922f4d392b?w=502&h=33&f=jpeg&s=9279\",alt:\"\"}})]),e._v(\" \"),t(\"p\",[e._v(\"因为现在没有开发出具体的 reducer 函数，没关系，随着之后的开发，这个错误会自动消失。\")])])}),[],!1,null,null,null);n.default=a.exports}}]);","extractedComments":[]}