{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[306],{662:function(n,t,e){\"use strict\";e.r(t);var a=e(42),s=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[e(\"blockquote\",[e(\"p\",[n._v(\"本节代码对应 GitHub 分支: chapter5\")])]),n._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter5\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"仓库传送门\"),e(\"OutboundLink\")],1)]),n._v(\" \"),e(\"h2\",{attrs:{id:\"数据层开发\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据层开发\"}},[n._v(\"#\")]),n._v(\" 数据层开发\")]),n._v(\" \"),e(\"h3\",{attrs:{id:\"axios-请求代码\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#axios-请求代码\"}},[n._v(\"#\")]),n._v(\" axios 请求代码\")]),n._v(\" \"),e(\"p\",[n._v(\"在 api/request.js 中，添加以下代码:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"export const getRankListRequest = () => {\\n  return axiosInstance.get (`/toplist/detail`);\\n};\\n\\n\")])])]),e(\"h3\",{attrs:{id:\"redux-层开发\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redux-层开发\"}},[n._v(\"#\")]),n._v(\" redux 层开发\")]),n._v(\" \"),e(\"p\",[n._v(\"排行榜单可以说是整个应用中就数据层而言最简单的一个组件。因此 redux 的代码我们集中在一个文件中。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"//rank/store/index.js\\nimport { fromJS } from 'immutable';\\nimport { getRankListRequest } from '../../../api/request';\\n\\n//constants\\nexport const CHANGE_RANK_LIST = 'home/rank/CHANGE_RANK_LIST';\\nexport const CHANGE_LOADING = 'home/rank/CHANGE_LOADING';\\n\\n//actionCrreator\\nconst changeRankList = (data) => ({\\n  type: CHANGE_RANK_LIST,\\n  data: fromJS (data)\\n})\\n\\nexport const getRankList = () => {\\n  return dispatch => {\\n    getRankListRequest ().then (data => {\\n      let list = data && data.list;\\n      dispatch (changeRankList (list));\\n      dispatch (changeLoading (false));\\n    })\\n  }\\n}\\n\\nconst changeLoading = (data) => ({\\n  type: CHANGE_LOADING,\\n  data\\n})\\n\\n//reducer\\nconst defaultState = fromJS ({\\n  rankList: [],\\n  loading: true\\n})\\n\\nconst reducer = (state = defaultState, action) => {\\n  switch (action.type) {\\n    case CHANGE_RANK_LIST:\\n      return state.set ('rankList', action.data);\\n    case CHANGE_LOADING:\\n      return state.set ('loading', action.data);\\n    default:\\n      return state;\\n  }\\n}\\n\\nexport { reducer };\\n\\n\")])])]),e(\"h3\",{attrs:{id:\"组件连接-redux\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#组件连接-redux\"}},[n._v(\"#\")]),n._v(\" 组件连接 redux\")]),n._v(\" \"),e(\"p\",[n._v(\"先在全局 store 注册:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"//src/store/reducer.js\\nimport { combineReducers } from 'redux-immutable';\\nimport { reducer as recommendReducer } from '../application/Recommend/store/index';\\nimport { reducer as singersReducer } from '../application/Singers/store/index';\\nimport { reducer as rankReducer } from '../application/Rank/store/index';\\n\\nexport default combineReducers ({\\n  // 之后开发具体功能模块的时候添加 reducer\\n  recommend: recommendReducer,\\n  singers: singersReducer ,\\n  rank: rankReducer\\n});\\n\\n\")])])]),e(\"p\",[n._v(\"然后让 rank 组件连接 redux,\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"import React, { useEffect } from 'react';\\nimport { connect } from 'react-redux';\\n\\nfunction Rank (props) {\\n\\n}\\n\\n// 映射 Redux 全局的 state 到组件的 props 上\\nconst mapStateToProps = (state) => ({\\n  rankList: state.getIn (['rank', 'rankList']),\\n  loading: state.getIn (['rank', 'loading']),\\n});\\n// 映射 dispatch 到 props 上\\nconst mapDispatchToProps = (dispatch) => {\\n  return {\\n    getRankListDataDispatch () {\\n      dispatch (getRankList ());\\n    }\\n  }\\n};\\n\\nexport default connect (mapStateToProps, mapDispatchToProps)(React.memo (Rank));\\n\\n\")])])]),e(\"p\",[n._v(\"已经熟悉了 redux 开发方式的你，是不是也觉得非常简单呢？废话不多说，我们马上进入 Rank 组件的开发。\")]),n._v(\" \"),e(\"h2\",{attrs:{id:\"rank-组件开发\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#rank-组件开发\"}},[n._v(\"#\")]),n._v(\" Rank 组件开发\")]),n._v(\" \"),e(\"p\",[n._v(\"首先初始化相应的 props。\")]),n._v(\" \"),e(\"p\",[n._v(\"(这里的引入模块的代码大家自行参考 GitHub 仓库的 chapter5 分支，也根据命令行报错提示依次引入)\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"const { rankList:list, loading } = props;\\n\\nconst { getRankListDataDispatch } = props;\\n\\nlet rankList = list ? list.toJS () : [];\\n\\n\")])])]),e(\"p\",[n._v(\"didMount 的时候发送 Ajax 请求:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"useEffect (() => {\\n  getRankListDataDispatch ();\\n}, []);\\n\\n\")])])]),e(\"p\",[n._v(\"排行榜单分为两个部分，一部分是官方榜，另一部分是全球榜。\")]),n._v(\" \"),e(\"p\",[n._v(\"官方榜单数据有 tracks 数组，存放部分歌曲信息，而全球榜没有。\")]),n._v(\" \"),e(\"p\",[n._v(\"但是后端数据并没有将这两者分开，因此我们需要做一下数据的处理。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"let globalStartIndex = filterIndex (rankList);\\nlet officialList = rankList.slice (0, globalStartIndex);\\nlet globalList = rankList.slice (globalStartIndex);\\n\\n\")])])]),e(\"p\",[n._v(\"其中，filterIndex 从 api/utils.js 中导出，\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"// 处理数据，找出第一个没有歌名的排行榜的索引\\nexport const filterIndex = rankList => {\\n  for (let i = 0; i < rankList.length - 1; i++) {\\n    if (rankList [i].tracks.length && !rankList [i + 1].tracks.length) {\\n      return i + 1;\\n    }\\n  }\\n};\\n\\n\")])])]),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"// 记得引入这个方法\\nimport { filterIndex } from '../../api/utils';\\n\\n\")])])]),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('// 这是渲染榜单列表函数，传入 global 变量来区分不同的布局方式\\nconst renderRankList = (list, global) => {\\n  return (\\n    <List globalRank={global}>\\n      {\\n      list.map ((item) => {\\n        return (\\n          <ListItem key={item.coverImgId} tracks={item.tracks} onClick={() => enterDetail (item.name)}>\\n            <div className=\"img_wrapper\">\\n              <img src={item.coverImgUrl} alt=\"\"/>\\n              <div className=\"decorate\"></div>\\n              <span className=\"update_frequecy\">{item.updateFrequency}</span>\\n            </div>\\n            { renderSongList (item.tracks)  }\\n          </ListItem>\\n        )\\n      })\\n    } \\n    </List>\\n  )\\n}\\n\\nconst renderSongList = (list) => {\\n  return list.length ? (\\n    <SongList>\\n      {\\n        list.map ((item, index) => {\\n          return <li key={index}>{index+1}. {item.first} - {item.second}</li>\\n        })\\n      }\\n    </SongList>\\n  ) : null;\\n}\\n\\n// 榜单数据未加载出来之前都给隐藏\\nlet displayStyle = loading ? {\"display\":\"none\"}:  {\"display\": \"\"};\\n\\nreturn (\\n  <Container>\\n    <Scroll>\\n      <div>\\n        <h1 className=\"offical\" style={displayStyle}> 官方榜 </h1>\\n          { renderRankList (officialList) }\\n        <h1 className=\"global\" style={displayStyle}> 全球榜 </h1>\\n          { renderRankList (globalList, true) }\\n        { loading ? <EnterLoading><Loading></Loading></EnterLoading> : null }\\n      </div>\\n    </Scroll> \\n    {renderRoutes (props.route.routes)}\\n  </Container>\\n  );\\n\\n')])])]),e(\"p\",[n._v(\"style.js 中:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('import styled from\\'styled-components\\';\\nimport style from \\'../../assets/global-style\\';\\n\\n// Props 中的 globalRank 和 tracks.length 均代表是否为全球榜\\n\\nexport const Container = styled.div`\\n  position: fixed;\\n  top: 90px;\\n  bottom: 0;\\n  width: 100%;\\n  .offical,.global {\\n    margin: 10px 5px;\\n    padding-top: 15px;\\n    font-weight: 700;\\n    font-size: ${style [\"font-size-m\"]};\\n    color: ${style [\"font-color-desc\"]};\\n  }\\n`;\\nexport const List = styled.ul`\\n  margin-top: 10px;\\n  padding: 0 5px;\\n  display: ${props => props.globalRank ? \"flex\": \"\" };\\n  flex-direction: row;\\n  justify-content: space-between;\\n  flex-wrap: wrap;\\n  background: ${style [\"background-color\"]};\\n  &::after {\\n    content:\"\";\\n    display:block;\\n    width: 32vw;\\n  }\\n`\\nexport const ListItem = styled.li`\\n  display: ${props => props.tracks.length ? \"flex\": \"\"};\\n  padding: 3px 0;\\n  border-bottom: 1px solid ${style [\"border-color\"]};\\n  .img_wrapper {\\n    width:  ${props => props.tracks.length ? \"27vw\": \"32vw\"};\\n    height: ${props => props.tracks.length ? \"27vw\": \"32vw\"};\\n    border-radius: 3px;\\n    position: relative;\\n    .decorate {\\n      position: absolute;\\n      bottom: 0;\\n      width: 100%;\\n      height: 35px;\\n      border-radius: 3px;\\n      background: linear-gradient (hsla (0,0%,100%,0),hsla (0,0%,43%,.4));\\n    }\\n    img {\\n      width: 100%;\\n      height: 100%;\\n      border-radius: 3px;\\n    }\\n    .update_frequecy {\\n      position: absolute;\\n      left: 7px;\\n      bottom: 7px;\\n      font-size: ${style [\"font-size-ss\"]};\\n      color: ${style [\"font-color-light\"]};\\n    }\\n  }\\n`;\\nexport const SongList = styled.ul`\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-around;\\n  padding: 10px 10px;\\n  >li {\\n    font-size: ${style [\"font-size-s\"]};\\n    color: grey;\\n  }\\n`;\\n\\n')])])]),e(\"p\",[n._v(\"然后在 index.js 中引入 CSS 组件即可，代码就不展示了。\")]),n._v(\" \"),e(\"p\",[n._v(\"在 image_wrapper 中，我们再次利用渐变效果实现了一层遮罩，达到衬托文字的效果。\")]),n._v(\" \"),e(\"p\",[n._v(\"其实布局都是非常常用的 flex 布局，我就不在这上面浪费时间了。值得注意的是，当 flex 布局一行填满三个元素，但是最后一行只有两个元素的时候，会出现一些问题，你会发现最后一个元素并不是在居中的位置，而是在最右边，中间留出了空白。我当时就遇到了这个问题，最后采用伪元素的方式才得以解决:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('export const List = styled.ul`\\n  margin-top: 10px;\\n  padding: 0 5px;\\n  display: ${props => props.globalRank ? \"flex\": \"\" };\\n  flex-direction: row;\\n  justify-content: space-between;\\n  flex-wrap: wrap;\\n  background: ${style [\"background-color\"]};\\n  &::after {\\n    content:\"\";\\n    display:block;\\n    width: 32vw;\\n  }\\n`\\n\\n')])])]),e(\"p\",[n._v(\"现在的接口列表数据比之前少了一条，因此不再存在这个问题，但是希望大家能了解到这个细节。\")])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}