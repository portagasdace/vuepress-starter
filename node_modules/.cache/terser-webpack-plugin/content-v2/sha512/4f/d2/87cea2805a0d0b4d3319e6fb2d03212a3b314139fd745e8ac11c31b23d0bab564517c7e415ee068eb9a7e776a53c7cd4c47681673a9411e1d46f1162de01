{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{466:function(e,t,i){\"use strict\";i.r(t);var l=i(42),n=Object(l.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[i(\"h1\",{attrs:{id:\"flutter-可滚动widget-listview\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-可滚动widget-listview\"}},[e._v(\"#\")]),e._v(\" Flutter 可滚动Widget —— ListView\")]),e._v(\" \"),i(\"p\",[e._v(\"ListView 是可以线性排列 子Widget 的可滚动Widget。ListView 可以和数据绑定用来实现瀑布流。\")]),e._v(\" \"),i(\"h2\",{attrs:{id:\"listview-的快速上手\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#listview-的快速上手\"}},[e._v(\"#\")]),e._v(\" ListView 的快速上手\")]),e._v(\" \"),i(\"p\",[e._v(\"有四种使用 ListView 的方法：\")]),e._v(\" \"),i(\"h3\",{attrs:{id:\"_1-使用默认的构造函数-给-children-属性赋值\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-使用默认的构造函数-给-children-属性赋值\"}},[e._v(\"#\")]),e._v(\" 1.使用默认的构造函数，给 children 属性赋值\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"代码所在位置\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置\"}},[e._v(\"#\")]),e._v(\" 代码所在位置\")]),e._v(\" \"),i(\"p\",[e._v(\"flutter_widget_demo/lib/listview/ListViewDefaultWidget.dart\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"使用方法\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方法\"}},[e._v(\"#\")]),e._v(\" 使用方法\")]),e._v(\" \"),i(\"p\",[e._v(\"使用默认构造函数写 ListView，需要给 children 属性赋值，但只适用于那些只有少量 子Widget 的 ListView,ListView 创建的时候，其 子Widget 也会一起创建。\")]),e._v(\" \"),i(\"p\",[e._v(\"Demo 如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"import 'package:flutter/material.dart';\\n\\nmain() => runApp(new ListViewDefaultWidget());\\n\\nclass ListViewDefaultWidget extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return new MaterialApp(\\n        title: 'Test',\\n        home: new Scaffold(\\n            appBar:\\n                new AppBar(title: new Text('Flutter 可滚动Widget -- ListView')),\\n            body: ListView(\\n              children: <Widget>[\\n                ListTile(title: Text('Title1')),\\n                ListTile(title: Text('Title2')),\\n                ListTile(title: Text('Title3')),\\n                ListTile(title: Text('Title4')),\\n                ListTile(title: Text('Title5')),\\n                ListTile(title: Text('Title6')),\\n                ListTile(title: Text('Title7')),\\n                ListTile(title: Text('Title8')),\\n                ListTile(title: Text('Title9')),\\n                ListTile(title: Text('Title10')),\\n                ListTile(title: Text('Title11')),\\n                ListTile(title: Text('Title12')),\\n                ListTile(title: Text('Title13')),\\n                ListTile(title: Text('Title14')),\\n                ListTile(title: Text('Title15')),\\n                ListTile(title: Text('Title16')),\\n                ListTile(title: Text('Title17')),\\n                ListTile(title: Text('Title18')),\\n                ListTile(title: Text('Title19')),\\n              ],\\n            )));\\n  }\\n}\\n\\n\")])])]),i(\"p\",[e._v(\"运行效果为：\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a0030d4ed358bc?w=428&h=768&f=png&s=51013\",alt:\"\"}})]),e._v(\" \"),i(\"h3\",{attrs:{id:\"_2-使用-listview-builder-可用于和数据绑定实现大量或无限的列表\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-使用-listview-builder-可用于和数据绑定实现大量或无限的列表\"}},[e._v(\"#\")]),e._v(\" 2.使用 ListView.builder,可用于和数据绑定实现大量或无限的列表\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"代码所在位置-2\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置-2\"}},[e._v(\"#\")]),e._v(\" 代码所在位置\")]),e._v(\" \"),i(\"p\",[e._v(\"flutter_widget_demo/lib/listview/ListViewBuilderWidget.dart\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"使用方法-2\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方法-2\"}},[e._v(\"#\")]),e._v(\" 使用方法\")]),e._v(\" \"),i(\"p\",[e._v(\"ListView.builder 可以用于构建大量或无限的列表，是因为 ListView.builder 只会构建那些实际可见的 子Widget。\")]),e._v(\" \"),i(\"p\",[e._v(\"ListView.builder 的定义为：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"  ListView.builder({\\n    Key key,\\n    Axis scrollDirection = Axis.vertical,\\n    bool reverse = false,\\n    ScrollController controller,\\n    bool primary,\\n    ScrollPhysics physics,\\n    bool shrinkWrap = false,\\n    EdgeInsetsGeometry padding,\\n    this.itemExtent,\\n    @required IndexedWidgetBuilder itemBuilder,\\n    int itemCount,\\n    bool addAutomaticKeepAlives = true,\\n    bool addRepaintBoundaries = true,\\n    bool addSemanticIndexes = true,\\n    double cacheExtent,\\n    int semanticChildCount,\\n    DragStartBehavior dragStartBehavior = DragStartBehavior.down,\\n  }) \\n    ...\\n\\n\")])])]),i(\"p\",[e._v(\"大部分属性都和 ListView 的默认构造函数一样，除了这两个：\")]),e._v(\" \"),i(\"ul\",[i(\"li\",[i(\"p\",[e._v(\"int itemCount\")]),e._v(\" \"),i(\"p\",[e._v(\"代表 子Widget 的数量，虽然是可选的，但是还是建议赋值，可以让 ListView 预估最大滑动距离，从而提升性能。如果为null，则子节点数由[itemBuilder]返回null的最小索引确定。\")])]),e._v(\" \"),i(\"li\",[i(\"p\",[e._v(\"@required IndexedWidgetBuilder itemBuilder\")]),e._v(\" \"),i(\"p\",[e._v(\"itemBuilder 用于创建实际可见的 子Widget，只有索引大于或等于零且小于 itemCount 才会调用 itemBuilder。\")])])]),e._v(\" \"),i(\"p\",[e._v(\"下面写一个数据和 ListView.builder 绑定使用的例子:\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"import 'package:flutter/material.dart';\\n\\nvoid main() => runApp(ListViewBuilderWidget(\\n      items: List<String>.generate(10000, (i) => \\\"Item $i\\\"),\\n    ));\\n\\nclass ListViewBuilderWidget extends StatelessWidget {\\n  final List<String> items;\\n\\n  ListViewBuilderWidget({Key key, @required this.items}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: 'Test',\\n      home: Scaffold(\\n        appBar: AppBar(title: new Text('Flutter 可滚动Widget -- ListView')),\\n        body: ListView.builder(\\n          itemCount: items.length,\\n          itemBuilder: (context, index) {\\n            return ListTile(\\n              title: Text('${items[index]}'),\\n            );\\n          },\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\n\")])])]),i(\"p\",[e._v(\"运行后的效果为：\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a0031169d33646?w=428&h=768&f=png&s=51443\",alt:\"\"}})]),e._v(\" \"),i(\"p\",[e._v(\"要实现一个无限循环列表，只要不给 itemCount 赋值就行，如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"ListView.builder(\\n    padding: EdgeInsets.all(8.0),\\n    itemBuilder: (BuildContext context, int index) {\\n        return ListTile(title: Text('Title $index'),);\\n    },\\n)\\n\\n\")])])]),i(\"h3\",{attrs:{id:\"_3-使用-listview-separated-具有分割项的-listview-builder\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-使用-listview-separated-具有分割项的-listview-builder\"}},[e._v(\"#\")]),e._v(\" 3.使用 ListView.separated，具有分割项的 ListView.builder\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"代码所在位置-3\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置-3\"}},[e._v(\"#\")]),e._v(\" 代码所在位置\")]),e._v(\" \"),i(\"p\",[e._v(\"flutter_widget_demo/lib/listview/ListViewSeparatedWidget.dart\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"使用方法-3\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方法-3\"}},[e._v(\"#\")]),e._v(\" 使用方法\")]),e._v(\" \"),i(\"p\",[e._v(\"看 ListView.separated 的定义：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"ListView.separated({\\n    Key key,\\n    Axis scrollDirection = Axis.vertical,\\n    bool reverse = false,\\n    ScrollController controller,\\n    bool primary,\\n    ScrollPhysics physics,\\n    bool shrinkWrap = false,\\n    EdgeInsetsGeometry padding,\\n    @required IndexedWidgetBuilder itemBuilder,\\n    @required IndexedWidgetBuilder separatorBuilder,\\n    @required int itemCount,\\n    bool addAutomaticKeepAlives = true,\\n    bool addRepaintBoundaries = true,\\n    bool addSemanticIndexes = true,\\n    double cacheExtent,\\n  })\\n  ...\\n\\n\")])])]),i(\"p\",[e._v(\"相比 ListView.builder 多了一个 separatorBuilder，separatorBuilder就是用于构建分割项的，而且 itemBuilder、separatorBuilder、itemCount 都是必选的。\")]),e._v(\" \"),i(\"p\",[e._v(\"使用的 demo 如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"import 'package:flutter/material.dart';\\n\\nvoid main() => runApp(ListViewSeparatedWidget(\\n      items: List<String>.generate(10000, (i) => \\\"Item $i\\\"),\\n    ));\\n\\nclass ListViewSeparatedWidget extends StatelessWidget {\\n  final List<String> items;\\n\\n  ListViewSeparatedWidget({Key key, @required this.items}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: 'Test',\\n      home: Scaffold(\\n        appBar: AppBar(title: new Text('Flutter 可滚动Widget -- ListView')),\\n        body: ListView.separated(\\n          itemCount: items.length,\\n          itemBuilder: (context, index) {\\n            return ListTile(\\n              title: Text('${items[index]}'),\\n            );\\n          },\\n          separatorBuilder: (context, index) {\\n            return Container(\\n              constraints: BoxConstraints.tightFor(height: 10),\\n              color: Colors.orange,\\n            );\\n          },\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\n\")])])]),i(\"p\",[e._v(\"运行效果为：\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a003177d842417?w=428&h=768&f=png&s=55038\",alt:\"\"}})]),e._v(\" \"),i(\"h3\",{attrs:{id:\"_4-使用-listview-custom-需要使用-sliverchilddelegate\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-使用-listview-custom-需要使用-sliverchilddelegate\"}},[e._v(\"#\")]),e._v(\" 4.使用 ListView.custom，需要使用 SliverChildDelegate\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"代码所在位置-4\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置-4\"}},[e._v(\"#\")]),e._v(\" 代码所在位置\")]),e._v(\" \"),i(\"p\",[e._v(\"flutter_widget_demo/lib/listview/ListViewCustomWidget.dart\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"使用方法-4\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方法-4\"}},[e._v(\"#\")]),e._v(\" 使用方法\")]),e._v(\" \"),i(\"p\",[e._v(\"SliverChildDelegate 提供了定制 子Widget 的能力。\")]),e._v(\" \"),i(\"p\",[e._v(\"首先看 ListView.custom 的定义：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"  const ListView.custom({\\n    Key key,\\n    Axis scrollDirection = Axis.vertical,\\n    bool reverse = false,\\n    ScrollController controller,\\n    bool primary,\\n    ScrollPhysics physics,\\n    bool shrinkWrap = false,\\n    EdgeInsetsGeometry padding,\\n    this.itemExtent,\\n    @required this.childrenDelegate,\\n    double cacheExtent,\\n    int semanticChildCount,\\n  })\\n\\n\")])])]),i(\"p\",[e._v(\"childrenDelegate 为必选参数，在看如何实现 SliverChildDelegate，发现 SliverChildDelegate 是一个抽象类，SliverChildDelegate 的 build 方法可以对单个 子Widget 进行自定义处理，而且 SliverChildDelegate 有个默认实现 SliverChildListDelegate，所以我们用 SliverChildListDelegate 来实现 ListView.custom，代码如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"import 'package:flutter/material.dart';\\n\\nvoid main() => runApp(ListViewCustomWidget(\\n      items: List<String>.generate(10000, (i) => \\\"Item $i\\\"),\\n    ));\\n\\nclass ListViewCustomWidget extends StatelessWidget {\\n  final List<String> items;\\n\\n  ListViewCustomWidget({Key key, @required this.items}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: 'Test',\\n      home: Scaffold(\\n        appBar: AppBar(title: new Text('Flutter 可滚动Widget -- ListView')),\\n        body: ListView.custom(\\n          childrenDelegate: SliverChildListDelegate(<Widget>[\\n            ListTile(title: Text('Title1')),\\n            ListTile(title: Text('Title2')),\\n            ListTile(title: Text('Title3')),\\n            ListTile(title: Text('Title4')),\\n            ListTile(title: Text('Title5')),\\n            ListTile(title: Text('Title6')),\\n            ListTile(title: Text('Title7')),\\n            ListTile(title: Text('Title8')),\\n            ListTile(title: Text('Title9')),\\n            ListTile(title: Text('Title10')),\\n            ListTile(title: Text('Title11')),\\n            ListTile(title: Text('Title12')),\\n            ListTile(title: Text('Title13')),\\n            ListTile(title: Text('Title14')),\\n            ListTile(title: Text('Title15')),\\n            ListTile(title: Text('Title16')),\\n            ListTile(title: Text('Title17')),\\n            ListTile(title: Text('Title18')),\\n            ListTile(title: Text('Title19')),\\n          ]),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\n\")])])]),i(\"p\",[e._v(\"运行效果为：\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a0030d4ed358bc?w=428&h=768&f=png&s=51013\",alt:\"\"}})]),e._v(\" \"),i(\"h2\",{attrs:{id:\"listview-的构造函数及参数使用\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#listview-的构造函数及参数使用\"}},[e._v(\"#\")]),e._v(\" ListView 的构造函数及参数使用\")]),e._v(\" \"),i(\"p\",[e._v(\"首先看 ListView 的构造函数:\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"class ListView extends BoxScrollView {\\n  ListView({\\n    Key key,\\n    Axis scrollDirection = Axis.vertical,\\n    bool reverse = false,\\n    ScrollController controller,\\n    bool primary,\\n    ScrollPhysics physics,\\n    bool shrinkWrap = false,\\n    EdgeInsetsGeometry padding,\\n    this.itemExtent,\\n    bool addAutomaticKeepAlives = true,\\n    bool addRepaintBoundaries = true,\\n    bool addSemanticIndexes = true,\\n    double cacheExtent,\\n    List<Widget> children = const <Widget>[],\\n    int semanticChildCount,\\n    DragStartBehavior dragStartBehavior = DragStartBehavior.down,\\n  }) \\n    ...\\n}\\n\\n\")])])]),i(\"p\",[e._v(\"参数名字\")]),e._v(\" \"),i(\"p\",[e._v(\"参数类型\")]),e._v(\" \"),i(\"p\",[e._v(\"意义\")]),e._v(\" \"),i(\"p\",[e._v(\"必选 or 可选\")]),e._v(\" \"),i(\"p\",[e._v(\"key\")]),e._v(\" \"),i(\"p\",[e._v(\"Key\")]),e._v(\" \"),i(\"p\",[e._v(\"Widget 的标识\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"scrollDirection\")]),e._v(\" \"),i(\"p\",[e._v(\"Axis\")]),e._v(\" \"),i(\"p\",[e._v(\"滑动的方向\"),i(\"br\"),e._v(\"\\n默认为 Axis.vertical，垂直方向可滑动\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"reverse\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"控制 ListView 里列表项的排列顺序，是按照插入顺序排，还是按照插入顺序相反的方向排序。\"),i(\"br\"),e._v(\"\\n默认为 false，就是按照插入顺序排序，第一个插入的在头部\"),i(\"br\"),e._v(\"\\n，当 reverse 为 true 时，第一个插入的会在底部\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"controller\")]),e._v(\" \"),i(\"p\",[e._v(\"ScrollController\")]),e._v(\" \"),i(\"p\",[e._v(\"可以控制 ListView 滚动的位置\"),i(\"br\"),e._v(\"\\nScrollController 提供以下的几个功能：\"),i(\"br\"),e._v(\"\\n1.设置 ListView 滑动的初始位置\"),i(\"br\"),e._v(\"\\n2.可以控制 ListView 是否存储和恢复滑动的位置\"),i(\"br\"),e._v(\"\\n3.可以读取、设置当前滑动的位置\"),i(\"br\"),e._v(\"\\n可以继承 ScrollController 实现自定义的功能\"),i(\"br\"),e._v(\"\\n当 primary 为 true 时，controller 必须为 null\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"primary\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"是否是与父级关联的主滚动视图\"),i(\"br\"),e._v(\"\\n当为 true 时，即使 ListView 里没有足够的内容也能滑动\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"physics\")]),e._v(\" \"),i(\"p\",[e._v(\"ScrollPhysics\")]),e._v(\" \"),i(\"p\",[e._v(\"设置 ListView 的滚动效果\"),i(\"br\"),e._v(\"\\n值必须为 ScrollPhysics 的子类，比如有如下的值：\"),i(\"br\"),e._v(\"\\nAlwaysScrollableScrollPhysics():可以让 ListView 里没有足够的内容也能滑动\"),i(\"br\"),e._v(\"\\nScrollPhysics():ListView 在没有足够的内容的时候不能滑动\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"shrinkWrap\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"是否根据列表项的总长度来设置 ListView的长度，默认值为 false。\"),i(\"br\"),e._v(\"\\n当 shrinkWrap 为 false 时，ListView 会在滚动方向扩展到可占用的最大空间\"),i(\"br\"),e._v(\"\\n当 shrinkWrap 为 true 时，ListView 在滚动方向占用的空间就是其列表项的总长度，但是这样会很耗性能，因为当其列表项发生变化时，ListView 的大小会重新计算\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"padding\")]),e._v(\" \"),i(\"p\",[e._v(\"EdgeInsetsGeometry\")]),e._v(\" \"),i(\"p\",[e._v(\"ListView 的内边距\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"itemExtent\")]),e._v(\" \"),i(\"p\",[e._v(\"double\")]),e._v(\" \"),i(\"p\",[e._v(\"itemExtent 指的是列表项的大小\"),i(\"br\"),e._v(\"\\n如果滚动方向是垂直方向，则 itemExtent 代表的是 子Widget 的高度，\"),i(\"br\"),e._v(\"\\n如果滚动方向为水平方向，则 itemExtent 代表的是 子Widget 的长度\"),i(\"br\"),e._v(\"\\n如果 itemExtent 不为 null，则会强制所有 子Widget 在滑动方向的大小都为 itemExtent\"),i(\"br\"),e._v(\"\\n指定 itemExtent 会比较高效，因为 子Widget 的高度就不需要在去计算，ListView 也可以提前知道列表的长度\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"addAutomaticKeepAlives\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"是否用 AutomaticKeepAlive 来包列表项,默认为 true\"),i(\"br\"),e._v(\"\\n在一个 lazy list 里，如果 子Widget 为了保证自己在滑出可视界面时不被回收，就需要把 addAutomaticKeepAlives 设为 true\"),i(\"br\"),e._v(\"\\n当 子Widget 不需要让自己保持存活时，为了提升性能，请把 addAutomaticKeepAlives 设为 false\"),i(\"br\"),e._v(\"\\n如果 子Widget 自己维护其 KeepAlive 状态，那么此参数必须置为false。\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"addRepaintBoundaries\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"是否用 RepaintBoundary 来包列表项，默认为 true\"),i(\"br\"),e._v(\"\\n当 addRepaintBoundaries 为 true 时，可以避免列表项重绘，提高性能\"),i(\"br\"),e._v(\"\\n但是当列表项重绘的开销非常小（如一个颜色块，或者一个较短的文本）时，不添加 RepaintBoundary 反而会更高效。\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"addSemanticIndexes\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"是否用 IndexedSemantics 来包列表项,默认为 true\"),i(\"br\"),e._v(\"\\n使用 IndexedSemantics 是为了正确的用于辅助模式\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"cacheExtent\")]),e._v(\" \"),i(\"p\",[e._v(\"double\")]),e._v(\" \"),i(\"p\",[e._v(\"ListView 可见部分的前面和后面的区域可以用来缓存列表项，\"),i(\"br\"),e._v(\"\\n这部分区域的 item 即使不可见，也会加载出来，所以当滑动到这个区域的时候，缓存的区域就会变的可见，\"),i(\"br\"),e._v(\"\\ncacheExtent 就表示缓存区域在可见部分的前面和后面有多少像素\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"children\")]),e._v(\" \"),i(\"p\",[e._v(\"List\"),i(\"Widget\")],1),e._v(\" \"),i(\"p\",[e._v(\"ListView 的列表项\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"semanticChildCount\")]),e._v(\" \"),i(\"p\",[e._v(\"int\")]),e._v(\" \"),i(\"p\",[e._v(\"提供语义信息的列表项的数量\"),i(\"br\"),e._v(\"\\n默认为 ListView 的 item 的数量\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"dragStartBehavior\")]),e._v(\" \"),i(\"p\",[e._v(\"DragStartBehavior\")]),e._v(\" \"),i(\"p\",[e._v(\"确定处理拖动开始行为的方式。\"),i(\"br\"),e._v(\"\\n如果设置为[DragStartBehavior.start]，则在检测到拖动手势时将开始滚动拖动行为\"),i(\"br\"),e._v(\"\\n如果设置为[DragStartBehavior.down]，它将在首次检测到向下事件时开始\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}