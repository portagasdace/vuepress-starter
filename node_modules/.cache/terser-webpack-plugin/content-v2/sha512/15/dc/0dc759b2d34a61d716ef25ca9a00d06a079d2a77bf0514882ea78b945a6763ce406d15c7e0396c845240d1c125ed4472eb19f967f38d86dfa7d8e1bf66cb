{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[317],{674:function(n,e,t){\"use strict\";t.r(e);var a=t(42),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[t(\"blockquote\",[t(\"p\",[n._v(\"本节代码对应 GitHub 分支: chapter8\")])]),n._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter8\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"仓库传送门\"),t(\"OutboundLink\")],1)]),n._v(\" \"),t(\"h2\",{attrs:{id:\"迷你版布局\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#迷你版布局\"}},[n._v(\"#\")]),n._v(\" 迷你版布局\")]),n._v(\" \"),t(\"p\",[n._v(\"首先在 Player 目录下新建 miniPlayer 子目录，\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('//miniPlayer/index.js\\nimport React from \\'react\\';\\nimport {getName} from \\'../../../api/utils\\';\\nimport { MiniPlayerContainer } from \\'./style\\';\\n\\nfunction MiniPlayer (props) {\\n  const { song } = props;\\n  return (\\n      <MiniPlayerContainer>\\n        <div className=\"icon\">\\n          <div className=\"imgWrapper\">\\n            <img className=\"play\" src={song.al.picUrl} width=\"40\" height=\"40\" alt=\"img\"/>\\n          </div>\\n        </div>\\n        <div className=\"text\">\\n          <h2 className=\"name\">{song.name}</h2>\\n          <p className=\"desc\">{getName (song.ar)}</p>\\n        </div>\\n        <div className=\"control\">\\n          <i className=\"iconfont\">&#xe650;</i>\\n        </div>\\n        <div className=\"control\">\\n          <i className=\"iconfont\">&#xe640;</i>\\n        </div>\\n      </MiniPlayerContainer>\\n  )\\n}\\n\\nexport default React.memo (MiniPlayer);\\n\\n')])])]),t(\"p\",[n._v(\"样式组件对应如下，在 style.js 中：\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('import styled, {keyframes} from\\'styled-components\\';\\nimport style from \\'../../../assets/global-style\\';\\n\\nconst rotate = keyframes`\\n  0%{\\n    transform: rotate (0);\\n  }\\n  100%{\\n    transform: rotate (360deg);\\n  }\\n`\\n\\nexport const MiniPlayerContainer = styled.div`\\n  display: flex;\\n  align-items: center;\\n  position: fixed;\\n  left: 0;\\n  bottom: 0;\\n  z-index: 1000;\\n  width: 100%;\\n  height: 60px;\\n  background: ${style [\"highlight-background-color\"]};\\n  &.mini-enter {\\n    transform: translate3d (0, 100%, 0);\\n  }\\n  &.mini-enter-active {\\n    transform: translate3d (0, 0, 0);\\n    transition: all 0.4s;\\n  }\\n  &.mini-exit-active {\\n    transform: translate3d (0, 100%, 0);\\n    transition: all .4s\\n  }\\n  .icon {\\n    flex: 0 0 40px;\\n    width: 40px;\\n    height: 40px;\\n    padding: 0 10px 0 20px;\\n    .imgWrapper {\\n      width: 100%;\\n      height: 100%;\\n      img {\\n        border-radius: 50%;\\n        &.play {\\n          animation: ${rotate} 10s infinite;\\n          &.pause {\\n            animation-play-state: paused;\\n          }\\n        }\\n      }\\n    }\\n  }\\n  .text {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    flex: 1;\\n    line-height: 20px;\\n    overflow: hidden;\\n    .name {\\n      margin-bottom: 2px;\\n      font-size: ${style [\"font-size-m\"]};\\n      color: ${style [\"font-color-desc\"]};\\n      ${style.noWrap ()}\\n    }\\n    .desc {\\n      font-size: ${style [\"font-size-s\"]};\\n      color: ${style [\"font-color-desc-v2\"]};\\n      ${style.noWrap ()}\\n    }\\n  }\\n  .control {\\n    flex: 0 0 30px;\\n    padding: 0 10px;\\n    .iconfont, .icon-playlist {\\n      font-size: 30px;\\n      color: ${style [\"theme-color\"]};\\n    }\\n    .icon-mini {\\n      font-size: 16px;\\n      position: absolute;\\n      left: 8px;\\n      top: 8px;\\n      &.icon-play {\\n        left: 9px\\n      }\\n    }\\n  }\\n`\\n\\n')])])]),t(\"p\",[n._v(\"当然，在 Player/index.js 下也要做一些修改:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('//Player/index.js 修改内容如下\\nimport MiniPlayer from \\'./miniPlayer\\';\\n\\nfunction Player (props) {\\n  const currentSong = {\\n    al: { picUrl: \"https://p1.music.126.net/JL_id1CFwNJpzgrXwemh4Q==/109951164172892390.jpg\" },\\n    name: \"木偶人\",\\n    ar: [{name: \"薛之谦\"}]\\n  }\\n  return (\\n    <div>\\n      <MiniPlayer song={currentSong}/>\\n    </div>\\n  )\\n}\\n\\n//...\\n\\n')])])]),t(\"p\",[n._v(\"现在大家能看到的应该是这个样子了。\")]),n._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/10/26/16e08012af8aa18f?w=375&h=667&f=jpeg&s=45688\",alt:\"\"}})]),n._v(\" \"),t(\"p\",[n._v(\"这里暂停按钮比较单调，因为没有包括进度条，这个组件下一节来开发，现在先用图标代替。\")]),n._v(\" \"),t(\"p\",[n._v(\"miniPlayer 的布局就这些，还算比较简单，我们现在马上过渡到全屏版本的布局中。\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"全屏版布局\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#全屏版布局\"}},[n._v(\"#\")]),n._v(\" 全屏版布局\")]),n._v(\" \"),t(\"p\",[n._v(\"给大家整理了一下，现在大致的布局是这样。\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('//normalPlayer/index.js\\nimport React from \"react\";\\nimport {  getName } from \"../../../api/utils\";\\nimport {\\n  NormalPlayerContainer,\\n  Top,\\n  Middle,\\n  Bottom,\\n  Operators,\\n  CDWrapper,\\n} from \"./style\";\\n\\nfunction NormalPlayer (props) {\\n  const {song} =  props;\\n  return (\\n    <NormalPlayerContainer>\\n      <div className=\"background\">\\n        <img\\n          src={song.al.picUrl + \"?param=300x300\"}\\n          width=\"100%\"\\n          height=\"100%\"\\n          alt=\"歌曲图片\"\\n        />\\n      </div>\\n      <div className=\"background layer\"></div>\\n      <Top className=\"top\">\\n        <div className=\"back\">\\n          <i className=\"iconfont icon-back\">&#xe662;</i>\\n        </div>\\n        <h1 className=\"title\">{song.name}</h1>\\n        <h1 className=\"subtitle\">{getName (song.ar)}</h1>\\n      </Top>\\n      <Middle>\\n        <CDWrapper>\\n          <div className=\"cd\">\\n            <img\\n              className=\"image play\"\\n              src={song.al.picUrl + \"?param=400x400\"}\\n              alt=\"\"\\n            />\\n          </div>\\n        </CDWrapper>\\n      </Middle>\\n      <Bottom className=\"bottom\">\\n        <Operators>\\n          <div className=\"icon i-left\" >\\n            <i className=\"iconfont\">&#xe625;</i>\\n          </div>\\n          <div className=\"icon i-left\">\\n            <i className=\"iconfont\">&#xe6e1;</i>\\n          </div>\\n          <div className=\"icon i-center\">\\n            <i className=\"iconfont\">&#xe723;</i>\\n          </div>\\n          <div className=\"icon i-right\">\\n            <i className=\"iconfont\">&#xe718;</i>\\n          </div>\\n          <div className=\"icon i-right\">\\n            <i className=\"iconfont\">&#xe640;</i>\\n          </div>\\n        </Operators>\\n      </Bottom>\\n    </NormalPlayerContainer>\\n  );\\n}\\nexport default React.memo (NormalPlayer);\\n\\n')])])]),t(\"p\",[n._v(\"相应的 style.js 如下：\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('import styled, { keyframes } from \"styled-components\";\\nimport style from \"../../../assets/global-style\";\\n\\nconst rotate = keyframes`\\n  0%{\\n    transform: rotate (0);\\n  }\\n  100%{\\n    transform: rotate (360deg);\\n  }\\n`;\\nexport const NormalPlayerContainer = styled.div`\\n  position: fixed;\\n  left: 0;\\n  right: 0;\\n  top: 0;\\n  bottom: 0;\\n  z-index: 150;\\n  background: ${style [\"background-color\"]};\\n  .background {\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n    width: 100%;\\n    height: 100%;\\n    z-index: -1;\\n    opacity: 0.6;\\n    filter: blur (20px);\\n    &.layer {\\n      background: ${style [\"font-color-desc\"]};\\n      opacity: 0.3;\\n      filter: none;\\n    }\\n  }\\n`;\\nexport const Top = styled.div`\\n  position: relative;\\n  margin-bottom: 25px;\\n  .back {\\n    position: absolute;\\n    top: 0;\\n    left: 6px;\\n    z-index: 50;\\n    .iconfont {\\n      display: block;\\n      padding: 9px;\\n      font-size: 24px;\\n      color: ${style [\"font-color-desc\"]};\\n      font-weight: bold;\\n      transform: rotate (90deg);\\n    }\\n  }\\n  .title {\\n    width: 70%;\\n    margin: 0 auto;\\n    line-height: 40px;\\n    text-align: center;\\n    font-size: ${style [\"font-size-l\"]};\\n    color: ${style [\"font-color-desc\"]};\\n    ${style.noWrap ()};\\n  }\\n  .subtitle {\\n    line-height: 20px;\\n    text-align: center;\\n    font-size: ${style [\"font-size-m\"]};\\n    color: ${style [\"font-color-desc-v2\"]};\\n    ${style.noWrap ()};\\n  }\\n`;\\nexport const Middle = styled.div`\\n  position: fixed;\\n  width: 100%;\\n  top: 80px;\\n  bottom: 170px;\\n  white-space: nowrap;\\n  font-size: 0;\\n  overflow: hidden;\\n`;\\nexport const CDWrapper = styled.div`\\n  position: absolute;\\n  margin: auto;\\n  top: 10%;\\n  left: 0;\\n  right: 0;\\n  width: 80%;\\n  box-sizing: border-box;\\n  height: 80vw;\\n  .cd {\\n    width: 100%;\\n    height: 100%;\\n    border-radius: 50%;\\n    .image {\\n      position: absolute;\\n      left: 0;\\n      top: 0;\\n      width: 100%;\\n      height: 100%;\\n      box-sizing: border-box;\\n      border-radius: 50%;\\n      border: 10px solid rgba (255, 255, 255, 0.1);\\n    }\\n    .play {\\n      animation: ${rotate} 20s linear infinite;\\n      &.pause {\\n        animation-play-state: paused;\\n      }\\n    }\\n  }\\n  .playing_lyric {\\n    margin-top: 20px;\\n    font-size: 14px;\\n    line-height: 20px;\\n    white-space: normal;\\n    text-align: center;\\n    color: rgba (255, 255, 255, 0.5);\\n  }\\n`;\\n\\nexport const Bottom = styled.div`\\n  position: absolute;\\n  bottom: 50px;\\n  width: 100%;\\n`;\\nexport const ProgressWrapper = styled.div`\\n  display: flex;\\n  align-items: center;\\n  width: 80%;\\n  margin: 0px auto;\\n  padding: 10px 0;\\n  .time {\\n    color: ${style [\"font-color-desc\"]};\\n    font-size: ${style [\"font-size-s\"]};\\n    flex: 0 0 30px;\\n    line-height: 30px;\\n    width: 30px;\\n    &.time-l {\\n      text-align: left;\\n    }\\n    &.time-r {\\n      text-align: right;\\n    }\\n  }\\n  .progress-bar-wrapper {\\n    flex: 1;\\n  }\\n`;\\nexport const Operators = styled.div`\\n  display: flex;\\n  align-items: center;\\n  .icon {\\n    font-weight: 300;\\n    flex: 1;\\n    color: ${style [\"font-color-desc\"]};\\n    &.disable {\\n      color: ${style [\"theme-color-shadow\"]};\\n    }\\n    i {\\n      font-weight: 300;\\n      font-size: 30px;\\n    }\\n  }\\n  .i-left {\\n    text-align: right;\\n  }\\n  .i-center {\\n    padding: 0 20px;\\n    text-align: center;\\n    i {\\n      font-size: 40px;\\n    }\\n  }\\n  .i-right {\\n    text-align: left;\\n  }\\n  .icon-favorite {\\n    color: ${style [\"theme-color\"]};\\n  }\\n`;\\n\\n')])])]),t(\"p\",[n._v(\"现在大家可以看到基本的布局啦。如下图，并且唱片部分正在旋转:\")]),n._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/10/26/16e07fd7d482ba80?w=375&h=667&f=jpeg&s=27022\",alt:\"\"}})]),n._v(\" \"),t(\"p\",[n._v(\"其实这部分的布局相对之前的几个组件还是相当简单的，不做赘述了，我们把重心放在后面更出彩的部分 ———— 进出场动画。\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"全屏版进场动画\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#全屏版进场动画\"}},[n._v(\"#\")]),n._v(\" 全屏版进场动画\")]),n._v(\" \"),t(\"h3\",{attrs:{id:\"引入状态\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#引入状态\"}},[n._v(\"#\")]),n._v(\" 引入状态\")]),n._v(\" \"),t(\"p\",[n._v(\"既然是要进场，那就必须涉及到状态的改变了，具体来说我们现在需要拿出 redux 中的 fullScreen 并做相应的改变。\")]),n._v(\" \"),t(\"p\",[n._v(\"由于父组件连接了 redux，现在 normalPlayer 只需从父组件接受相应的变量和方法即可。\")]),n._v(\" \"),t(\"p\",[n._v(\"首先在父组件中传 props:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"function Player (props) {\\n  const { fullScreen } = props;\\n\\n  const { toggleFullScreenDispatch } = props;\\n\\n  //...\\n  return (\\n    <div> \\n      <MiniPlayer\\n        song={currentSong}\\n        fullScreen={fullScreen}\\n        toggleFullScreen={toggleFullScreenDispatch}\\n      />\\n      <NormalPlayer \\n        song={currentSong}\\n        fullScreen={fullScreen}\\n        toggleFullScreen={toggleFullScreenDispatch}\\n      />\\n    </div>\\n  )\\n}\\n\\n\")])])]),t(\"p\",[n._v(\"然后在 normalPlayer 中接收。\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('const { song, fullScreen } =  props;\\nconst { toggleFullScreenDispatch } = props;\\n\\nreturn (\\n  <CSSTransition\\n    classNames=\"normal\"\\n    in={fullScreen}\\n    timeout={400}\\n    mountOnEnter\\n    //onEnter={enter}\\n    //onEntered={afterEnter}\\n    //onExit={leave}\\n    //onExited={afterLeave}\\n  >\\n  // 组件代码\\n  </CSSTransition>\\n)\\n\\n')])])]),t(\"p\",[n._v(\"当然，这里的钩子函数还没有定义。因为还有一些准备工作需要提前做一下。\")]),n._v(\" \"),t(\"h3\",{attrs:{id:\"准备工作\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#准备工作\"}},[n._v(\"#\")]),n._v(\" 准备工作\")]),n._v(\" \"),t(\"p\",[n._v(\"首先 miniPlayer 里面，当 fullScreen 为 false 的时候应该不显示，我们也可以运用一下 CSSTransition：\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('// 引入 useRef\\n\\nconst miniPlayerRef = useRef ();\\n\\nreturn (\\n  <CSSTransition \\n    in={!fullScreen} \\n    timeout={400} \\n    classNames=\"mini\" \\n    onEnter={() => {\\n      miniPlayerRef.current.style.display = \"flex\";\\n    }}\\n    onExited={() => {\\n      miniPlayerRef.current.style.display = \"none\";\\n    }}\\n  >\\n    <MiniPlayerContainer ref={miniPlayerRef} onClick={() => toggleFullScreen (true)}>\\n      // 其余代码不变 \\n    </MiniPlayerContainer>\\n  </CSSTransition>\\n)\\n\\n')])])]),t(\"p\",[n._v(\"关于 mini 动画钩子类在 style.js 中如下声明:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"//NormalPlayerContainer 组件下\\n&.mini-enter {\\n  transform: translate3d (0, 100%, 0);\\n}\\n&.mini-enter-active {\\n  transform: translate3d (0, 0, 0);\\n  transition: all 0.4s;\\n}\\n&.mini-exit-active {\\n  transform: translate3d (0, 100%, 0);\\n  transition: all .4s\\n}\\n\\n\")])])]),t(\"p\",[n._v(\"这样实现了 miniPlayer 进出的过渡效果。\")]),n._v(\" \"),t(\"p\",[n._v(\"接下来需要用到 JS 的帧动画插件 create-keyframe-animation\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"npm install create-keyframe-animation --save\\n\\n\")])])]),t(\"h3\",{attrs:{id:\"js-实现帧动画\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#js-实现帧动画\"}},[n._v(\"#\")]),n._v(\" JS 实现帧动画\")]),n._v(\" \"),t(\"p\",[t(\"code\",[n._v(\"接下来高能预警！\")])]),n._v(\" \"),t(\"p\",[n._v(\"先拿到一些关键元素的 DOM 对象。\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"const normalPlayerRef = useRef ();\\nconst cdWrapperRef = useRef ();\\n\\n\")])])]),t(\"p\",[n._v(\"分别对应：\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"<NormalPlayerContainer ref={normalPlayerRef}>\\n//...\\n  <Middle ref={cdWrapperRef}>\\n\\n\")])])]),t(\"p\",[n._v(\"现在，来开始着手写动画钩子的逻辑。\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('// 引入的代码\\nimport animations from \"create-keyframe-animation\";\\n\\n// 启用帧动画\\nconst enter = () => {\\n  normalPlayerRef.current.style.display = \"block\";\\n  const { x, y, scale } = _getPosAndScale ();// 获取 miniPlayer 图片中心相对 normalPlayer 唱片中心的偏移\\n  let animation = {\\n    0: {\\n      transform: `translate3d (${x} px,${y} px,0) scale (${scale})`\\n    },\\n    60: {\\n      transform: `translate3d (0, 0, 0) scale (1.1)`\\n    },\\n    100: {\\n      transform: `translate3d (0, 0, 0) scale (1)`\\n    }\\n  };\\n  animations.registerAnimation ({\\n    name: \"move\",\\n    animation,\\n    presets: {\\n      duration: 400,\\n      easing: \"linear\"\\n    }\\n  });\\n  animations.runAnimation (cdWrapperRef.current, \"move\");\\n};\\n\\n// 计算偏移的辅助函数\\nconst _getPosAndScale = () => {\\n  const targetWidth = 40;\\n  const paddingLeft = 40;\\n  const paddingBottom = 30;\\n  const paddingTop = 80;\\n  const width = window.innerWidth * 0.8;\\n  const scale = targetWidth /width;\\n  // 两个圆心的横坐标距离和纵坐标距离\\n  const x = -(window.innerWidth/ 2 - paddingLeft);\\n  const y = window.innerHeight - paddingTop - width / 2 - paddingBottom;\\n  return {\\n    x,\\n    y,\\n    scale\\n  };\\n};\\n\\n')])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('const afterEnter = () => {\\n  // 进入后解绑帧动画\\n  const cdWrapperDom = cdWrapperRef.current;\\n  animations.unregisterAnimation (\"move\");\\n  cdWrapperDom.style.animation = \"\";\\n};\\n\\n')])])]),t(\"p\",[n._v(\"现在可以看到这样的进场效果。\")]),n._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/10/26/16e07fe228d64cc1?w=372&h=651&f=gif&s=1877624\",alt:\"\"}})]),n._v(\" \"),t(\"p\",[n._v(\"但是，这还不够！\")]),n._v(\" \"),t(\"p\",[n._v(\"我们可以让 Top 和 Bottom 都跟着动起来。\")]),n._v(\" \"),t(\"p\",[n._v('还记得刚刚写过的 \"normal\" 的钩子类吗？我们利用贝塞尔动画曲线给它们一个过渡。')]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"//normalPlayer/style.js\\n//NormalPlayerContainer 样式组件下\\n&.normal-enter,\\n&.normal-exit-done {\\n  .top {\\n    transform: translate3d (0, -100px, 0);\\n  }\\n  .bottom {\\n    transform: translate3d (0, 100px, 0);\\n  }\\n}\\n&.normal-enter-active,\\n&.normal-exit-active {\\n  .top,\\n  .bottom {\\n    transform: translate3d (0, 0, 0);\\n    transition: all 0.4s cubic-bezier (0.86, 0.18, 0.82, 1.32);\\n  }\\n  opacity: 1;\\n  transition: all 0.4s;\\n}\\n&.normal-exit-active {\\n  opacity: 0;\\n}\\n\\n\")])])]),t(\"p\",[n._v(\"仔细观察，Top 和 Bottom 部分出现的相应的过渡，可以发现现在的效果较之前是更加灵动的:\")]),n._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/10/26/16e0800ac63ce804?w=372&h=660&f=gif&s=2700450\",alt:\"\"}})]),n._v(\" \"),t(\"h2\",{attrs:{id:\"出场动画\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#出场动画\"}},[n._v(\"#\")]),n._v(\" 出场动画\")]),n._v(\" \"),t(\"p\",[n._v(\"首先声明一下，我们实现的出场动画是基于 transform 属性的，但是 transform 在不同的浏览器厂商会有不同的前缀，这个问题在 CSS 中可以用 postcss 等工具来解决，但是 JS 中我们现在只有自己来处理了。\")]),n._v(\" \"),t(\"p\",[n._v(\"在 api/utils.js 中添加:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('// 给 css3 相关属性增加浏览器前缀，处理浏览器兼容性问题\\nlet elementStyle = document.createElement (\"div\").style;\\n\\nlet vendor = (() => {\\n  // 首先通过 transition 属性判断是何种浏览器\\n  let transformNames = {\\n    webkit: \"webkitTransform\",\\n    Moz: \"MozTransform\",\\n    O: \"OTransfrom\",\\n    ms: \"msTransform\",\\n    standard: \"Transform\"\\n  };\\n  for (let key in transformNames) {\\n    if (elementStyle [transformNames [key]] !== undefined) {\\n      return key;\\n    }\\n  }\\n  return false;\\n})();\\n\\nexport function prefixStyle (style) {\\n  if (vendor === false) {\\n    return false;\\n  }\\n  if (vendor === \"standard\") {\\n    return style;\\n  }\\n  return vendor + style.charAt (0).toUpperCase () + style.substr (1);\\n}\\n\\n')])])]),t(\"p\",[n._v(\"然后在 normalPlayer/index.js 中引入 prefixStyle 方法。\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('import { prefixStyle } from \"../../../api/utils\";\\n\\n// 组件代码中加入\\nconst transform = prefixStyle (\"transform\");\\n\\n')])])]),t(\"p\",[n._v(\"接下来写离开动画的逻辑:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('const leave = () => {\\n  if (!cdWrapperRef.current) return;\\n  const cdWrapperDom = cdWrapperRef.current;\\n  cdWrapperDom.style.transition = \"all 0.4s\";\\n  const { x, y, scale } = _getPosAndScale ();\\n  cdWrapperDom.style [transform] = `translate3d (${x} px, ${y} px, 0) scale (${scale})`;\\n};\\n\\nconst afterLeave = () => {\\n  if (!cdWrapperRef.current) return;\\n  const cdWrapperDom = cdWrapperRef.current;\\n  cdWrapperDom.style.transition = \"\";\\n  cdWrapperDom.style [transform] = \"\";\\n  // 一定要注意现在要把 normalPlayer 这个 DOM 给隐藏掉，因为 CSSTransition 的工作只是把动画执行一遍 \\n  // 不置为 none 现在全屏播放器页面还是存在\\n  normalPlayerRef.current.style.display = \"none\";\\n};\\n\\n')])])]),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/10/26/16e0800fb44c5345?w=372&h=660&f=gif&s=4348825\",alt:\"\"}})]),n._v(\" \"),t(\"p\",[n._v(\"OK, 至此我们的进场和出场动画就开发完成了！是不是 get 到很多新姿势呢：）\")])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}