{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[272],{628:function(r,e,a){\"use strict\";a.r(e);var s=a(42),t=Object(s.a)({},(function(){var r=this,e=r.$createElement,a=r._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":r.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"权限验证装饰器代码编写与使用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#权限验证装饰器代码编写与使用\"}},[r._v(\"#\")]),r._v(\" 权限验证装饰器代码编写与使用\")]),r._v(\" \"),a(\"p\",[r._v(\"Scrapyd 没有提供访问权限控制功能，意味着只要你的 Scrapyd 服务暴露在公网，那么任何人都可以调度你的爬虫并且可以肆意妄为的对它们进行增删改查，就问你怕不怕？\")]),r._v(\" \"),a(\"h2\",{attrs:{id:\"什么-别人居然能够操控我的爬虫\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么-别人居然能够操控我的爬虫\"}},[r._v(\"#\")]),r._v(\" 什么？别人居然能够操控我的爬虫！\")]),r._v(\" \"),a(\"p\",[r._v(\"当你的爬虫部署到服务器，尤其是云服务器之后，Scrapyd 会接收外界所有人的指令，在它的世界里，没有 Admin。\")]),r._v(\" \"),a(\"p\",[r._v(\"假设你的云服务器 IP 地址为 \"),a(\"code\",[r._v(\"192.168.0.5\")]),r._v(\"，那么只要别人能够访问这个地址，他就可以通过 Scrapyd 的 Web 服务或者 API 来操控你的爬虫。比如直接打开\"),a(\"code\",[r._v(\"192.168.0.5:6800\")]),r._v(\"来查看你的项目，甚至通过命令来调度你的爬虫:\")]),r._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[r._v(\"# 启动指定的爬虫\\n192.168.0.5:6800/schedule.json -d project=myproject -d spider=somespider \\n\\n\")])])]),a(\"p\",[r._v(\"这是由于 Scrapyd 并未提供访问权限控制的功能，所以在它的世界里，人人都是 Admin。\")]),r._v(\" \"),a(\"h2\",{attrs:{id:\"我们如何才能避免爬虫被操控\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#我们如何才能避免爬虫被操控\"}},[r._v(\"#\")]),r._v(\" 我们如何才能避免爬虫被操控？\")]),r._v(\" \"),a(\"p\",[r._v(\"别人能够查看你的爬虫运行信息已经是很危险的一件事了，更何况他可以对你的爬虫进行任意的操作，这当然是万万不可的。在原来的基础上改动，还要保持原来的引用不变，最合适的莫过于装饰器了。\")]),r._v(\" \"),a(\"p\",[r._v(\"装饰器在访问权限控制方面，起到什么样的作用呢？\")]),r._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/10/24/166a5038a12b9176?w=816&h=528&f=png&s=18802\",alt:\"\"}})]),r._v(\" \"),a(\"p\",[r._v(\"如上图所示，权限验证装饰器在用户与资源之间完成了一个验证的逻辑，只有通过验证的请求才能够得到正常的响应，从而拿到资源，否则将会得到类似于\"),a(\"strong\",[r._v(\"未取得授权\")]),r._v(\"的提示。\")]),r._v(\" \"),a(\"h2\",{attrs:{id:\"装饰器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#装饰器\"}},[r._v(\"#\")]),r._v(\" 装饰器\")]),r._v(\" \"),a(\"p\",[r._v(\"假如有一个正在使用的程序，由于业务的需求，其中有几个方法需要增加新的功能。此时由于程序已经被使用，所以直接改动原方法的做法是不被推荐的，我们应当避免因改动原方法而造成程序异常，这时候\"),a(\"strong\",[r._v(\"装饰器\")]),r._v(\"就派上了用场。\")]),r._v(\" \"),a(\"p\",[r._v(\"假设现在有一个函数\")]),r._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[r._v(\"def now():\\n    print('2018-10-12')\\n\\n\")])])]),a(\"p\",[r._v(\"它的功能是打印输出时间字符串，如果我们要增强 now() 函数的功能，比如在函数调用前后自动打印状态，但又不希望修改 now() 函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）\")]),r._v(\" \"),a(\"p\",[r._v(\"我们要定义一个能打印状态的装饰器，示例代码如下：\")]),r._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[r._v('def status(func):\\n    def wrapper(*args, **kw):\\n        # 在此处操作逻辑\\n        print({\"status\": ok})\\n        return func(*args, **kw)\\n    return wrapper\\n\\n')])])]),a(\"p\",[r._v(\"它的本质就是一个返回函数的高阶函数，它接收一个函数作为参数，并返回一个函数。我们要借助 Python 的\"),a(\"code\",[r._v(\"@\")]),r._v(\"语法，把 decorator 置于函数的定义处：\")]),r._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[r._v(\"@status\\ndef now():\\n    print('2018-10-12')\\n\\n\")])])]),a(\"p\",[r._v(\"以上的示例通过装饰器达到了不改动原方法代码以实现状态打印的目的。\")]),r._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/10/13/1666c21b45665303?w=652&h=800&f=jpeg&s=40092\",alt:\"\"}})]),r._v(\" \"),a(\"p\",[r._v(\"通过上面的小例子，相信大家已经对装饰器的原理有了一定的了解，就让我们来动手实践一下，编写这个权限验证装饰器吧。\")]),r._v(\" \"),a(\"h2\",{attrs:{id:\"权限验证装饰器实现逻辑\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#权限验证装饰器实现逻辑\"}},[r._v(\"#\")]),r._v(\" 权限验证装饰器实现逻辑\")]),r._v(\" \"),a(\"p\",[r._v(\"根据之前对 Scrapyd 源码的阅读与调试，已知：\")]),r._v(\" \"),a(\"ul\",[a(\"li\",[r._v(\"数据都会通过 render 方法进行渲染，所以我们可以将写好的装饰器加在需要权限验证的视图 render 上；\")]),r._v(\" \"),a(\"li\",[r._v(\"并且之前已经编写好兼容 HTML 与 JSON 的视图类，所以装饰器返回 HTML 或 JSON 都是没有问题的；\")]),r._v(\" \"),a(\"li\",[r._v(\"装饰器中只要实现读取预设的用户名、密码，并且对请求时传递的用户名、密码进行校验，根据校验结果返回正确数据或错误提示即可；\")])]),r._v(\" \"),a(\"p\",[r._v(\"Scrapyd 原来的请求流程如下图：\")]),r._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/10/13/1666c46a8d7fc698?w=1410&h=649&f=png&s=22871\",alt:\"\"}})]),r._v(\" \"),a(\"p\",[r._v(\"加上权限验证装饰器后的请求流程如下图：\")]),r._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/10/13/1666c427d4ef9f28?w=1342&h=649&f=png&s=33783\",alt:\"\"}})]),r._v(\" \"),a(\"h2\",{attrs:{id:\"编写权限验证装饰器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编写权限验证装饰器\"}},[r._v(\"#\")]),r._v(\" 编写权限验证装饰器\")]),r._v(\" \"),a(\"p\",[r._v(\"在 Scrapyd 目录内新建名为\"),a(\"code\",[r._v(\"auth.py\")]),r._v(\"的文件，由于要到指定目录内读取后缀为\"),a(\"code\",[r._v(\".conf\")]),r._v(\"的配置文件，所以这里需要用到\"),a(\"code\",[r._v(\"configparser\")]),r._v(\"与\"),a(\"code\",[r._v(\"os\")]),r._v(\":\")]),r._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[r._v(\"import configparser\\nimport os\\n\\n\")])])]),a(\"p\",[r._v('然后我们先编写一个装饰器的\"架子\"：')]),r._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[r._v(\"import configparser\\nimport os\\n\\n\\ndef decorator_auth(func):\\n    def wrapper(*args, **kw):\\n        # 在此处操作逻辑\\n        \\n        return func(*args, **kw)\\n    return wrapper\\n\\n\")])])]),a(\"p\",[r._v('接着在装饰器\"架子\"中完成配置文件的读取：')]),r._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[r._v('import configparser\\nimport os\\nimport logging\\n\\n\\ncps = configparser.ConfigParser()\\n\\ndef decorator_auth(func):\\n    def wrapper(*args, **kw):\\n        try:\\n            # 尝试从指定路径的配置文件中读取[scrapyd]级配置中的用户名和密码的值\\n            cps.read(os.path.dirname(__file__) + \"/default_scrapyd.conf\")\\n            auth_username, auth_password = cps.get(\"scrapyd\", \"auth_username\"), cps.get(\"scrapydart\", \"auth_password\")\\n        except Exception as err:\\n            logging.info(err)\\n            auth_username = auth_password = None\\n        return func(*args, **kw)\\n    return wrapper\\n\\n')])])]),a(\"p\",[r._v(\"考虑到与原 Scrapyd 的兼容性、降低使用者新老平台的切换成本，新的 Scrapyd 应该默认不启用权限验证，如果需要启用则在配置中填写用户米及密码，如果不启用则无需填写配置。所以在这里读取不到配置中的用户名及密码值则视为不启用权限验证，可以将方法 return：\")]),r._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[r._v('import configparser\\nimport os\\n\\n\\ncps = configparser.ConfigParser()\\n\\ndef decorator_auth(func):\\n    def wrapper(*args, **kw):\\n        try:\\n            # 尝试从指定路径的配置文件中读取[scrapyd]级配置中的用户名和密码的值\\n            cps.read(os.path.dirname(__file__) + \"/default_scrapyd.conf\")\\n            auth_username, auth_password = cps.get(\"scrapyd\", \"auth_username\"), cps.get(\"scrapydart\", \"auth_password\")\\n        except Exception as err:\\n            logging.info(err)\\n            auth_username = auth_password = None\\n        if not auth_username or not auth_password:\\n            # 如配置中无用户名、密码则视为不启用权限，直接返回\\n            return func(*args, **kwargs)\\n        return func(*args, **kw)\\n    return wrapper\\n\\n')])])]),a(\"p\",[r._v(\"接着就需要获取用户网络请求时携带的参数并且与配置文件中的值进行比对：\")]),r._v(\" \"),a(\"ul\",[a(\"li\",[r._v(\"比对通过-进入下一个流程\")]),r._v(\" \"),a(\"li\",[r._v(\"比对失败-给出友好的错误提示(JSON)\")])]),r._v(\" \"),a(\"p\",[r._v(\"为了简化参数，这里以 \"),a(\"code\",[r._v(\"un\")]),r._v(\" 代替 \"),a(\"code\",[r._v(\"auth_username\")]),r._v(\"、以 \"),a(\"code\",[r._v(\"pwd\")]),r._v(\" 代替 \"),a(\"code\",[r._v(\"auth_password\")]),r._v(\":\")]),r._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[r._v('import configparser\\nimport os\\n\\n\\ncps = configparser.ConfigParser()\\n\\ndef decorator_auth(func):\\n    \"\"\" 权限验证装饰器\\n    先获取请求方式 method 再根据请求方式取出用户名和密码并进行类型转换\\n    读取默认配置并对提交过来的信息进行比对\\n    \"\"\"\\n    def wrapper(*args, **kwargs):\\n        request = args[1]\\n        un, pwd = \"un\", \"pwd\"\\n        try:\\n            cps.read(os.path.dirname(__file__) + \"/default_scrapyd.conf\")\\n            auth_username, auth_password = cps.get(\"scrapydart\", \"auth_username\"), cps.get(\"scrapydart\", \"auth_password\")\\n        except Exception as err:\\n            logging.info(err)\\n            auth_username = auth_password = None\\n        if not auth_username or not auth_password:\\n            return func(*args, **kwargs)\\n        if request.args.get(bytes(un, encoding=\"utf8\")) and request.args.get(bytes(pwd, encoding=\"utf8\")):\\n            username = str(request.args.get(bytes(un, encoding=\"utf8\"))[0], encoding=\"utf8\")\\n            password = str(request.args.get(bytes(pwd, encoding=\"utf8\"))[0], encoding=\"utf8\")\\n            if username == auth_username and password == auth_password:\\n                return func(*args, **kwargs)\\n            return {\"status\": \"error\", \"message\": \"username or password you entered is incorrect. Please re request\"}\\n        else:\\n            return {\"status\": \"error\", \"message\": \"You have not obtained the authorization.\"}\\n        return {\"status\": \"error\", \"message\": \"Method Not Allowed\"}\\nreturn wrapper\\n\\n')])])]),a(\"p\",[r._v(\"这样就完成了整个访问权限限制的装饰器代码编写。\")]),r._v(\" \"),a(\"h2\",{attrs:{id:\"权限验证装饰器的使用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#权限验证装饰器的使用\"}},[r._v(\"#\")]),r._v(\" 权限验证装饰器的使用\")]),r._v(\" \"),a(\"p\",[r._v(\"先在众多视图中挑一个来进行测试，看看是否能够成功校验，于是笔者愉快的选择了 Home 类，测试步骤为：\")]),r._v(\" \"),a(\"ul\",[a(\"li\",[r._v(\"先在配置文件中增加这两个字段与值。\")]),r._v(\" \"),a(\"li\",[r._v(\"到 website.py 中将 Home 类的父类改为之前编写的\"),a(\"code\",[r._v(\"CustomResource\")]),r._v(\"。\")]),r._v(\" \"),a(\"li\",[r._v(\"在 Home 类中的 \"),a(\"code\",[r._v(\"render_GET\")]),r._v(\" 方法前加上刚才编写的装饰器\"),a(\"code\",[r._v(\"decorator_auth\")]),r._v(\"。\")]),r._v(\" \"),a(\"li\",[r._v(\"保存后运行，打开浏览器进行验证。\")])]),r._v(\" \"),a(\"p\",[r._v(\"用代码表示：\")]),r._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[r._v(\"# website.py\\nfrom .auth import decorator_auth\\nfrom .webservice import CustomResource\\n\\nclass Home(CustomResource):\\n\\n    def __init__(self, root, local_items):\\n        resource.Resource.__init__(self)\\n        self.root = root\\n        self.local_items = local_items\\n\\n    @decorator_auth\\n    def render_GET(self, request):\\n        ... \\n            ...\\n        return self.content\\n\\n\")])])]),a(\"p\",[r._v(\"既然是测试，我们就需要对多种情况进行模拟，比如输入不正确的用户名和密码 (假设刚才在配置文件中设置的auth_username=qu,auth_password=qus7):\")]),r._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[r._v(\"http//localhost:6800?un=qu&pwd=qus8\\n\\n\")])])]),a(\"p\",[r._v(\"回车后看看是否能够返回正常的首页页面。\")]),r._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/10/17/1667fb4cbb774376?w=1110&h=574&f=png&s=47657\",alt:\"\"}})]),r._v(\" \"),a(\"p\",[r._v(\"结果能够正常返回页面，还有以下情况均需要测试：\")]),r._v(\" \"),a(\"ul\",[a(\"li\",[r._v(\"不输入用户名密码\")]),r._v(\" \"),a(\"li\",[r._v(\"只输入用户名不输入密码\")]),r._v(\" \"),a(\"li\",[r._v(\"不输入用户名只输入密码\")]),r._v(\" \"),a(\"li\",[r._v(\"输入错误的用户名和密码\")])]),r._v(\" \"),a(\"p\",[r._v(\"只要校验失败，都能够返回对应的错误提示信息：\")]),r._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/10/17/1667fb9d43dec763?w=1289&h=372&f=gif&s=384119\",alt:\"\"}})]),r._v(\" \"),a(\"h2\",{attrs:{id:\"再谈-customresource\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#再谈-customresource\"}},[r._v(\"#\")]),r._v(\" 再谈 CustomResource\")]),r._v(\" \"),a(\"p\",[r._v(\"到这里再回头来看 CustomResource，装饰器可以应用在 HTML 视图与 JSON 视图上，并且根据用户的请求返回对应的视图。假如 Home 的父类不是 CustomResource，而是原来的 resource.Resource，那么当校验失败，返回 JSON 格式的错误提示时，render 就会无法渲染，导致首页异常。\")]),r._v(\" \"),a(\"p\",[r._v(\"所以，要通过装饰器的方式实现访问权限控制，CustomResource 是必不可少的。\")])])}),[],!1,null,null,null);e.default=t.exports}}]);","extractedComments":[]}