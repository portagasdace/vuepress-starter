{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[406],{759:function(t,a,e){\"use strict\";e.r(a);var v=e(42),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"一面-3-css-html-知识点与高频考题解析\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一面-3-css-html-知识点与高频考题解析\"}},[t._v(\"#\")]),t._v(\" 一面 3：CSS-HTML 知识点与高频考题解析\")]),t._v(\" \"),e(\"p\",[t._v(\"CSS 和 HTML 是网页开发中布局相关的组成部分，涉及的内容比较多和杂乱，本小节重点介绍下常考的知识点。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"知识点梳理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#知识点梳理\"}},[t._v(\"#\")]),t._v(\" 知识点梳理\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"选择器的权重和优先级\")]),t._v(\" \"),e(\"li\",[t._v(\"盒模型\\n\"),e(\"ul\",[e(\"li\",[t._v(\"盒子大小计算\")]),t._v(\" \"),e(\"li\",[t._v(\"margin 的重叠计算\")])])]),t._v(\" \"),e(\"li\",[t._v(\"浮动\"),e(\"code\",[t._v(\"float\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"浮动布局概念\")]),t._v(\" \"),e(\"li\",[t._v(\"清理浮动\")])])]),t._v(\" \"),e(\"li\",[t._v(\"定位\"),e(\"code\",[t._v(\"position\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"文档流概念\")]),t._v(\" \"),e(\"li\",[t._v(\"定位分类\")]),t._v(\" \"),e(\"li\",[t._v(\"fixed 定位特点\")]),t._v(\" \"),e(\"li\",[t._v(\"绝对定位计算方式\")])])]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"flex\")]),t._v(\"布局\")]),t._v(\" \"),e(\"li\",[t._v(\"如何实现居中对齐？\")]),t._v(\" \"),e(\"li\",[t._v(\"理解语义化\")]),t._v(\" \"),e(\"li\",[t._v(\"CSS3 动画\")]),t._v(\" \"),e(\"li\",[t._v(\"重绘和回流\")])]),t._v(\" \"),e(\"hr\"),t._v(\" \"),e(\"h2\",{attrs:{id:\"选择器的权重和优先级\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#选择器的权重和优先级\"}},[t._v(\"#\")]),t._v(\" 选择器的权重和优先级\")]),t._v(\" \"),e(\"p\",[t._v(\"CSS 选择器有很多，不同的选择器的权重和优先级不一样，对于一个元素，如果存在多个选择器，那么就需要根据权重来计算其优先级。\")]),t._v(\" \"),e(\"p\",[t._v(\"权重分为四级，分别是：\")]),t._v(\" \"),e(\"ol\",[e(\"li\",[t._v(\"代表内联样式，如\"),e(\"code\",[t._v('style=\"xxx\"')]),t._v(\"，权值为 1000；\")]),t._v(\" \"),e(\"li\",[t._v(\"代表 ID 选择器，如\"),e(\"code\",[t._v(\"#content\")]),t._v(\"，权值为 100；\")]),t._v(\" \"),e(\"li\",[t._v(\"代表类、伪类和属性选择器，如\"),e(\"code\",[t._v(\".content\")]),t._v(\"、\"),e(\"code\",[t._v(\":hover\")]),t._v(\"、\"),e(\"code\",[t._v(\"[attribute]\")]),t._v(\"，权值为 10；\")]),t._v(\" \"),e(\"li\",[t._v(\"代表元素选择器和伪元素选择器，如\"),e(\"code\",[t._v(\"div\")]),t._v(\"、\"),e(\"code\",[t._v(\"p\")]),t._v(\"，权值为 1。\")])]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"需要注意的是：通用选择器（*）、子选择器（>）和相邻同胞选择器（+）并不在这四个等级中，所以他们的权值都为 0\")]),t._v(\"。 权重值大的选择器其优先级也高，相同权重的优先级又遵循后定义覆盖前面定义的情况。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"盒模型\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#盒模型\"}},[t._v(\"#\")]),t._v(\" 盒模型\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"什么是-盒子\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是-盒子\"}},[t._v(\"#\")]),t._v(\" 什么是“盒子”\")]),t._v(\" \"),e(\"p\",[t._v(\"初学 CSS 的朋友，一开始学 CSS 基础知识的时候一定学过\"),e(\"code\",[t._v(\"padding\")]),t._v(\" \"),e(\"code\",[t._v(\"border\")]),t._v(\"和\"),e(\"code\",[t._v(\"margin\")]),t._v(\"，即内边距、边框和外边距。它们三者就构成了一个“盒子”。就像我们收到的快递，本来买了一部小小的手机，收到的却是那么大一个盒子。因为手机白色的包装盒和手机机器之间有间隔层（内边距），手机白色盒子有厚度，虽然很薄（边框），盒子和快递箱子之间还有一层泡沫板（外边距）。这就是一个典型的盒子。\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c106628765b93?w=255&h=146&f=png&s=5774\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"如上图，真正的内容就是这些文字，文字外围有 10px 的内边距，5px 的边框，10px 的外边距。看到盒子了吧？\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"题目：盒子模型的宽度如何计算\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"固定宽度的盒子\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#固定宽度的盒子\"}},[t._v(\"#\")]),t._v(\" 固定宽度的盒子\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<div style=\"padding:10px; border:5px solid blue; margin: 10px; width:300px;\">\\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\\n    文章言简意赅的介绍的浏览器的工作过程，web前端\\n</div>\\n\\n')])])]),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f616b1aa63?w=832&h=228&f=png&s=34678\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"如上图，得到网页效果之后，我们可以用截图工具来量一下文字内容的宽度。发现，文字内容的宽度刚好是 300px，也就是我们设置的宽度。\")]),t._v(\" \"),e(\"p\",[t._v(\"因此，\"),e(\"strong\",[t._v(\"在盒子模型中，我们设置的宽度都是内容宽度，不是整个盒子的宽度。而整个盒子的宽度是：（内容宽度 + \"),e(\"code\",[t._v(\"border\")]),t._v(\"宽度 + \"),e(\"code\",[t._v(\"padding\")]),t._v(\"宽度 + \"),e(\"code\",[t._v(\"margin\")]),t._v(\"宽度）之和\")]),t._v(\"。这样我们改四个中的其中一个，都会导致盒子宽度的改变。这对我们来说不友好。\")]),t._v(\" \"),e(\"p\",[t._v(\"没关系，这个东西不友好早就有人发现了，而且已经解决，下文再说。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"充满父容器的盒子\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#充满父容器的盒子\"}},[t._v(\"#\")]),t._v(\" 充满父容器的盒子\")]),t._v(\" \"),e(\"p\",[t._v(\"默认情况下，\"),e(\"code\",[t._v(\"div\")]),t._v(\"是\"),e(\"code\",[t._v(\"display:block\")]),t._v(\"，宽度会充满整个父容器。如下图：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<div style=\"padding:10px; border:5px solid blue; margin: 10px; width:300px;\">\\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\\n    文章言简意赅的介绍的浏览器的工作过程，web前端\\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\\n    文章言简意赅的介绍的浏览器的工作过程，web前端\\n</div>\\n\\n')])])]),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f616fe21e3?w=1384&h=230&f=png&s=49446\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"但是别忘记，这个 div 是个盒子模型，它的整个宽度包括（内容宽度 + \"),e(\"code\",[t._v(\"border\")]),t._v(\"宽度 + \"),e(\"code\",[t._v(\"padding\")]),t._v(\"宽度 + \"),e(\"code\",[t._v(\"margin\")]),t._v(\"宽度），整个的宽度充满父容器。\")]),t._v(\" \"),e(\"p\",[t._v(\"问题就在这里。如果父容器宽度不变，我们手动增大\"),e(\"code\",[t._v(\"margin\")]),t._v(\"、\"),e(\"code\",[t._v(\"border\")]),t._v(\"或\"),e(\"code\",[t._v(\"padding\")]),t._v(\"其中一项的宽度值，都会导致内容宽度的减少。极端情况下，如果内容的宽度压缩到不能再压缩了（例如一个字的宽度），那么浏览器会强迫增加父容器的宽度。这可不是我们想要看到的。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"包裹内容的盒子\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#包裹内容的盒子\"}},[t._v(\"#\")]),t._v(\" 包裹内容的盒子\")]),t._v(\" \"),e(\"p\",[t._v(\"这种情况下比较简单，内容的宽度按照内容计算，盒子的宽度将在内容宽度的基础上再增加（\"),e(\"code\",[t._v(\"padding\")]),t._v(\"宽度 + \"),e(\"code\",[t._v(\"border\")]),t._v(\"宽度 + \"),e(\"code\",[t._v(\"margin\")]),t._v(\"宽度）之和。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<div style=\"padding:10px; border:5px solid blue; margin: 10px; width:300px;\">\\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》\\n</div>\\n\\n')])])]),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f61768fdde?w=1384&h=172&f=png&s=21314\",alt:\"\"}})]),t._v(\" \"),e(\"h3\",{attrs:{id:\"box-sizing-border-box\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#box-sizing-border-box\"}},[t._v(\"#\")]),t._v(\" \"),e(\"code\",[t._v(\"box-sizing:border-box\")])]),t._v(\" \"),e(\"p\",[t._v(\"前面提到，为盒子模型设置宽度，结果只是设置了内容的宽度，这个不合理。如何解决这一问题？答案就是为盒子指定样式：\"),e(\"strong\",[e(\"code\",[t._v(\"box-sizing:border-box\")])]),t._v(\"。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<div style=\"padding:10px; border:5px solid blue; margin: 10px; width:300px; box-sizing:border-box;\">\\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》\\n</div>\\n\\n')])])]),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f617aff82e?w=798&h=524&f=png&s=88750\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"上图中，为\"),e(\"code\",[t._v(\"div\")]),t._v(\"设置了\"),e(\"code\",[t._v(\"box-sizing:border-box\")]),t._v(\"之后，300px 的\"),e(\"strong\",[t._v(\"宽度是内容 + \"),e(\"code\",[t._v(\"padding\")]),t._v(\" + 边框的宽度（不包括\"),e(\"code\",[t._v(\"margin\")]),t._v(\"）\")]),t._v(\"，这样就比较符合我们的实际要求了。建议大家在为系统写 CSS 时候，第一个样式是：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"* {\\n    box-sizing:border-box;\\n}\\n\\n\")])])]),e(\"p\",[t._v(\"大名鼎鼎的 Bootstrap 也把\"),e(\"code\",[t._v(\"box-sizing:border-box\")]),t._v(\"加入到它的\"),e(\"code\",[t._v(\"*\")]),t._v(\"选择器中，我们为什么不这样做呢？\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"纵向-margin-重叠\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#纵向-margin-重叠\"}},[t._v(\"#\")]),t._v(\" 纵向 margin 重叠\")]),t._v(\" \"),e(\"p\",[t._v(\"这里提到 margin，就不得不提一下 margin 的这一特性——纵向重叠。如\"),e(\"code\",[t._v(\"<p>\")]),t._v(\"的纵向 margin 是 16px，那么两个\"),e(\"code\",[t._v(\"<p>\")]),t._v(\"之间纵向的距离是多少？—— 按常理来说应该是 16 + 16 = 32px，但是答案仍然是 16px。因为纵向的 margin 是会重叠的，如果两者不一样大的话，大的会把小的“吃掉”。\")]),t._v(\" \"),e(\"hr\"),t._v(\" \"),e(\"h2\",{attrs:{id:\"浮动float\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#浮动float\"}},[t._v(\"#\")]),t._v(\" 浮动\"),e(\"code\",[t._v(\"float\")])]),t._v(\" \"),e(\"p\",[t._v(\"float 用于网页布局比较多，使用起来也比较简单，这里总结了一些比较重要、需要注意的知识点，供大家参考。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"误解和误用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#误解和误用\"}},[t._v(\"#\")]),t._v(\" 误解和误用\")]),t._v(\" \"),e(\"p\",[t._v(\"float 被设计出来的初衷是用于\"),e(\"strong\",[t._v(\"文字环绕效果\")]),t._v(\"，即一个图片一段文字，图片\"),e(\"code\",[t._v(\"float:left\")]),t._v(\"之后，文字会环绕图片。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<div>\\n    <img src=\"image/1.png\" style=\"float:left\">\\n    一段文字一段文字一段文字一段文字一段文字一段文字一段文字一段文字一段文字\\n</div>\\n\\n')])])]),e(\"p\",[t._v(\"但是，后来大家发现结合\"),e(\"code\",[t._v(\"float + div\")]),t._v(\"可以实现之前通过\"),e(\"code\",[t._v(\"table\")]),t._v(\"实现的网页布局，因此就被“误用”于网页布局了。\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"题目：为何 float 会导致父元素塌陷？\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"破坏性\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#破坏性\"}},[t._v(\"#\")]),t._v(\" 破坏性\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c106660020bd4?w=1024&h=224&f=png&s=73435\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"float 的\"),e(\"strong\",[t._v(\"破坏性\")]),t._v(\" —— float 破坏了父标签的原本结构，使得父标签出现了坍塌现象。导致这一现象的最根本原因在于：\"),e(\"strong\",[t._v(\"被设置了 float 的元素会脱离文档流\")]),t._v(\"。其根本原因在于 float 的设计初衷是解决文字环绕图片的问题。大家要记住 float 的这个影响。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"包裹性\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#包裹性\"}},[t._v(\"#\")]),t._v(\" 包裹性\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"包裹性\")]),t._v(\"也是 float 的一个非常重要的特性，大家用 float 时一定要熟知这一特性。咱们还是先从一个小例子看起：\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f617bc8f2e?w=1310&h=180&f=png&s=15396\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"如上图，普通的 div 如果没有设置宽度，它会撑满整个屏幕，在之前的盒子模型那一节也讲到过。而如果给 div 增加\"),e(\"code\",[t._v(\"float:left\")]),t._v(\"之后，它突然变得紧凑了，宽度发生了变化，把内容中的三个字包裹了——这就是包裹性。为 div 设置了 float 之后，其宽度会自动调整为包裹住内容宽度，而不是撑满整个父容器。\")]),t._v(\" \"),e(\"p\",[t._v(\"注意，此时 div 虽然体现了包裹性，但是它的 display 样式是没有变化的，还是\"),e(\"code\",[t._v(\"display: block\")]),t._v(\"。\")]),t._v(\" \"),e(\"p\",[t._v(\"float 为什么要具有包裹性？其实答案还是得从 float 的设计初衷来寻找，float 是被设计用于实现文字环绕效果的。文字环绕图片比较好理解，但是如果想要让文字环绕一个 div 呢？此时 div 不被“包裹”起来的话，就无法实现环绕效果了。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"清空格\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#清空格\"}},[t._v(\"#\")]),t._v(\" 清空格\")]),t._v(\" \"),e(\"p\",[t._v(\"float 还有一个大家可能不是很熟悉的特性——清空格。按照惯例，咱还是先举例子说明。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<div style=\"border: 2px solid blue; padding:3px;\">\\n    <img src=\"image/1.png\"/>\\n    <img src=\"image/2.png\"/>\\n    <img src=\"image/3.png\"/>\\n    <img src=\"image/4.png\"/>\\n</div>\\n\\n')])])]),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f617bf4874?w=1376&h=148&f=png&s=71295\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"加上\"),e(\"code\",[t._v(\"float:left\")]),t._v(\"之后：\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f644302e40?w=1376&h=132&f=png&s=70562\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"上面第一张图中，正常的 img 中间是会有空格的，因为多个 img 标签会有换行，而浏览器识别换行为空格，这也是很正常的。第二张图中，为 img 增加了\"),e(\"code\",[t._v(\"float:left\")]),t._v(\"的样式，这就使得 img 之间没有了空格，4 个 img 紧紧挨着。\")]),t._v(\" \"),e(\"p\",[t._v(\"如果大家之前没注意，现在想想之前写过的程序，是不是有这个特性。为什么 float 适合用于网页排版（俗称“砌砖头”）？就是因为 float 排版出来的网页严丝合缝，中间连个苍蝇都飞不进去。\")]),t._v(\" \"),e(\"p\",[t._v(\"“清空格”这一特性的根本原因是 float 会导致节点脱离文档流结构。它都不属于文档流结构了，那么它身边的什么换行、空格就都和它没了关系，它就尽量往一边靠拢，能靠多近就靠多近，这就是清空格的本质。\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"题目：手写 clearfix\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"clearfix\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#clearfix\"}},[t._v(\"#\")]),t._v(\" \"),e(\"code\",[t._v(\"clearfix\")])]),t._v(\" \"),e(\"p\",[t._v(\"清除浮动的影响，一般使用的样式如下，统称\"),e(\"code\",[t._v(\"clearfix\")]),t._v(\"代码。所有 float 元素的父容器，一般情况下都应该加\"),e(\"code\",[t._v(\"clearfix\")]),t._v(\"这个 class。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".clearfix:after {\\n    content: '';\\n    display: table;\\n    clear: both;\\n}\\n.clearfix {\\n    *zoom: 1; /* 兼容 IE 低版本 */\\n}\\n\\n\")])])]),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<div class=\"clearfix\">\\n    <img src=\"image/1.png\" style=\"float: left\"/>\\n    <img src=\"image/2.png\" style=\"float: left\"/>\\n</div>\\n\\n')])])]),e(\"h3\",{attrs:{id:\"小结\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[t._v(\"#\")]),t._v(\" 小结\")]),t._v(\" \"),e(\"p\",[t._v(\"float 的设计初衷是解决文字环绕图片的问题，后来误打误撞用于做布局，因此有许多不合适或者需要注意的地方，上文基本都讲到了需要的知识点。如果是刚开始接触 float 的同学，学完上面的基础知识之后，还应该做一些练习实战一下 —— 经典的“圣杯布局”和“双飞翼布局”。这里就不再展开讲了，网上资料非常多，例如\"),e(\"a\",{attrs:{href:\"https://juejin.im/entry/5a8868cdf265da4e7e10c133?utm_source=gold_browser_extension\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"浅谈面试中常考的两种经典布局——圣杯与双飞翼\"),e(\"OutboundLink\")],1),t._v(\"（此文的最后两张图清晰地展示了这两种布局）。\")]),t._v(\" \"),e(\"hr\"),t._v(\" \"),e(\"h2\",{attrs:{id:\"定位position\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定位position\"}},[t._v(\"#\")]),t._v(\" 定位\"),e(\"code\",[t._v(\"position\")])]),t._v(\" \"),e(\"p\",[t._v(\"position 用于网页元素的定位，可设置 static/relative/absolute/fixed 这些值，其中 static 是默认值，不用介绍。\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"题目：relative 和 absolute 有何区别？\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"relative\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#relative\"}},[t._v(\"#\")]),t._v(\" relative\")]),t._v(\" \"),e(\"p\",[t._v(\"相对定位 relative 可以用一个例子很轻松地演示出来。例如我们写 4 个\"),e(\"code\",[t._v(\"<p>\")]),t._v(\"，出来的样子大家不用看也能知道。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"<p>第一段文字</p>\\n<p>第二段文字</p>\\n<p>第三段文字</p>\\n<p>第四段文字</p>\\n\\n\")])])]),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f645d10bf0?w=1280&h=382&f=png&s=33884\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"然后我们在第三个\"),e(\"code\",[t._v(\"<p>\")]),t._v(\"上面，加上\"),e(\"code\",[t._v(\"position:relative\")]),t._v(\"并且设置\"),e(\"code\",[t._v(\"left\")]),t._v(\"和\"),e(\"code\",[t._v(\"top\")]),t._v(\"值，看这个\"),e(\"code\",[t._v(\"<p>\")]),t._v(\"有什么变化。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<p>第一段文字</p>\\n<p>第二段文字</p>\\n<p style=\"position:relative; top: 10px; left: 10px\">第三段文字</p>\\n<p>第四段文字</p>\\n\\n')])])]),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f644cb137d?w=1288&h=382&f=png&s=33953\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"上图中，大家应该要识别出两个信息（相信大部分人会忽略第二个信息）\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"第三个\"),e(\"code\",[t._v(\"<p>\")]),t._v(\"发生了位置变化，分别向右向下移动了10px；\")]),t._v(\" \"),e(\"li\",[t._v(\"其他的三个\"),e(\"code\",[t._v(\"<p>\")]),t._v(\"位置没有发生变化，这一点也很重要。\")])]),t._v(\" \"),e(\"p\",[t._v(\"可见，\"),e(\"strong\",[t._v(\"relative 会导致自身位置的相对变化，而不会影响其他元素的位置、大小\")]),t._v(\"。这是 relative 的要点之一。还有第二个要点，就是 relative 产生一个新的定位上下文。下文有关于定位上下文的详细介绍，这里可以先通过一个例子来展示一下区别：\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066884e2378?w=1031&h=337&f=png&s=37425\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"注意看这两图的区别，下文将有解释。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"absolute\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#absolute\"}},[t._v(\"#\")]),t._v(\" absolute\")]),t._v(\" \"),e(\"p\",[t._v(\"还是先写一个基本的 demo。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<p>第一段文字</p>\\n<p>第二段文字</p>\\n<p style=\"background: yellow\">第三段文字</p>\\n<p>第四段文字</p>\\n\\n')])])]),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f64b045e56?w=1274&h=372&f=png&s=33793\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"然后，我们把第三个\"),e(\"code\",[t._v(\"<p>\")]),t._v(\"改为\"),e(\"code\",[t._v(\"position:absolute;\")]),t._v(\"，看看会发生什么变化。\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f64768cf3e?w=1276&h=304&f=png&s=30596\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"从上面的结果中，我们能看出几点信息：\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"absolute 元素脱离了文档结构。和 relative 不同，其他三个元素的位置重新排列了。只要元素会脱离文档结构，它就会产生破坏性，导致父元素坍塌。（此时你应该能立刻想起来，float 元素也会脱离文档结构。）\")]),t._v(\" \"),e(\"li\",[t._v(\"absolute 元素具有“包裹性”。之前\"),e(\"code\",[t._v(\"<p>\")]),t._v(\"的宽度是撑满整个屏幕的，而此时\"),e(\"code\",[t._v(\"<p>\")]),t._v(\"的宽度刚好是内容的宽度。\")]),t._v(\" \"),e(\"li\",[t._v(\"absolute 元素具有“跟随性”。虽然 absolute 元素脱离了文档结构，但是它的位置并没有发生变化，还是老老实实地呆在它原本的位置，因为我们此时没有设置 top、left 的值。\")]),t._v(\" \"),e(\"li\",[t._v(\"absolute 元素会悬浮在页面上方，会遮挡住下方的页面内容。\")])]),t._v(\" \"),e(\"p\",[t._v(\"最后，通过给 absolute元素设置 top、left 值，可自定义其内容，这个都是平时比较常用的了。这里需要注意的是，设置了 top、left 值时，元素是相对于最近的定位上下文来定位的，而不是相对于浏览器定位。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"fixed\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#fixed\"}},[t._v(\"#\")]),t._v(\" fixed\")]),t._v(\" \"),e(\"p\",[t._v(\"其实 fixed 和 absolute 是一样的，唯一的区别在于：absolute 元素是根据最近的定位上下文确定位置，而 fixed 根据 window （或者 iframe）确定位置。\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"题目：relative、absolute 和 fixed 分别依据谁来定位？\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"定位上下文\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定位上下文\"}},[t._v(\"#\")]),t._v(\" 定位上下文\")]),t._v(\" \"),e(\"p\",[t._v(\"relative 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066a5b83ae8?w=448&h=105&f=png&s=2459\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"fixed 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066ab856721?w=516&h=135&f=png&s=2570\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"absolute 的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了\"),e(\"code\",[t._v(\"position:relative/absolute/fixed\")]),t._v(\"的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066ad4ffc63?w=576&h=183&f=png&s=5209\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066b419cfe6?w=516&h=137&f=png&s=2659\",alt:\"\"}})]),t._v(\" \"),e(\"hr\"),t._v(\" \"),e(\"h2\",{attrs:{id:\"flex布局\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flex布局\"}},[t._v(\"#\")]),t._v(\" \"),e(\"code\",[t._v(\"flex\")]),t._v(\"布局\")]),t._v(\" \"),e(\"p\",[t._v(\"布局的传统解决方案基于盒子模型，依赖 \"),e(\"code\",[t._v(\"display\")]),t._v(\" 属性 + \"),e(\"code\",[t._v(\"position\")]),t._v(\" 属性 + \"),e(\"code\",[t._v(\"float\")]),t._v(\" 属性。它对于那些特殊布局非常不方便，比如，垂直居中（下文会专门讲解）就不容易实现。在目前主流的移动端页面中，使用 flex 布局能更好地完成需求，因此 flex 布局的知识是必须要掌握的。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"基本使用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#基本使用\"}},[t._v(\"#\")]),t._v(\" 基本使用\")]),t._v(\" \"),e(\"p\",[t._v(\"任何一个容器都可以使用 flex 布局，代码也很简单。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('<style type=\"text/css\">\\n    .container {\\n      display: flex;\\n    }\\n    .item {\\n        border: 1px solid #000;\\n        flex: 1;\\n    }\\n</style>\\n\\n<div class=\"container\">\\n    <div class=\"item\">aaa</div>\\n    <div class=\"item\" style=\"flex: 2\">bbb</div>\\n    <div class=\"item\">ccc</div>\\n    <div class=\"item\">ddd</div>\\n</div>\\n\\n')])])]),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066b5766be2?w=796&h=122&f=png&s=11605\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"注意，第三个\"),e(\"code\",[t._v(\"<div>\")]),t._v(\"的\"),e(\"code\",[t._v(\"flex: 2\")]),t._v(\"，其他的\"),e(\"code\",[t._v(\"<div>\")]),t._v(\"的\"),e(\"code\",[t._v(\"flex: 1\")]),t._v(\"，这样第二个\"),e(\"code\",[t._v(\"<div>\")]),t._v(\"的宽度就是其他的\"),e(\"code\",[t._v(\"<div>\")]),t._v(\"的两倍。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"设计原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#设计原理\"}},[t._v(\"#\")]),t._v(\" 设计原理\")]),t._v(\" \"),e(\"p\",[t._v(\"设置了\"),e(\"code\",[t._v(\"display: flex\")]),t._v(\"的元素，我们称为“容器”（flex container），其所有的子节点我们称为“成员”（flex item）。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start，结束位置叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066ba95ed28?w=1022&h=582&f=png&s=54081\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"将以上文字和图片结合起来，再详细看一遍，这样就能理解 flex 的设计原理，才能更好地实际使用。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"设置主轴的方向\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#设置主轴的方向\"}},[t._v(\"#\")]),t._v(\" 设置主轴的方向\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"flex-direction\")]),t._v(\"可决定主轴的方向，有四个可选值：\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"row（默认值）：主轴为水平方向，起点在左端。\")]),t._v(\" \"),e(\"li\",[t._v(\"row-reverse：主轴为水平方向，起点在右端。\")]),t._v(\" \"),e(\"li\",[t._v(\"column：主轴为垂直方向，起点在上沿。\")]),t._v(\" \"),e(\"li\",[t._v(\"column-reverse：主轴为垂直方向，起点在下沿。\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".box {\\n  flex-direction: column-reverse| column | row | row-reverse;\\n}\\n\\n\")])])]),e(\"p\",[t._v(\"以上代码设置的主轴方向，将依次对应下图：\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066cc8d122c?w=1898&h=418&f=png&s=39850\",alt:\"\"}})]),t._v(\" \"),e(\"h3\",{attrs:{id:\"设置主轴的对齐方式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#设置主轴的对齐方式\"}},[t._v(\"#\")]),t._v(\" 设置主轴的对齐方式\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"justify-content\")]),t._v(\"属性定义了项目在主轴上的对齐方式，值如下：\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"flex-start（默认值）：向主轴开始方向对齐。\")]),t._v(\" \"),e(\"li\",[t._v(\"flex-end：向主轴结束方向对齐。\")]),t._v(\" \"),e(\"li\",[t._v(\"center： 居中。\")]),t._v(\" \"),e(\"li\",[t._v(\"space-between：两端对齐，项目之间的间隔都相等。\")]),t._v(\" \"),e(\"li\",[t._v(\"space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".box {\\n    justify-content: flex-start | flex-end | center | space-between | space-around;\\n}\\n\\n\")])])]),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066ccd09d05?w=1140&h=1020&f=png&s=68933\",alt:\"\"}})]),t._v(\" \"),e(\"h3\",{attrs:{id:\"交叉轴的对齐方式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#交叉轴的对齐方式\"}},[t._v(\"#\")]),t._v(\" 交叉轴的对齐方式\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"align-items\")]),t._v(\"属性定义项目在交叉轴上如何对齐，值如下：\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"flex-start：交叉轴的起点对齐。\")]),t._v(\" \"),e(\"li\",[t._v(\"flex-end：交叉轴的终点对齐。\")]),t._v(\" \"),e(\"li\",[t._v(\"center：交叉轴的中点对齐。\")]),t._v(\" \"),e(\"li\",[t._v(\"baseline: 项目的第一行文字的基线对齐。\")]),t._v(\" \"),e(\"li\",[t._v(\"stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".box {\\n    align-items: flex-start | flex-end | center | baseline | stretch;\\n}\\n\\n\")])])]),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066d1feaa64?w=1064&h=1148&f=png&s=77952\",alt:\"\"}})]),t._v(\" \"),e(\"hr\"),t._v(\" \"),e(\"h2\",{attrs:{id:\"如何实现居中对齐\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何实现居中对齐\"}},[t._v(\"#\")]),t._v(\" 如何实现居中对齐？\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"题目：如何实现水平居中？\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"水平居中\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#水平居中\"}},[t._v(\"#\")]),t._v(\" 水平居中\")]),t._v(\" \"),e(\"p\",[t._v(\"inline 元素用\"),e(\"code\",[t._v(\"text-align: center;\")]),t._v(\"即可，如下：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".container {\\n   text-align: center;\\n}\\n\\n\")])])]),e(\"p\",[t._v(\"block 元素可使用\"),e(\"code\",[t._v(\"margin: auto;\")]),t._v(\"，PC 时代的很多网站都这么搞。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".container {\\n    text-align: center; \\n}\\n.item {\\n    width: 1000px;\\n    margin: auto; \\n}\\n\\n\")])])]),e(\"p\",[t._v(\"绝对定位元素可结合\"),e(\"code\",[t._v(\"left\")]),t._v(\"和\"),e(\"code\",[t._v(\"margin\")]),t._v(\"实现，但是必须知道宽度。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".container {\\n    position: relative;\\n    width: 500px;\\n}\\n.item {\\n    width: 300px;\\n    height: 100px;\\n    position: absolute;\\n    left: 50%;\\n    margin: -150px;\\n}\\n\\n\")])])]),e(\"blockquote\",[e(\"p\",[t._v(\"题目：如何实现垂直居中？\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"垂直居中\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#垂直居中\"}},[t._v(\"#\")]),t._v(\" 垂直居中\")]),t._v(\" \"),e(\"p\",[t._v(\"inline 元素可设置\"),e(\"code\",[t._v(\"line-height\")]),t._v(\"的值等于\"),e(\"code\",[t._v(\"height\")]),t._v(\"值，如单行文字垂直居中：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".container {\\n   height: 50px;\\n   line-height: 50px;\\n}\\n\\n\")])])]),e(\"p\",[t._v(\"绝对定位元素，可结合\"),e(\"code\",[t._v(\"left\")]),t._v(\"和\"),e(\"code\",[t._v(\"margin\")]),t._v(\"实现，但是必须知道尺寸。\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"优点：兼容性好\")]),t._v(\" \"),e(\"li\",[t._v(\"缺点：需要提前知道尺寸\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".container {\\n    position: relative;\\n    height: 200px;\\n}\\n.item {\\n    width: 80px;\\n    height: 40px;\\n    position: absolute;\\n    left: 50%;\\n    top: 50%;\\n    margin-top: -20px;\\n    margin-left: -40px;\\n}\\n\\n\")])])]),e(\"p\",[t._v(\"绝对定位可结合\"),e(\"code\",[t._v(\"transform\")]),t._v(\"实现居中。\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"优点：不需要提前知道尺寸\")]),t._v(\" \"),e(\"li\",[t._v(\"缺点：兼容性不好\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".container {\\n    position: relative;\\n    height: 200px;\\n}\\n.item {\\n    width: 80px;\\n    height: 40px;\\n    position: absolute;\\n    left: 50%;\\n    top: 50%;\\n    transform: translate(-50%, -50%);\\n    background: blue;\\n}\\n\\n\")])])]),e(\"p\",[t._v(\"绝对定位结合\"),e(\"code\",[t._v(\"margin: auto\")]),t._v(\"，不需要提前知道尺寸，兼容性好。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".container {\\n    position: relative;\\n    height: 300px;\\n}\\n.item {\\n    width: 100px;\\n    height: 50px;\\n    position: absolute;\\n    left: 0;\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    margin: auto;\\n}\\n\\n\")])])]),e(\"p\",[t._v(\"其他的解决方案还有，不过没必要掌握太多，能说出上文的这几个解决方案即可。\")]),t._v(\" \"),e(\"hr\"),t._v(\" \"),e(\"h2\",{attrs:{id:\"理解语义化\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#理解语义化\"}},[t._v(\"#\")]),t._v(\" 理解语义化\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"题目：如何理解 HTML 语义化？\")])]),t._v(\" \"),e(\"p\",[t._v(\"所谓“语义”就是为了更易读懂，这要分两部分：\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"让人（写程序、读程序）更易读懂\")]),t._v(\" \"),e(\"li\",[t._v(\"让机器（浏览器、搜索引擎）更易读懂\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"让人更易读懂\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#让人更易读懂\"}},[t._v(\"#\")]),t._v(\" 让人更易读懂\")]),t._v(\" \"),e(\"p\",[t._v(\"对于人来说，代码可读性、语义化就是一个非常广泛的概念了，例如定义 JS 变量的时候使用更易读懂的名称，定义 CSS class 的时候也一样，例如\"),e(\"code\",[t._v(\"length\")]),t._v(\" \"),e(\"code\",[t._v(\"list\")]),t._v(\"等，而不是使用\"),e(\"code\",[t._v(\"a\")]),t._v(\" \"),e(\"code\",[t._v(\"b\")]),t._v(\"这种谁都看不懂的名称。\")]),t._v(\" \"),e(\"p\",[t._v(\"不过我们平常考查的“语义化”并不会考查这么广义、这么泛的问题，而是考查 HTML 的语义化，是为了更好地让机器读懂 HTML。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"让机器更易读懂\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#让机器更易读懂\"}},[t._v(\"#\")]),t._v(\" 让机器更易读懂\")]),t._v(\" \"),e(\"p\",[t._v(\"HTML 符合 XML 标准，但又和 XML 不一样 —— HTML 不允许像 XML 那样自定义标签名称，HTML 有自己规定的标签名称。问题就在这里 —— HTML 为何要自己规定那么多标签名称呢，例如\"),e(\"code\",[t._v(\"p\")]),t._v(\" \"),e(\"code\",[t._v(\"div\")]),t._v(\" \"),e(\"code\",[t._v(\"h1\")]),t._v(\" \"),e(\"code\",[t._v(\"ul\")]),t._v(\"等 —— 就是为了语义化。其实，如果你精通 CSS 的话，你完全可以全部用\"),e(\"code\",[t._v(\"<div>\")]),t._v(\"标签来实现所有的网页效果，其他的\"),e(\"code\",[t._v(\"p\")]),t._v(\" \"),e(\"code\",[t._v(\"h1\")]),t._v(\" \"),e(\"code\",[t._v(\"ul\")]),t._v(\"等标签可以一个都不用。但是我们不推荐这么做，这样做就失去了 HTML 语义化的意义。\")]),t._v(\" \"),e(\"p\",[t._v(\"拿搜索引擎来说，爬虫下载到我们网页的 HTML 代码，它如何更好地去理解网页的内容呢？—— 就是根据 HTML 既定的标签。\"),e(\"code\",[t._v(\"h1\")]),t._v(\"标签就代表是标题；\"),e(\"code\",[t._v(\"p\")]),t._v(\"里面的就是段落详细内容，权重肯定没有标题高；\"),e(\"code\",[t._v(\"ul\")]),t._v(\"里面就是列表；\"),e(\"code\",[t._v(\"strong\")]),t._v(\"就是加粗的强调的内容 …… 如果我们不按照 HTML 语义化来写，全部都用\"),e(\"code\",[t._v(\"<div>\")]),t._v(\"标签，那搜索引擎将很难理解我们网页的内容。\")]),t._v(\" \"),e(\"p\",[t._v(\"为了加强 HTML 语义化，HTML5 标准中又增加了\"),e(\"code\",[t._v(\"header\")]),t._v(\" \"),e(\"code\",[t._v(\"section\")]),t._v(\" \"),e(\"code\",[t._v(\"article\")]),t._v(\"等标签。因此，书写 HTML 时，语义化是非常重要的，否则 W3C 也没必要辛辛苦苦制定出这些标准来。\")]),t._v(\" \"),e(\"hr\"),t._v(\" \"),e(\"h2\",{attrs:{id:\"css3-动画\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#css3-动画\"}},[t._v(\"#\")]),t._v(\" CSS3 动画\")]),t._v(\" \"),e(\"p\",[t._v(\"CSS3 可以实现动画，代替原来的 Flash 和 JavaScript 方案。\")]),t._v(\" \"),e(\"p\",[t._v(\"首先，使用\"),e(\"code\",[t._v(\"@keyframes\")]),t._v(\"定义一个动画，名称为\"),e(\"code\",[t._v(\"testAnimation\")]),t._v(\"，如下代码，通过百分比来设置不同的 CSS 样式，规定动画的变化。所有的动画变化都可以这么定义出来。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"@keyframes testAnimation\\n{\\n    0%   {background: red; left:0; top:0;}\\n    25%  {background: yellow; left:200px; top:0;}\\n    50%  {background: blue; left:200px; top:200px;}\\n    75%  {background: green; left:0; top:200px;}\\n    100% {background: red; left:0; top:0;}\\n}\\n\\n\")])])]),e(\"p\",[t._v(\"然后，针对一个 CSS 选择器来设置动画，例如针对\"),e(\"code\",[t._v(\"div\")]),t._v(\"元素设置动画，如下：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"div {\\n    width: 100px;\\n    height: 50px;\\n    position: absolute;\\n\\n    animation-name: myfirst;\\n    animation-duration: 5s;\\n}\\n\\n\")])])]),e(\"p\",[e(\"code\",[t._v(\"animation-name\")]),t._v(\"对应到动画名称，\"),e(\"code\",[t._v(\"animation-duration\")]),t._v(\"是动画时长，还有其他属性：\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[e(\"code\",[t._v(\"animation-timing-function\")]),t._v(\"：规定动画的速度曲线。默认是\"),e(\"code\",[t._v(\"ease\")])]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"animation-delay\")]),t._v(\"：规定动画何时开始。默认是 0\")]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"animation-iteration-count\")]),t._v(\"：规定动画被播放的次数。默认是 1\")]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"animation-direction\")]),t._v(\"：规定动画是否在下一周期逆向地播放。默认是\"),e(\"code\",[t._v(\"normal\")])]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"animation-play-state\")]),t._v(\" ：规定动画是否正在运行或暂停。默认是\"),e(\"code\",[t._v(\"running\")])]),t._v(\" \"),e(\"li\",[e(\"code\",[t._v(\"animation-fill-mode\")]),t._v(\"：规定动画执行之前和之后如何给动画的目标应用，默认是\"),e(\"code\",[t._v(\"none\")]),t._v(\"，保留在最后一帧可以用\"),e(\"code\",[t._v(\"forwards\")])])]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"题目：CSS 的\"),e(\"code\",[t._v(\"transition\")]),t._v(\"和\"),e(\"code\",[t._v(\"animation\")]),t._v(\"有何区别？\")])]),t._v(\" \"),e(\"p\",[t._v(\"首先\"),e(\"code\",[t._v(\"transition\")]),t._v(\"和\"),e(\"code\",[t._v(\"animation\")]),t._v(\"都可以做动效，从语义上来理解，\"),e(\"code\",[t._v(\"transition\")]),t._v(\"是过渡，由一个状态过渡到另一个状态，比如高度\"),e(\"code\",[t._v(\"100px\")]),t._v(\"过渡到\"),e(\"code\",[t._v(\"200px\")]),t._v(\"；而\"),e(\"code\",[t._v(\"animation\")]),t._v(\"是动画，即更专业做动效的，\"),e(\"code\",[t._v(\"animation\")]),t._v(\"有帧的概念，可以设置关键帧\"),e(\"code\",[t._v(\"keyframe\")]),t._v(\"，一个动画可以由多个关键帧多个状态过渡组成，另外\"),e(\"code\",[t._v(\"animation\")]),t._v(\"也包含上面提到的多个属性。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"重绘和回流\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#重绘和回流\"}},[t._v(\"#\")]),t._v(\" 重绘和回流\")]),t._v(\" \"),e(\"p\",[t._v(\"重绘和回流是面试题经常考的题目，也是性能优化当中应该注意的点，下面笔者简单介绍下。\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[e(\"strong\",[t._v(\"重绘\")]),t._v(\"：指的是当页面中的元素不脱离文档流，而简单地进行样式的变化，比如修改颜色、背景等，浏览器重新绘制样式\")]),t._v(\" \"),e(\"li\",[e(\"strong\",[t._v(\"回流\")]),t._v(\"：指的是处于文档流中 DOM 的尺寸大小、位置或者某些属性发生变化时，导致浏览器重新渲染部分或全部文档的情况\")])]),t._v(\" \"),e(\"p\",[t._v(\"相比之下，\"),e(\"strong\",[t._v(\"回流要比重绘消耗性能开支更大\")]),t._v(\"。另外，一些属性的读取也会引起回流，比如读取某个 DOM 的高度和宽度，或者使用\"),e(\"code\",[t._v(\"getComputedStyle\")]),t._v(\"方法。在写代码的时候要避免回流和重绘。比如在笔试中可能会遇见下面的题目：\")]),t._v(\" \"),e(\"blockquote\",[e(\"p\",[t._v(\"题目：找出下面代码的优化点，并且优化它\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"var data = ['string1', 'string2', 'string3'];\\nfor(var i = 0; i < data.length; i++){\\n    var dom = document.getElementById('list');\\n    dom.innerHTML += '<li>' + data[i] + '</li>';\\n}\\n\\n\")])])]),e(\"p\",[t._v(\"上面的代码在循环中每次都获取\"),e(\"code\",[t._v(\"dom\")]),t._v(\"，然后对其内部的 HTML 进行累加\"),e(\"code\",[t._v(\"li\")]),t._v(\"，每次都会操作 DOM 结构，可以改成使用\"),e(\"code\",[t._v(\"documentFragment\")]),t._v(\"或者先遍历组成 HTML 的字符串，最后操作一次\"),e(\"code\",[t._v(\"innerHTML\")]),t._v(\"。\")]),t._v(\" \"),e(\"hr\"),t._v(\" \"),e(\"h2\",{attrs:{id:\"小结-2\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结-2\"}},[t._v(\"#\")]),t._v(\" 小结\")]),t._v(\" \"),e(\"p\",[t._v(\"本小节总结了 CSS 和 HTML 常考的知识点，包括 CSS 中比较重要的定位、布局的知识，也介绍了一些 CSS3 的知识点概念和题目，以及 HTML 的语义化。\")])])}),[],!1,null,null,null);a.default=_.exports}}]);","extractedComments":[]}