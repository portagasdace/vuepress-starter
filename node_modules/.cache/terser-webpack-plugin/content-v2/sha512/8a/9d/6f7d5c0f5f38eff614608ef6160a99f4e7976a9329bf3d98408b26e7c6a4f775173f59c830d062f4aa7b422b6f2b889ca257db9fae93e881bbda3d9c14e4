{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[308],{664:function(n,e,t){\"use strict\";t.r(e);var a=t(42),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[t(\"blockquote\",[t(\"p\",[n._v(\"本节代码对应 GitHub 分支: chapter6\")])]),n._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter6\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"仓库传送门\"),t(\"OutboundLink\")],1)]),n._v(\" \"),t(\"p\",[n._v(\"现在就进入到具体组件的开发了，首先是静态的布局部分。\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"顶部和菜单布局\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#顶部和菜单布局\"}},[n._v(\"#\")]),n._v(\" 顶部和菜单布局\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('//Album/index.js\\nimport React, {useState} from \\'react\\';\\nimport {Container} from \\'./style\\';\\nimport { CSSTransition } from \\'react-transition-group\\';\\nimport  Header  from \\'./../../baseUI/header/index\\';\\nimport Scroll from \\'../../baseUI/scroll/index\\';\\n\\nfunction Album (props) {\\n  const [showStatus, setShowStatus] = useState (true);\\n  \\n  //mock 数据\\n  const currentAlbum = {\\n    creator: {\\n      avatarUrl: \"http://p1.music.126.net/O9zV6jeawR43pfiK2JaVSw==/109951164232128905.jpg\",\\n      nickname: \"浪里推舟\"\\n    },\\n    coverImgUrl: \"http://p2.music.126.net/ecpXnH13-0QWpWQmqlR0gw==/109951164354856816.jpg\",\\n    subscribedCount: 2010711,\\n    name: \"听完就睡，耳机是天黑以后柔软的梦境\",\\n    tracks:[\\n      {\\n        name: \"我真的受伤了\",\\n        ar: [{name: \"张学友\"}, {name: \"周华健\"}],\\n        al: {\\n          name: \"学友 热\"\\n        }\\n      },\\n      {\\n        name: \"我真的受伤了\",\\n        ar: [{name: \"张学友\"}, {name: \"周华健\"}],\\n        al: {\\n          name: \"学友 热\"\\n        }\\n      },\\n      {\\n        name: \"我真的受伤了\",\\n        ar: [{name: \"张学友\"}, {name: \"周华健\"}],\\n        al: {\\n          name: \"学友 热\"\\n        }\\n      },\\n      {\\n        name: \"我真的受伤了\",\\n        ar: [{name: \"张学友\"}, {name: \"周华健\"}],\\n        al: {\\n          name: \"学友 热\"\\n        }\\n      },\\n      {\\n        name: \"我真的受伤了\",\\n        ar: [{name: \"张学友\"}, {name: \"周华健\"}],\\n        al: {\\n          name: \"学友 热\"\\n        }\\n      },\\n      {\\n        name: \"我真的受伤了\",\\n        ar: [{name: \"张学友\"}, {name: \"周华健\"}],\\n        al: {\\n          name: \"学友 热\"\\n        }\\n      },\\n      {\\n        name: \"我真的受伤了\",\\n        ar: [{name: \"张学友\"}, {name: \"周华健\"}],\\n        al: {\\n          name: \"学友 热\"\\n        }\\n      },\\n      {\\n        name: \"我真的受伤了\",\\n        ar: [{name: \"张学友\"}, {name: \"周华健\"}],\\n        al: {\\n          name: \"学友 热\"\\n        }\\n      },\\n      {\\n        name: \"我真的受伤了\",\\n        ar: [{name: \"张学友\"}, {name: \"周华健\"}],\\n        al: {\\n          name: \"学友 热\"\\n        }\\n      },\\n      {\\n        name: \"我真的受伤了\",\\n        ar: [{name: \"张学友\"}, {name: \"周华健\"}],\\n        al: {\\n          name: \"学友 热\"\\n        }\\n      },\\n    ]\\n  }\\n\\n  const handleBack = () => {\\n    setShowStatus (false);\\n  };\\n\\n  return (\\n    <CSSTransition\\n      in={showStatus}  \\n      timeout={300} \\n      classNames=\"fly\" \\n      appear={true} \\n      unmountOnExit\\n      onExited={props.history.goBack}\\n    >\\n      <Container>\\n        <Header title={\"返回\"} handleClick={handleBack}></Header>\\n        // 这里是具体布局 JSX 代码\\n      </Container>\\n    </CSSTransition>\\n  )\\n}\\n\\nexport default React.memo (Album);\\n\\n')])])]),t(\"p\",[n._v(\"接下来我们来开始具体布局的 JSX 代码，\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('<Scroll bounceTop={false}>\\n  <div>\\n    <TopDesc background={currentAlbum.coverImgUrl}>\\n      <div className=\"background\">\\n        <div className=\"filter\"></div>\\n      </div>\\n      <div className=\"img_wrapper\">\\n        <div className=\"decorate\"></div>\\n        <img src={currentAlbum.coverImgUrl} alt=\"\"/>\\n        <div className=\"play_count\">\\n          <i className=\"iconfont play\">&#xe885;</i>\\n          <span className=\"count\">{Math.floor (currentAlbum.subscribedCount/1000)/10} 万 </span>\\n        </div>\\n      </div>\\n      <div className=\"desc_wrapper\">\\n        <div className=\"title\">{currentAlbum.name}</div>\\n        <div className=\"person\">\\n          <div className=\"avatar\">\\n            <img src={currentAlbum.creator.avatarUrl} alt=\"\"/>\\n          </div>\\n          <div className=\"name\">{currentAlbum.creator.nickname}</div>\\n        </div>\\n      </div>\\n    </TopDesc>\\n    <Menu>\\n      <div>\\n        <i className=\"iconfont\">&#xe6ad;</i>\\n        评论\\n      </div>\\n      <div>\\n        <i className=\"iconfont\">&#xe86f;</i>\\n        点赞\\n      </div>\\n      <div>\\n        <i className=\"iconfont\">&#xe62d;</i>\\n        收藏\\n      </div>\\n      <div>\\n        <i className=\"iconfont\">&#xe606;</i>\\n        更多\\n      </div>\\n    </Menu>\\n  </div>  \\n</Scroll>\\n\\n')])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('// 对应 style.js\\n\\n// 添加 TopDesc 和 Menu\\nexport const TopDesc = styled.div`\\n  background-size: 100%;\\n  padding: 5px 20px;\\n  padding-bottom: 50px;\\n  margin-bottom: 20px;\\n  display: flex;\\n  justify-content: space-around;\\n  align-items: center;\\n  box-sizing: border-box;\\n  width: 100%;\\n  height: 275px;\\n  position: relative;\\n  .background {\\n    z-index: -1;\\n    background: url (${props => props.background}) no-repeat;\\n    background-position: 0 0;\\n    background-size: 100% 100%;\\n    position: absolute;\\n    width: 100%;\\n    height: 100%;\\n    filter: blur (20px);\\n    .filter {\\n      position: absolute;\\n      z-index: 10;\\n      top: 0; left: 0;\\n      width: 100%;\\n      height: 100%;\\n      background: rgba (7, 17, 27, 0.2);\\n    }\\n  }\\n  .img_wrapper {\\n    width: 120px;\\n    height: 120px;\\n    position: relative;         \\n    .decorate {\\n      position: absolute;\\n      top: 0;\\n      width: 100%;\\n      height: 35px;\\n      border-radius: 3px;\\n      background: linear-gradient (hsla (0,0%,43%,.4),hsla (0,0%,100%,0));\\n    }\\n    .play_count {\\n      position: absolute;\\n      right: 2px;\\n      top: 2px;\\n      font-size: ${style [\"font-size-s\"]};\\n      line-height: 15px;\\n      color: ${style [\"font-color-light\"]};\\n      .play {\\n        vertical-align: top;\\n      }\\n    }\\n    img {\\n      width: 120px;\\n      height: 120px;\\n      border-radius:3px;\\n    }\\n  }\\n  .desc_wrapper {\\n    flex: 1;\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: space-around;\\n    height: 120px;\\n    padding: 0 10px;\\n    .title {\\n      max-height: 70px;\\n      color: ${style [\"font-color-light\"]};\\n      font-weight: 700;\\n      line-height: 1.5;\\n      font-size: ${style [\"font-size-l\"]};\\n    }\\n    .person {\\n      display: flex;\\n      .avatar {\\n        width: 20px;\\n        height: 20px;\\n        margin-right: 5px;\\n        img {\\n          width: 100%;\\n          height: 100%;\\n          border-radius: 50%;\\n        }\\n      }\\n      .name {\\n        line-height: 20px;\\n        font-size: ${style [\"font-size-m\"]};\\n        color: ${style [\"font-color-desc-v2\"]};\\n      }\\n    }\\n  }\\n`;\\n\\nexport const Menu = styled.div`\\n  position: relative;\\n  display: flex;\\n  justify-content: space-between;\\n  box-sizing: border-box;\\n  padding: 0 30px 20px 30px;\\n  margin: -100px 0 0 0;\\n  >div {\\n    display: flex;\\n    flex-direction: column;\\n    line-height: 20px;\\n    text-align: center;\\n    font-size: ${style [\"font-size-s\"]};\\n    color: ${style [\"font-color-light\"]};\\n    z-index:1000;\\n    font-weight: 500;\\n    .iconfont {\\n      font-size: 20px;\\n    }\\n  }\\n`;\\n\\n')])])]),t(\"p\",[n._v(\"对应的样式组件自行引入组件代码中，这里相信你已经很娴熟了。\")]),n._v(\" \"),t(\"h2\",{attrs:{id:\"歌单列表布局\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#歌单列表布局\"}},[n._v(\"#\")]),n._v(\" 歌单列表布局\")]),n._v(\" \"),t(\"p\",[n._v(\"现在我们紧接着来添加歌单列表。\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('// 紧接着 TopDesc 和 Menu\\n<SongList>\\n  <div className=\"first_line\">\\n    <div className=\"play_all\">\\n      <i className=\"iconfont\">&#xe6e3;</i>\\n      <span > 播放全部 <span className=\"sum\">(共 {currentAlbum.tracks.length} 首)</span></span>\\n    </div>\\n    <div className=\"add_list\">\\n      <i className=\"iconfont\">&#xe62d;</i>\\n      <span > 收藏 ({getCount (currentAlbum.subscribedCount)})</span>\\n    </div>\\n  </div>\\n  <SongItem>\\n    {\\n      currentAlbum.tracks.map ((item, index) => {\\n        return (\\n          <li key={index}>\\n            <span className=\"index\">{index + 1}</span>\\n            <div className=\"info\">\\n              <span>{item.name}</span>\\n              <span>\\n                { getName (item.ar) } - { item.al.name }\\n              </span>\\n            </div>\\n          </li>\\n        )\\n      })\\n    }\\n  </SongItem>\\n</SongList>\\n\\n')])])]),t(\"p\",[n._v(\"其中 getName 是一个工具方法，我们在 api/utils.js 里面来写一下:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('// 处理歌手列表拼接歌手名字\\nexport const getName = list => {\\n  let str = \"\";\\n  list.map ((item, index) => {\\n    str += index === 0 ? item.name : \"/\" + item.name;\\n    return item;\\n  });\\n  return str;\\n};\\n\\n')])])]),t(\"p\",[n._v(\"在 Album 组件代码中引入，\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"import { getName } from './../../api/utils';\\n\\n\")])])]),t(\"p\",[n._v(\"然后开始编写歌单的样式组件:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('//style.js 中加入\\nexport const SongList = styled.div`\\n  border-radius: 10px;\\n  opacity: 0.98;\\n  ${props => props.showBackground ? `background: ${style [\"highlight-background-color\"]}`: \"\"}\\n  .first_line {\\n    box-sizing: border-box;\\n    padding: 10px 0;\\n    margin-left: 10px;\\n    position: relative;\\n    justify-content: space-between;\\n    border-bottom: 1px solid ${style [\"border-color\"]};\\n    .play_all {\\n      display: inline-block;\\n      line-height: 24px;\\n      color: ${style [\"font-color-desc\"]};\\n      .iconfont {\\n        font-size: 24px;\\n        margin-right: 10px;\\n        vertical-align: top;\\n      }\\n      .sum {\\n        font-size: ${style [\"font-size-s\"]};\\n        color: ${style [\"font-color-desc-v2\"]};\\n      }\\n      >span {\\n        vertical-align: top;\\n      }\\n    }\\n    .add_list,.isCollected {\\n      display: flex;\\n      align-items: center;\\n      position: absolute;\\n      right: 0; top :0; bottom: 0;\\n      width: 130px;\\n      line-height: 34px;\\n      background: ${style [\"theme-color\"]};\\n      color: ${style [\"font-color-light\"]};\\n      font-size: 0;\\n      border-radius: 3px;\\n      vertical-align: top;\\n      .iconfont {\\n        vertical-align: top;\\n        font-size: 10px;\\n        margin: 0 5px 0 10px;\\n      }\\n      span {\\n        font-size: 14px;\\n        line-height: 34px;\\n      }\\n    }\\n    .isCollected {\\n      display: flex;\\n      background: ${style [\"background-color\"]};\\n      color: ${style [\"font-color-desc\"]};\\n    }\\n}\\n`\\nexport const SongItem = styled.ul`\\n  >li {\\n    display: flex;\\n    height: 60px;\\n    align-items: center;  \\n    .index {\\n      flex-basis: 60px;\\n      width: 60px;\\n      height: 60px;\\n      line-height: 60px;\\n      text-align: center;\\n    }\\n    .info {\\n      box-sizing: border-box;\\n      flex: 1;\\n      display: flex;\\n      height: 100%;\\n      padding: 5px 0;\\n      flex-direction: column;\\n      justify-content: space-around;\\n      border-bottom: 1px solid ${style [\"border-color\"]};\\n      ${style.noWrap ()}\\n      >span {\\n        ${style.noWrap ()}\\n      }\\n      >span:first-child {\\n        color: ${style [\"font-color-desc\"]};\\n      }\\n      >span:last-child {\\n        font-size: ${style [\"font-size-s\"]};\\n        color: #bba8a8;\\n      }\\n    }\\n  }\\n`\\n\\n')])])]),t(\"p\",[n._v(\"接下来把样式组件引入到 Album/index.js 中，大家自行完成。\")]),n._v(\" \"),t(\"p\",[n._v(\"现在初步的布局效果就有了，让大家瞧一瞧。\")]),n._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/12/25/16f3bee39be75863?w=371&h=665&f=jpeg&s=45628\",alt:\"\"}})]),n._v(\" \"),t(\"h2\",{attrs:{id:\"滑动时-header-联动效果\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#滑动时-header-联动效果\"}},[n._v(\"#\")]),n._v(\" 滑动时 Header 联动效果\")]),n._v(\" \"),t(\"p\",[n._v(\"作为一个精美的 WebApp，我们当然不仅仅是考虑静态布局啦，滑动时的体验也要兼顾，大家去项目预览地址可以看到，在滑动的过程中 Header 组件的背景会逐渐变红，而且里面的文字换成了歌单名，并且呈现出一个跑马灯的效果。\")]),n._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/12/25/16f3bee6ce19d88d?w=372&h=34&f=gif&s=665660\",alt:\"\"}})]),n._v(\" \"),t(\"p\",[n._v(\"现在又体现出了封装 Scroll 基础组件的优势了，在 Scroll 组件中，初始化时已经监听了滚动事件并且自动执行回调，因此我们直接编写回调逻辑即可。\")]),n._v(\" \"),t(\"p\",[n._v(\"首先我们稍微改造一下 Header 组件。\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('const Header = React.forwardRef ((props, ref) => {\\n  const { handleClick, title, isMarquee} = props;\\n  return (\\n    <HeaderContainer ref={ref}>\\n      <i className=\"iconfont back\"  onClick={handleClick}>&#xe655;</i>\\n      {\\n        isMarquee ? <marquee><h1>{title}</h1></marquee>:\\n        <h1>{title}</h1>\\n      }\\n    </HeaderContainer>\\n  )\\n})\\n\\n')])])]),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"Header.defaultProps = {\\n  //...\\n  isMarquee: false\\n};\\n\\nHeader.propTypes = {\\n  //...\\n  isMarquee: PropTypes.bool\\n};\\n\\n\")])])]),t(\"p\",[n._v(\"接下来，在 Album 组件中，加入:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v(\"import React, { useState, useCallback, useRef } from 'react';\\n\\nconst [title, setTitle] = useState (\\\"歌单\\\");\\nconst [isMarquee, setIsMarquee] = useState (false);// 是否跑马灯\\n\\nconst headerEl = useRef ();\\n// 传参修改如下:\\n<Header ref={headerEl} title={title} handleClick={handleBack} isMarquee={isMarquee}></Header>\\n\\n\")])])]),t(\"p\",[n._v(\"接着可以加入滑动处理逻辑了:\")]),n._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[n._v('// 首先引入\\nimport style from \"../../assets/global-style\";\\n\\nexport const HEADER_HEIGHT = 45;\\n\\nconst handleScroll = (pos) => {\\n  let minScrollY = -HEADER_HEIGHT;\\n  let percent = Math.abs (pos.y/minScrollY);\\n  let headerDom = headerEl.current;\\n  // 滑过顶部的高度开始变化\\n  if (pos.y < minScrollY) {\\n    headerDom.style.backgroundColor = style [\"theme-color\"];\\n    headerDom.style.opacity = Math.min (1, (percent-1)/2);\\n    setTitle (currentAlbum.name);\\n    setIsMarquee (true);\\n  } else {\\n    headerDom.style.backgroundColor = \"\";\\n    headerDom.style.opacity = 1;\\n    setTitle (\"歌单\");\\n    setIsMarquee (false);\\n  }\\n};\\n\\n// 传递给 Scroll 组件\\n<Scroll bounceTop={false} onScroll={handleScroll}></Scroll>\\n\\n')])])]),t(\"p\",[n._v(\"OK, 现在静态页面的布局就已经基本完成了。接下来进入数据层的对接，大家加油！\")])])}),[],!1,null,null,null);e.default=s.exports}}]);","extractedComments":[]}