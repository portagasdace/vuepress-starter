{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{453:function(t,n,i){\"use strict\";i.r(n);var s=i(42),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,i=t._self._c||n;return i(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[i(\"h1\",{attrs:{id:\"flutter-布局-理解-boxconstraint-盒约束-布局模型\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-布局-理解-boxconstraint-盒约束-布局模型\"}},[t._v(\"#\")]),t._v(\" Flutter 布局 —— 理解 BoxConstraint（盒约束）布局模型\")]),t._v(\" \"),i(\"p\",[t._v(\"前面讲了 Flutter 一些 UI Widget 的使用，但实际开发中，我们还需要将这些 Widget 按照一定的布局组合起来，Flutter 的布局和 Android、iOS、WEB 的布局有相似之处，也有不同之处。\")]),t._v(\" \"),i(\"p\",[t._v(\"所以这节，主要讲一下 Flutter 的布局原理：BoxConstraints（盒约束）。\")]),t._v(\" \"),i(\"h2\",{attrs:{id:\"什么是-boxconstraints-盒约束\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#什么是-boxconstraints-盒约束\"}},[t._v(\"#\")]),t._v(\" 什么是 BoxConstraints（盒约束）？\")]),t._v(\" \"),i(\"p\",[t._v(\"BoxConstraints 翻译过来是 盒约束，用于指定 Widget 大小的约束。\")]),t._v(\" \"),i(\"p\",[t._v(\"Flutter 的 Widget 都是通过 BoxConstraints 来约束大小的。\")]),t._v(\" \"),i(\"h2\",{attrs:{id:\"boxconstraints-如何来约束widget的大小\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#boxconstraints-如何来约束widget的大小\"}},[t._v(\"#\")]),t._v(\" BoxConstraints 如何来约束Widget的大小？\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/3/169442e4e9aeaab7?w=550&h=331&f=png&s=4028\",alt:\"\"}})]),t._v(\" \"),i(\"p\",[t._v(\"如上图，以左上角为原点，在 X轴 和 Y轴 上设置最小值和最大值,就对应了 BoxConstraints 的四个属性：\")]),t._v(\" \"),i(\"ol\",[i(\"li\",[t._v(\"minWidth\")]),t._v(\" \"),i(\"li\",[t._v(\"maxWidth\")]),t._v(\" \"),i(\"li\",[t._v(\"minHeight\")]),t._v(\" \"),i(\"li\",[t._v(\"maxHeight\")])]),t._v(\" \"),i(\"p\",[t._v(\"这四个属性可以确定如下的关系：\")]),t._v(\" \"),i(\"p\",[t._v(\"0.0 <= minWidth <= Widget宽度的实际大小 <= maxWidth <= double.infinity\")]),t._v(\" \"),i(\"p\",[t._v(\"0.0 <= minHeight <= Widget高度的实际大小 <= maxHeight <= double.infinity\")]),t._v(\" \"),i(\"p\",[t._v(\"这样就会形成一个矩形的范围：不小于黄色的矩形，不大于绿色的矩形，这样就确定了一个 Widget 的大小范围，\")]),t._v(\" \"),i(\"p\",[t._v(\"Flutter 采用 BoxConstraints 是为了更好的适配多种平台。\")]),t._v(\" \"),i(\"h2\",{attrs:{id:\"flutter-如何确定-widget-的大小\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-如何确定-widget-的大小\"}},[t._v(\"#\")]),t._v(\" Flutter 如何确定 Widget 的大小？\")]),t._v(\" \"),i(\"p\",[t._v(\"前面讲的 BoxConstraints，只能确定 Widget 大小的一个范围，并不能知道 Widget 的确切大小，这样是无法绘制的，那么 Flutter 是如何确定 Widget 大小的呢？\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/3/1694414ab4da9231?w=768&h=480&f=png&s=6656\",alt:\"\"}})]),t._v(\" \"),i(\"p\",[t._v(\"这是一个Widget树的结构，为了确定 Widget 的大小：\")]),t._v(\" \"),i(\"ol\",[i(\"li\",[t._v(\"父Widget 会将自己的 BoxConstraints 传递给自己的 子Widget，直到传到树的叶节点（没有子节点了），因此树的叶节点会拥有所有父节点的 BoxConstraints，这些 BoxConstraints 会相互影响。\")]),t._v(\" \"),i(\"li\",[t._v(\"叶节点的Widget 会根据这些 BoxConstraints 和自己的 BoxConstraints 计算出自己的大小，并将自己的大小返回给父 Widget。\")]),t._v(\" \"),i(\"li\",[t._v(\"父Widget 得到 子Widget 的大小后，根据 子Widget 的大小、前面 父Widget 们传递的 BoxConstraints 和自己的 BoxConstraints，同样可以计算出自己的大小，这样依次往上传递至 根Widget。\")])]),t._v(\" \"),i(\"p\",[i(\"code\",[t._v(\"所以 Widget 的大小是受其 父Widget 的约束和自己 子Widget 的大小共同影响的\")])]),t._v(\" \"),i(\"h2\",{attrs:{id:\"boxconstraints-的种类\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#boxconstraints-的种类\"}},[t._v(\"#\")]),t._v(\" BoxConstraints 的种类\")]),t._v(\" \"),i(\"p\",[t._v(\"对 BoxConstraints 的四个属性赋不同的值，会有不同的约束效果，为了更直观的了解这些约束效果，写了一个简单的 demo：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v('import \\'package:flutter/material.dart\\';\\n\\nvoid main() => runApp(MyApp(\"Hello World\"));\\n\\nclass MyApp extends StatefulWidget {\\n  // This widget is the root of your application.\\n\\n  String content;\\n\\n  MyApp(this.content);\\n\\n  @override\\n  State<StatefulWidget> createState() {\\n    // TODO: implement createState\\n    return MyAppState();\\n  }\\n}\\n\\nclass MyAppState extends State<MyApp> {\\n  void increment() {\\n    setState(() {\\n      widget.content += \"d\";\\n    });\\n  }\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    Paint paint = Paint();\\n    paint.color = Colors.green;\\n    return MaterialApp(\\n        title: \\'Flutter Demo\\',\\n        theme: ThemeData(\\n          primarySwatch: Colors.blue,\\n        ),\\n        home: Scaffold(\\n            appBar: AppBar(\\n              title: Text(\"Box Constraints\"),\\n            ),\\n            body: Container(\\n                color: Colors.red,\\n                child: Text(\\n                  \"HelloWorld\",\\n                  style: TextStyle(background: paint),\\n                ))));\\n  }\\n}\\n\\n')])])]),i(\"p\",[t._v(\"运行的效果如下：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/4/169494d5f5b57f29?w=843&h=311&f=jpeg&s=36183\",alt:\"\"}})]),t._v(\" \"),i(\"p\",[t._v(\"这个例子里有两个 Widget：Container 和 Text，绿色代表的是 Text 所占的位置，Text 下面还有一层红色，是 Container 所在的位置,这里不太明显，因为 Container 的大小和 Text 的大小是一样的。\")]),t._v(\" \"),i(\"p\",[t._v(\"下面对 Text 和 Container 设置不同的 BoxConstraints 来研究 BoxConstraints：\")]),t._v(\" \"),i(\"ul\",[i(\"li\",[t._v(\"Tightly Constraints（严格约束）\")]),t._v(\" \"),i(\"li\",[t._v(\"Loose Constraints（松散约束）\")]),t._v(\" \"),i(\"li\",[t._v(\"Bounded Constraints（有界约束）\")]),t._v(\" \"),i(\"li\",[t._v(\"Unbounded Constraints（无界约束）\")]),t._v(\" \"),i(\"li\",[t._v(\"Infinite Constraints（无限约束）\")])]),t._v(\" \"),i(\"h4\",{attrs:{id:\"tightly-constraints-严格约束\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tightly-constraints-严格约束\"}},[t._v(\"#\")]),t._v(\" Tightly Constraints（严格约束）\")]),t._v(\" \"),i(\"p\",[t._v(\"当某一轴上的最小值和最大值相同时，那么这个轴上的值就确定了，就是 Tightly Constraints（严格约束）。\")]),t._v(\" \"),i(\"ul\",[i(\"li\",[t._v(\"当 minWidth = maxWidth 时，Widget 的宽就确定了\")]),t._v(\" \"),i(\"li\",[t._v(\"当 minHeiget = maxHeight 时，Widget 的高度就确定了\")]),t._v(\" \"),i(\"li\",[t._v(\"当 minWidth = maxWidth 且 minHeiget = maxHeight，Widget 的宽高就都确定了。\")])]),t._v(\" \"),i(\"p\",[t._v(\"新建一个 Tightly Constraints，使用如下的方法：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"BoxConstraints.tight(Size(width, height))\\n\\n\")])])]),i(\"p\",[t._v(\"给 Container 加一个 Tightly Constraints：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v('body: Container(\\n    constraints: BoxConstraints.tight(Size(100, 100)), //添加 Tightly Constraints\\n    color: Colors.red,\\n    child: Text(\\n      \"HelloWorld\",\\n      style: TextStyle(background: paint),\\n    ))));\\n\\n')])])]),i(\"p\",[t._v(\"运行结果如下：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/4/16949568016d2c49?w=847&h=425&f=jpeg&s=39986\",alt:\"\"}})]),t._v(\" \"),i(\"p\",[t._v(\"代表 Container 的红色就是固定大小。\")]),t._v(\" \"),i(\"blockquote\",[i(\"p\",[t._v(\"当 Widget 是 Tightly Constraints 时，它的宽或高是固定的。\")])]),t._v(\" \"),i(\"h4\",{attrs:{id:\"loose-constraints-松散约束\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#loose-constraints-松散约束\"}},[t._v(\"#\")]),t._v(\" Loose Constraints（松散约束）\")]),t._v(\" \"),i(\"p\",[t._v(\"当某一轴上的最小值为 0 时，就是 Loose Constraints（松散约束）。\")]),t._v(\" \"),i(\"p\",[t._v(\"这时候就有两种情况：\")]),t._v(\" \"),i(\"ol\",[i(\"li\",[i(\"p\",[t._v(\"最大值是确定的值\")]),t._v(\" \"),i(\"ul\",[i(\"li\",[i(\"p\",[t._v(\"Container 的 X 轴最小值是 0，假设最大值是 100，那么你想一下，红色矩形的宽度会比绿色的宽吗？\")]),t._v(\" \"),i(\"p\",[t._v(\"答案是不会，因为 Container 的宽度最小为 0，最大为 100，如果 子Widget 的宽度大于 100，那么 Container 的宽度最高只能为 100，如果 子Widget的宽度小于 100，那么 Container 的宽度就和 子Widget 的宽度一样。\")]),t._v(\" \"),i(\"p\",[t._v(\"为了验证结果，新建一个最大值是确定值的松散约束：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"BoxConstraints.loose(Size(width, height))\\n\\n\")])])]),i(\"p\",[t._v(\"代码是：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v('body: Container(\\n        constraints: BoxConstraints.loose(Size(100, 100)), //添加 Loose Constraints\\n        color: Colors.red,\\n        child: Text(\\n          \"HelloWorld\",\\n          style: TextStyle(background: paint),\\n        ))));\\n\\n')])])]),i(\"p\",[t._v(\"运行结果如下：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/4/16949685b5121654?w=834&h=264&f=jpeg&s=34692\",alt:\"\"}})])]),t._v(\" \"),i(\"li\",[i(\"p\",[t._v(\"接着上一个假设，给 Container 设定了最大值是确定值的松散约束，但是 Container 没有 子Widget，红色矩形又是怎么显示的呢？\")]),t._v(\" \"),i(\"p\",[t._v(\"代码如下：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"body: Container(\\n        constraints: BoxConstraints.loose(Size(100, 100)), //添加 Loose Constraints\\n        color: Colors.red,)));\\n\\n\")])])]),i(\"p\",[t._v(\"运行效果如下：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/5/1694975e056b24e0?w=838&h=411&f=jpeg&s=37367\",alt:\"\"}})]),t._v(\" \"),i(\"p\",[t._v(\"这时候 Container 显示的是最大宽度。\")])])])]),t._v(\" \"),i(\"li\",[i(\"p\",[t._v(\"最大值是是 Infinite(无限值)\")]),t._v(\" \"),i(\"ul\",[i(\"li\",[i(\"p\",[t._v(\"Container 的 X 轴最小值是 0，假设最大值是 Infinite(无限值)，红色矩形和绿色矩形又是什么关系呢？\")]),t._v(\" \"),i(\"p\",[t._v(\"新建一个最大值是是无限值的松散约束：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"BoxConstraints.tightFor()\\n\\n\")])])]),i(\"p\",[t._v(\"代码如下：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v('body: Container(\\n    constraints: BoxConstraints.tightFor(), //添加 Loose Constraints\\n    color: Colors.red,\\n    child: Text(\\n      \"HelloWorld\",\\n      style: TextStyle(background: paint),\\n    ))));\\n\\n')])])]),i(\"p\",[t._v(\"运行效果如下：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/4/16949685b5121654?w=834&h=264&f=jpeg&s=34692\",alt:\"\"}})])]),t._v(\" \"),i(\"li\",[i(\"p\",[t._v(\"接着上一个，如果 Container 没有 子Widget 呢？\")]),t._v(\" \"),i(\"p\",[t._v(\"代码如下：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"body: Container(\\n    constraints: BoxConstraints.tightFor(), //添加 Loose Constraints\\n    color: Colors.red,)));\\n\\n\")])])]),i(\"p\",[t._v(\"运行效果如下：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a000e9b260a699?w=428&h=768&f=png&s=34110\",alt:\"\"}})]),t._v(\" \"),i(\"p\",[t._v(\"Container 铺满了全屏\")])])])])]),t._v(\" \"),i(\"blockquote\",[i(\"p\",[t._v(\"当 Widget 是 Loose Constraints 时，无论最大值是确定值还是无限制，如果有 子Widget，那么 Widget 的大小就是 子Widget 的大小，相当于 wrap_content，如果没有 子Widget，那么 Widget 就是最大值，如果这个最大值是 Infinite,就相当于 match_parent\")])]),t._v(\" \"),i(\"h4\",{attrs:{id:\"bounded-constraints-有界约束\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#bounded-constraints-有界约束\"}},[t._v(\"#\")]),t._v(\" Bounded Constraints（有界约束）\")]),t._v(\" \"),i(\"p\",[t._v(\"当某一轴上的最大值是确定的值时，就是 Bounded Constraints（有界约束）。\")]),t._v(\" \"),i(\"p\",[t._v(\"新建一个 Bounded Constraints,maxWidth和maxHeight必须为固定值：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"constraints: BoxConstraints(minWidth,maxWidth,minHeight,maxHeight), //添加 Bounded Constraints\\n\\n\")])])]),i(\"p\",[t._v(\"然后考虑如下的情形：\")]),t._v(\" \"),i(\"ul\",[i(\"li\",[i(\"p\",[t._v(\"如果 minWidth 大于子 Widget 的宽\")]),t._v(\" \"),i(\"p\",[t._v(\"如下代码：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v('body: Container(\\n    constraints: BoxConstraints(minWidth: 100,maxWidth: 300,minHeight: 0,maxHeight: 300), //添加 Bounded Constraints\\n    color: Colors.red,\\n    child: Text(\\n      \"HelloWorld\",\\n      style: TextStyle(background: paint),\\n    ))));\\n\\n')])])]),i(\"p\",[t._v(\"运行效果如下：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/5/169499ac775e9600?w=831&h=271&f=jpeg&s=36750\",alt:\"\"}})]),t._v(\" \"),i(\"p\",[t._v(\"Container 的宽度取的是最小值 100，而不是最大值 300\")])]),t._v(\" \"),i(\"li\",[i(\"p\",[t._v(\"如果 Container 没有 子Widget 呢？\")]),t._v(\" \"),i(\"p\",[t._v(\"如下的代码：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"body: Container(\\n    constraints: BoxConstraints(minWidth: 100,maxWidth: 300,minHeight: 0,maxHeight: 300), //添加 Bounded Constraints\\n    color: Colors.red,)));\\n\\n\")])])]),i(\"p\",[t._v(\"运行效果如下：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/5/169499dad2331e94?w=837&h=831&f=jpeg&s=47933\",alt:\"\"}})]),t._v(\" \"),i(\"p\",[t._v(\"这时候 Container 显示的是最大值。\")])])]),t._v(\" \"),i(\"blockquote\",[i(\"p\",[t._v(\"当 Widget 是 Bounded Constraints 时,如果有 子Widget，子Widget 的大小小于有界约束的最小值，则显示的是有界约束的最小值，而当 子Widget 的大小大于有界约束的最小值，小于有界约束的最大值，则显示的是 子Widget 的大小，否则显示的是有界约束的最大值；如果没有 子Widget 就显示有界约束的最大值\")])]),t._v(\" \"),i(\"h4\",{attrs:{id:\"unbounded-constraints-无界约束\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#unbounded-constraints-无界约束\"}},[t._v(\"#\")]),t._v(\" Unbounded Constraints（无界约束）\")]),t._v(\" \"),i(\"p\",[t._v(\"当某一轴上的最大值是 Infinite(无限值) 时，就是 Unbounded Constraints（无界约束）。\")]),t._v(\" \"),i(\"p\",[t._v(\"新建一个 Unbounded Constraints,maxWidth 和 maxHeight 必须为 double.infinity：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"constraints: BoxConstraints(minWidth,maxWidth,minHeight,maxHeight), //添加 Bounded Constraints\\n\\n\")])])]),i(\"p\",[t._v(\"然后考虑如下的情形：\")]),t._v(\" \"),i(\"ul\",[i(\"li\",[i(\"p\",[t._v(\"当 子Widget 的宽小于 minWidth\")]),t._v(\" \"),i(\"p\",[t._v(\"红色矩形显示的宽度肯定是 minWidth。\")]),t._v(\" \"),i(\"p\",[t._v(\"代码如下：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v('body: Container(\\n    constraints: BoxConstraints(minWidth: 100,maxWidth: double.infinity,minHeight: 100,maxHeight: double.infinity), //添加 Unbounded Constraints\\n    color: Colors.red,\\n    child: Text(\\n      \"HelloWorld\",\\n      style: TextStyle(background: paint),\\n    ))));\\n\\n')])])]),i(\"p\",[t._v(\"运行效果如下：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/4/16949568016d2c49?w=847&h=425&f=jpeg&s=39986\",alt:\"\"}})])]),t._v(\" \"),i(\"li\",[i(\"p\",[t._v(\"当 子Widget 的宽大于 minWidth\")]),t._v(\" \"),i(\"p\",[t._v(\"红色矩形显示的宽度肯定是 子Widget 的宽度。\")]),t._v(\" \"),i(\"p\",[t._v(\"代码如下：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v('    body: Container(\\n    constraints: BoxConstraints(minWidth: 10,maxWidth: double.infinity,minHeight: 100,maxHeight: double.infinity), //添加 Unbounded Constraints\\n    color: Colors.red,\\n    child: Text(\\n      \"HelloWorld\",\\n      style: TextStyle(background: paint),\\n    ))));\\n\\n')])])]),i(\"p\",[t._v(\"运行效果如下:\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/5/16949b19eb4ac152?w=851&h=459&f=jpeg&s=40693\",alt:\"\"}})])]),t._v(\" \"),i(\"li\",[i(\"p\",[t._v(\"如果 Container 没有 子Widget 呢？\")]),t._v(\" \"),i(\"p\",[t._v(\"如下的代码：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"    body: Container(\\n    constraints: BoxConstraints(minWidth: 10,maxWidth: double.infinity,minHeight: 100,maxHeight: double.infinity), //添加 Unbounded Constraints\\n    color: Colors.red,))));\\n\\n\")])])]),i(\"p\",[t._v(\"运行效果如下：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a000e9b260a699?w=428&h=768&f=png&s=34110\",alt:\"\"}})]),t._v(\" \"),i(\"p\",[t._v(\"Container 铺满了全屏\")])])]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"其实 Unbounded Constraints 很像 Loose Constraints。当 Unbounded Constraints  有 子Widget 时，若 子Widget 的大小小于 Unbounded Constraints 的最小值时，则 Widget 显示 Unbounded Constraints 的最小值，若 子Widget 的大小大于 Unbounded Constraints 的最小值时，则显示 子Widge t的大小；若没有 子Widget，就相当于 match_parent\\n\\n\")])])]),i(\"h4\",{attrs:{id:\"infinite-constraints-无限约束\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#infinite-constraints-无限约束\"}},[t._v(\"#\")]),t._v(\" Infinite Constraints（无限约束）\")]),t._v(\" \"),i(\"p\",[t._v(\"当某一轴上的最大值和最小值都是 Infinite(无限值) 时，就是 Infinite Constraints（无限约束）。\")]),t._v(\" \"),i(\"p\",[t._v(\"新建一个 Infinite Constraints（无限约束）：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v('body: Container(\\n    constraints: BoxConstraints.expand(), //添加 Infinite Constraints\\n    color: Colors.red,\\n    child: Text(\\n      \"HelloWorld\",\\n      style: TextStyle(background: paint),\\n    ))));\\n\\n')])])]),i(\"p\",[t._v(\"运行效果如下：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a0010b333c574b?w=387&h=767&f=png&s=28122\",alt:\"\"}})]),t._v(\" \"),i(\"blockquote\",[i(\"p\",[t._v(\"Infinite Constraints 就相当于 match_parent\")])])])}),[],!1,null,null,null);n.default=e.exports}}]);","extractedComments":[]}