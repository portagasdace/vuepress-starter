{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{446:function(t,e,v){\"use strict\";v.r(e);var _=v(42),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[v(\"h1\",{attrs:{id:\"flutter-基础-widget-文本框\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-基础-widget-文本框\"}},[t._v(\"#\")]),t._v(\" Flutter 基础 Widget —— 文本框\")]),t._v(\" \"),v(\"p\",[t._v(\"本节讲 Flutter 文本框的使用。\")]),t._v(\" \"),v(\"p\",[t._v(\"主要讲以下两种文本框 Widget 的使用 :\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[v(\"a\",{attrs:{href:\"https://docs.flutter.io/flutter/widgets/Text-class.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Text\"),v(\"OutboundLink\")],1)]),t._v(\" \"),v(\"li\",[v(\"a\",{attrs:{href:\"https://docs.flutter.io/flutter/widgets/RichText-class.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"RichText\"),v(\"OutboundLink\")],1)])]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_1-text\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-text\"}},[t._v(\"#\")]),t._v(\" \"),v(\"a\",{attrs:{href:\"https://docs.flutter.io/flutter/widgets/Text-class.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"1. Text\"),v(\"OutboundLink\")],1)]),t._v(\" \"),v(\"p\",[t._v(\"Text 就是显示文本的 Widget。\")]),t._v(\" \"),v(\"h3\",{attrs:{id:\"代码所在位置\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置\"}},[t._v(\"#\")]),t._v(\" 代码所在位置\")]),t._v(\" \"),v(\"p\",[t._v(\"flutter_widget_demo/lib/text/TextWidget.dart\")]),t._v(\" \"),v(\"h3\",{attrs:{id:\"text-快速上手\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#text-快速上手\"}},[t._v(\"#\")]),t._v(\" Text 快速上手\")]),t._v(\" \"),v(\"p\",[t._v(\"Text 的最简单使用方式就是在 Text 里传入要显示的文字：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v('Text(\"Hello Flutter\");// Text 里传入要显示的文字\\n\\n')])])]),v(\"p\",[t._v(\"将 Text 赋值给 Scaffold 的 body 参数，就可以把 Text 显示在一个页面上：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v('import \\'package:flutter/material.dart\\';\\n\\nvoid main() => runApp(TextWidget());\\n\\nclass TextWidget extends StatelessWidget{\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: \"Flutter Demo\",\\n      theme: ThemeData(\\n        primaryColor: Colors.blue,\\n      ),\\n      home: Scaffold(\\n        appBar: AppBar(title: Text(\"Flutter UI基础Widget -- 文本\")),\\n        body: Text(\"Hello Flutter\")\\n      ),\\n    );\\n  }\\n}\\n\\n')])])]),v(\"p\",[t._v(\"运行后的效果为：\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/9/16961317c48d2398?w=849&h=346&f=jpeg&s=41698\",alt:\"\"}})]),t._v(\" \"),v(\"p\",[t._v(\"这是最简单的 Text 使用方法，如果需要更复杂的效果，比如设置字体大小、颜色等，就需要了解 Text 的各种参数的使用。\")]),t._v(\" \"),v(\"h3\",{attrs:{id:\"text-的必选参数-data\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#text-的必选参数-data\"}},[t._v(\"#\")]),t._v(\" Text 的必选参数：data\")]),t._v(\" \"),v(\"p\",[t._v(\"Text 的内容 data 是必选参数。\")]),t._v(\" \"),v(\"h3\",{attrs:{id:\"text-可选参数里经常用到的参数-textstyle\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#text-可选参数里经常用到的参数-textstyle\"}},[t._v(\"#\")]),t._v(\" Text 可选参数里经常用到的参数：TextStyle\")]),t._v(\" \"),v(\"p\",[t._v(\"TextStyle 是 Text 里经常要用到的参数，用来定义 Text 显示的样式，如 颜色、大小、背景灯。\")]),t._v(\" \"),v(\"h4\",{attrs:{id:\"textstyle-快速上手\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#textstyle-快速上手\"}},[t._v(\"#\")]),t._v(\" TextStyle 快速上手\")]),t._v(\" \"),v(\"p\",[t._v(\"这里有一个 TextStyle 的 Demo:\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v('Text(\\n    \"Hello Flutter\",\\n    style: TextStyle(\\n        color: Colors.red,\\n        fontSize: 20.0,\\n        background: new Paint()..color = Colors.yellow,\\n        ),\\n    )\\n\\n')])])]),v(\"p\",[t._v(\"TextStyle 定义了 字体颜色、大小和背景，运行后的效果为：\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/9/1696150d014f9483?w=847&h=299&f=jpeg&s=42902\",alt:\"\"}})]),t._v(\" \"),v(\"p\",[t._v(\"如果要使用更多的效果，就需要了解 TextStyle 的各种参数和使用方法。\")]),t._v(\" \"),v(\"h4\",{attrs:{id:\"textstyle-的构造参数及参数说明\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#textstyle-的构造参数及参数说明\"}},[t._v(\"#\")]),t._v(\" TextStyle 的构造参数及参数说明\")]),t._v(\" \"),v(\"p\",[t._v(\"先看 TextStyle 的构造参数：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v(\"class TextStyle extends Diagnosticable {\\n\\n  const TextStyle({\\n    this.inherit = true,\\n    this.color,\\n    this.fontSize,\\n    this.fontWeight,\\n    this.fontStyle,\\n    this.letterSpacing,\\n    this.wordSpacing,\\n    this.textBaseline,\\n    this.height,\\n    this.locale,\\n    this.foreground,\\n    this.background,\\n    this.shadows,\\n    this.decoration,\\n    this.decorationColor,\\n    this.decorationStyle,\\n    this.debugLabel,\\n    String fontFamily,\\n    List<String> fontFamilyFallback,\\n    String package,\\n  }) : fontFamily = package == null ? fontFamily : 'packages/$package/$fontFamily',\\n       _fontFamilyFallback = fontFamilyFallback,\\n       _package = package,\\n       assert(inherit != null),\\n       assert(color == null || foreground == null, _kColorForegroundWarning);\\n       \\n    ...\\n}\\n\\n\")])])]),v(\"p\",[t._v(\"参数名字\")]),t._v(\" \"),v(\"p\",[t._v(\"参数类型\")]),t._v(\" \"),v(\"p\",[t._v(\"意义\")]),t._v(\" \"),v(\"p\",[t._v(\"必选 or 可选\")]),t._v(\" \"),v(\"p\",[t._v(\"inherit\")]),t._v(\" \"),v(\"p\",[t._v(\"bool\")]),t._v(\" \"),v(\"p\",[t._v(\"是否继承父 Text 的样式，默认为 true\"),v(\"br\"),t._v(\"\\n如果为false，且样式没有设置具体的值，则采用默认值：白色、字体大小 10px、sans-serif 字体\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"color\")]),t._v(\" \"),v(\"p\",[t._v(\"Color\")]),t._v(\" \"),v(\"p\",[t._v(\"文字的颜色\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"fontSize\")]),t._v(\" \"),v(\"p\",[t._v(\"double\")]),t._v(\" \"),v(\"p\",[t._v(\"文字的大小\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"fontWeight\")]),t._v(\" \"),v(\"p\",[t._v(\"FontWeight\")]),t._v(\" \"),v(\"p\",[t._v(\"字体粗细\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"fontStyle\")]),t._v(\" \"),v(\"p\",[t._v(\"FontStyle\")]),t._v(\" \"),v(\"p\",[t._v(\"是否在字体中倾斜字形\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"letterSpacing\")]),t._v(\" \"),v(\"p\",[t._v(\"double\")]),t._v(\" \"),v(\"p\",[t._v(\"字母之间的间隔\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"wordSpacing\")]),t._v(\" \"),v(\"p\",[t._v(\"double\")]),t._v(\" \"),v(\"p\",[t._v(\"单词之间的间隔\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"textBaseline\")]),t._v(\" \"),v(\"p\",[t._v(\"TextBaseline\")]),t._v(\" \"),v(\"p\",[t._v(\"用于对齐文本的水平线\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"height\")]),t._v(\" \"),v(\"p\",[t._v(\"double\")]),t._v(\" \"),v(\"p\",[t._v(\"文本的高度\"),v(\"br\"),t._v(\"\\n但它并不是一个绝对值，而是一个因子，具体的行高等于fontSize*height。\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"locale\")]),t._v(\" \"),v(\"p\",[t._v(\"Locale\")]),t._v(\" \"),v(\"p\",[t._v(\"用于选择用户语言和格式设置首选项的标识符\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"foreground\")]),t._v(\" \"),v(\"p\",[t._v(\"Paint\")]),t._v(\" \"),v(\"p\",[t._v(\"文本的前景色\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"background\")]),t._v(\" \"),v(\"p\",[t._v(\"Paint\")]),t._v(\" \"),v(\"p\",[t._v(\"文本的背景色\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"shadows\")]),t._v(\" \"),v(\"p\",[t._v(\"List< ui.Shadow>\")]),t._v(\" \"),v(\"p\",[t._v(\"在文本下方绘制阴影\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"decoration\")]),t._v(\" \"),v(\"p\",[t._v(\"TextDecoration\")]),t._v(\" \"),v(\"p\",[t._v(\"文本的线条\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"decorationColor\")]),t._v(\" \"),v(\"p\",[t._v(\"Color\")]),t._v(\" \"),v(\"p\",[t._v(\"TextDecoration 线条的颜色\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"decorationStyle\")]),t._v(\" \"),v(\"p\",[t._v(\"TextDecorationStyle\")]),t._v(\" \"),v(\"p\",[t._v(\"TextDecoration 线条的样式\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"debugLabel\")]),t._v(\" \"),v(\"p\",[t._v(\"String\")]),t._v(\" \"),v(\"p\",[t._v(\"文本样式的描述\"),v(\"br\"),t._v(\"\\n无实际用处\")]),t._v(\" \"),v(\"p\",[t._v(\"可读\")]),t._v(\" \"),v(\"p\",[t._v(\"fontFamily\")]),t._v(\" \"),v(\"p\",[t._v(\"String\")]),t._v(\" \"),v(\"p\",[t._v(\"用于设置使用哪种自定义字体\")]),t._v(\" \"),v(\"p\",[t._v(\"可读\")]),t._v(\" \"),v(\"p\",[t._v(\"fontFamilyFallback\")]),t._v(\" \"),v(\"p\",[t._v(\"String\")]),t._v(\" \"),v(\"p\",[t._v(\"字体列表，当前面的字体找不到时，会在这个列表里依次查找\")]),t._v(\" \"),v(\"p\",[t._v(\"可读\")]),t._v(\" \"),v(\"p\",[t._v(\"package\")]),t._v(\" \"),v(\"p\",[t._v(\"String\")]),t._v(\" \"),v(\"p\",[t._v(\"用于设置使用哪种自定义字体\")]),t._v(\" \"),v(\"p\",[t._v(\"可读\")]),t._v(\" \"),v(\"p\",[t._v(\"可以看到 TextStyle 只有可选参数，没有必选参数。\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[t._v(\"TextDecoration：文本的线条\")]),t._v(\" \"),v(\"p\",[t._v(\"文本的线条，包含四种：\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"TextDecoration.underline：下划线\")]),t._v(\" \"),v(\"li\",[t._v(\"TextDecoration.overline：上划线\")]),t._v(\" \"),v(\"li\",[t._v(\"TextDecoration.lineThrough：中划线\")]),t._v(\" \"),v(\"li\",[t._v(\"TextDecoration.none：不划线\")])])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"decorationStyle：文本线条的种类\")]),t._v(\" \"),v(\"p\",[t._v(\"文本线条的种类，包含有五中：\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[v(\"p\",[t._v(\"TextDecorationStyle.solid：实线\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/16/16a2675503be3e75?w=280&h=88&f=jpeg&s=13182\",alt:\"\"}})])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"TextDecorationStyle.double：两条线\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/16/16a26757e9577102?w=390&h=130&f=jpeg&s=14168\",alt:\"\"}})])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"TextDecorationStyle.dotted：点虚线\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/9/169616473a977a44?w=308&h=120&f=jpeg&s=12785\",alt:\"\"}})])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"TextDecorationStyle.dashed：间隔虚线（比点要长）\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/9/1696164a2eb25def?w=286&h=94&f=png&s=8761\",alt:\"\"}})])]),t._v(\" \"),v(\"li\",[v(\"p\",[t._v(\"TextDecorationStyle.wave：波浪线\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/9/1696164ed165f9a3?w=278&h=102&f=jpeg&s=12958\",alt:\"\"}})])])])])]),t._v(\" \"),v(\"h3\",{attrs:{id:\"text-其他参数说明\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#text-其他参数说明\"}},[t._v(\"#\")]),t._v(\" Text 其他参数说明\")]),t._v(\" \"),v(\"p\",[t._v(\"我们可以在 Text 的构造函数里找到 Text 的所有参数，下面是 Text 构造函数：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v(\"class Text extends StatelessWidget {\\n\\n  const Text(this.data, {\\n    Key key,\\n    this.style,\\n    this.strutStyle,\\n    this.textAlign,\\n    this.textDirection,\\n    this.locale,\\n    this.softWrap,\\n    this.overflow,\\n    this.textScaleFactor,\\n    this.maxLines,\\n    this.semanticsLabel,\\n  }) : assert(data != null),\\n       textSpan = null,\\n       super(key: key);\\n    \\n    ...\\n}\\n\\n\")])])]),v(\"p\",[t._v(\"参数名字\")]),t._v(\" \"),v(\"p\",[t._v(\"参数类型\")]),t._v(\" \"),v(\"p\",[t._v(\"意义\")]),t._v(\" \"),v(\"p\",[t._v(\"必选 or 可选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"data\")])]),t._v(\" \"),v(\"p\",[t._v(\"String\")]),t._v(\" \"),v(\"p\",[t._v(\"要显示的文字\")]),t._v(\" \"),v(\"p\",[t._v(\"必选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"key\")])]),t._v(\" \"),v(\"p\",[t._v(\"Key\")]),t._v(\" \"),v(\"p\",[t._v(\"Widget 的标识\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"style\")])]),t._v(\" \"),v(\"p\",[t._v(\"TextStyle\")]),t._v(\" \"),v(\"p\",[t._v(\"文本样式\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"strutStyle\")])]),t._v(\" \"),v(\"p\",[t._v(\"StrutStyle\")]),t._v(\" \"),v(\"p\",[t._v(\"设置每行的最小行高\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"textAlign\")])]),t._v(\" \"),v(\"p\",[t._v(\"TextAlign\")]),t._v(\" \"),v(\"p\",[t._v(\"文本的对齐方式\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"textDirection\")])]),t._v(\" \"),v(\"p\",[t._v(\"TextDirection\")]),t._v(\" \"),v(\"p\",[t._v(\"文字方向\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"locale\")])]),t._v(\" \"),v(\"p\",[t._v(\"Locale\")]),t._v(\" \"),v(\"p\",[t._v(\"用于选择用户语言和格式设置首选项的标识符\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"softWrap\")])]),t._v(\" \"),v(\"p\",[t._v(\"bool\")]),t._v(\" \"),v(\"p\",[t._v(\"是否支持软换行符\"),v(\"br\"),t._v(\"\\n如果是 false 的话，这个文本只有一行，水平方向是无限的\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"overflow\")])]),t._v(\" \"),v(\"p\",[t._v(\"TextOverflow\")]),t._v(\" \"),v(\"p\",[t._v(\"文本的截断方式\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"textScaleFactor\")])]),t._v(\" \"),v(\"p\",[t._v(\"double\")]),t._v(\" \"),v(\"p\",[t._v(\"代表文本相对于当前字体大小的缩放因子\"),v(\"br\"),t._v(\"\\n默认值为1.0\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"maxLines\")])]),t._v(\" \"),v(\"p\",[t._v(\"int\")]),t._v(\" \"),v(\"p\",[t._v(\"显示的最大行数\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[v(\"code\",[t._v(\"semanticsLabel\")])]),t._v(\" \"),v(\"p\",[t._v(\"String\")]),t._v(\" \"),v(\"p\",[t._v(\"给文本加上一个语义标签\"),v(\"br\"),t._v(\"\\n没有实际用处\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"从构造函数里也可以看到只有 data 是必选参数，其余都是可选参数。\")]),t._v(\" \"),v(\"ul\",[v(\"li\",[v(\"p\",[v(\"code\",[t._v(\"textAlign\")]),t._v(\"：文本的对齐方式\")]),t._v(\" \"),v(\"p\",[t._v(\"文本的对齐方式，有六种：\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"TextAlign.left：左对齐\")]),t._v(\" \"),v(\"li\",[t._v(\"TextAlign.right：右对齐\")]),t._v(\" \"),v(\"li\",[t._v(\"TextAlign.center：居中对齐\")]),t._v(\" \"),v(\"li\",[t._v(\"TextAlign.start：从文字开始的那个方向对齐，如果文字方向从左到右，就左对齐，否则是右对齐。\")]),t._v(\" \"),v(\"li\",[t._v(\"TextAlign.end：从文字开始的相反方向对齐，如果文字方向从左到右，就右对齐，否则是左对齐。\")]),t._v(\" \"),v(\"li\",[t._v(\"TextAlign.justify\")])])]),t._v(\" \"),v(\"li\",[v(\"p\",[v(\"code\",[t._v(\"textDirection\")]),t._v(\"：文字方向\")]),t._v(\" \"),v(\"p\",[t._v(\"文字方向有两种:\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"TextDirection.ltr：文字方向从左到右\")]),t._v(\" \"),v(\"li\",[t._v(\"TextDirection.ltr：文字方向从右到左\")])])]),t._v(\" \"),v(\"li\",[v(\"p\",[v(\"code\",[t._v(\"overflow\")]),t._v(\"：文本的截断方式\")]),t._v(\" \"),v(\"p\",[t._v(\"当要显示的内容超了之后，文本的截断方式有三种：\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"TextOverflow.ellipsis：多余文本截断后以省略符“...”表示\")]),t._v(\" \"),v(\"li\",[t._v(\"TextOverflow.clip：剪切多余文本，多余文本不显示\")]),t._v(\" \"),v(\"li\",[t._v(\"TextOverflow.fade：将多余的文本设为透明\")])])])]),t._v(\" \"),v(\"h3\",{attrs:{id:\"text-的命名构造函数-text-rich\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#text-的命名构造函数-text-rich\"}},[t._v(\"#\")]),t._v(\" Text 的命名构造函数：Text.rich()\")]),t._v(\" \"),v(\"p\",[t._v(\"Text 除了默认的构造函数外，还有命名构造函数：\"),v(\"code\",[t._v(\"Text.rich()\")]),t._v(\"，\"),v(\"code\",[t._v(\"Text.rich()\")]),t._v(\" 的定义为：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v(\"/// Creates a text widget with a [TextSpan].\\n  const Text.rich(this.textSpan, {\\n    Key key,\\n    this.style,\\n    this.strutStyle,\\n    this.textAlign,\\n    this.textDirection,\\n    this.locale,\\n    this.softWrap,\\n    this.overflow,\\n    this.textScaleFactor,\\n    this.maxLines,\\n    this.semanticsLabel,\\n  }) \\n\\n\")])])]),v(\"p\",[v(\"code\",[t._v(\"Text.rich()\")]),t._v(\" 需要传入 TextSpan，可以显示多种样式的 text，具体使用可以查看下面介绍的 RichText，使用方法是一样的。\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"_2-richtext\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-richtext\"}},[t._v(\"#\")]),t._v(\" \"),v(\"a\",{attrs:{href:\"https://docs.flutter.io/flutter/widgets/RichText-class.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"2. RichText\"),v(\"OutboundLink\")],1)]),t._v(\" \"),v(\"p\",[t._v(\"一个富文本 Text，可以显示多种样式的 text。\")]),t._v(\" \"),v(\"h3\",{attrs:{id:\"代码所在位置-2\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置-2\"}},[t._v(\"#\")]),t._v(\" 代码所在位置\")]),t._v(\" \"),v(\"p\",[t._v(\"flutter_widget_demo/lib/text/RichTextWidget.dart\")]),t._v(\" \"),v(\"h3\",{attrs:{id:\"richtext-快速上手\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#richtext-快速上手\"}},[t._v(\"#\")]),t._v(\" RichText 快速上手\")]),t._v(\" \"),v(\"p\",[t._v(\"RichText 要传入 TextSpan 数组，每个 TextSpan 是一个独立的文本，可以定义自己的 Style，使用如下：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v('RichText(\\n    text: TextSpan(children: [\\n      TextSpan(text: \"Hello\", style: TextStyle(color: Colors.blue)),\\n      TextSpan(text: \"Flutter\", style: TextStyle(color: Colors.red))\\n    ]),\\n  )\\n\\n')])])]),v(\"p\",[t._v(\"把 RichText 使用 TextSpan 放到一个页面的完整 Demo 如下：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v('import \\'package:flutter/material.dart\\';\\n\\nvoid main() => runApp(RichTextWidget());\\n\\nclass RichTextWidget extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: \"Flutter Demo\",\\n      theme: ThemeData(\\n        primaryColor: Colors.blue,\\n      ),\\n      home: Scaffold(\\n          appBar: AppBar(title: Text(\"Flutter UI基础Widget -- 文本\")),\\n          body: RichText(\\n            text: TextSpan(children: [\\n              TextSpan(text: \"Hello\", style: TextStyle(color: Colors.blue)),\\n              TextSpan(text: \"Flutter\", style: TextStyle(color: Colors.red))\\n            ]),\\n          )),\\n    );\\n  }\\n}\\n\\n')])])]),v(\"p\",[t._v(\"运行效果如下：\")]),t._v(\" \"),v(\"p\",[v(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/9/169616d0c55b31ea?w=214&h=66&f=jpeg&s=8989\",alt:\"\"}})]),t._v(\" \"),v(\"h3\",{attrs:{id:\"richtext-的必选参数-textspan\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#richtext-的必选参数-textspan\"}},[t._v(\"#\")]),t._v(\" RichText 的必选参数：TextSpan\")]),t._v(\" \"),v(\"p\",[t._v(\"如果我们需要对一个 Text 内容的不同部分按照不同的样式显示，这时就可以使用 TextSpan，它代表文本的一个片段，然后把不同的 TextSpan 组合起来。\")]),t._v(\" \"),v(\"h4\",{attrs:{id:\"textspan-的构造函数及参数说明\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#textspan-的构造函数及参数说明\"}},[t._v(\"#\")]),t._v(\" TextSpan 的构造函数及参数说明\")]),t._v(\" \"),v(\"p\",[t._v(\"TextSpan 的构造函数如下：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v(\"class TextSpan extends DiagnosticableTree {\\n  const TextSpan({\\n    this.style,\\n    this.text,\\n    this.children,\\n    this.recognizer,\\n  });\\n  ...\\n}\\n\\n\")])])]),v(\"p\",[t._v(\"参数名字\")]),t._v(\" \"),v(\"p\",[t._v(\"参数类型\")]),t._v(\" \"),v(\"p\",[t._v(\"意义\")]),t._v(\" \"),v(\"p\",[t._v(\"必选 or 可选\")]),t._v(\" \"),v(\"p\",[t._v(\"style\")]),t._v(\" \"),v(\"p\",[t._v(\"TextStyle\")]),t._v(\" \"),v(\"p\",[t._v(\"文本样式\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"text\")]),t._v(\" \"),v(\"p\",[t._v(\"String\")]),t._v(\" \"),v(\"p\",[t._v(\"要显示的文字\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"children\")]),t._v(\" \"),v(\"p\",[t._v(\"List< TextSpan>\")]),t._v(\" \"),v(\"p\",[t._v(\"子 TextSpan\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"recognizer\")]),t._v(\" \"),v(\"p\",[t._v(\"GestureRecognizer\")]),t._v(\" \"),v(\"p\",[t._v(\"一个手势识别器，它将接收到达此文本范围的事件。\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"h3\",{attrs:{id:\"richtext-其余参数说明\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#richtext-其余参数说明\"}},[t._v(\"#\")]),t._v(\" RichText 其余参数说明\")]),t._v(\" \"),v(\"p\",[t._v(\"RichText 的构造函数：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v(\"class RichText extends LeafRenderObjectWidget {\\n\\n  const RichText({\\n    Key key,\\n    @required this.text,\\n    this.textAlign = TextAlign.start,\\n    this.textDirection,\\n    this.softWrap = true,\\n    this.overflow = TextOverflow.clip,\\n    this.textScaleFactor = 1.0,\\n    this.maxLines,\\n    this.locale,\\n    this.strutStyle,\\n  }) : assert(text != null),\\n  ...\\n}\\n\\n\")])])]),v(\"p\",[t._v(\"参数名字\")]),t._v(\" \"),v(\"p\",[t._v(\"参数类型\")]),t._v(\" \"),v(\"p\",[t._v(\"意义\")]),t._v(\" \"),v(\"p\",[t._v(\"必选 or 可选\")]),t._v(\" \"),v(\"p\",[t._v(\"key\")]),t._v(\" \"),v(\"p\",[t._v(\"Key\")]),t._v(\" \"),v(\"p\",[t._v(\"Widget 的标识\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"text\")]),t._v(\" \"),v(\"p\",[t._v(\"TextSpan\")]),t._v(\" \"),v(\"p\",[t._v(\"文字片段\")]),t._v(\" \"),v(\"p\",[t._v(\"必选\")]),t._v(\" \"),v(\"p\",[t._v(\"textAlign\")]),t._v(\" \"),v(\"p\",[t._v(\"TextAlign\")]),t._v(\" \"),v(\"p\",[t._v(\"文本的对齐方式\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"textDirection\")]),t._v(\" \"),v(\"p\",[t._v(\"TextDirection\")]),t._v(\" \"),v(\"p\",[t._v(\"文字方向\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"softWrap\")]),t._v(\" \"),v(\"p\",[t._v(\"bool\")]),t._v(\" \"),v(\"p\",[t._v(\"是否支持软换行符\"),v(\"br\"),t._v(\"\\n如果是 false 的话，这个文本只有一行，水平方向是无限的\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"overflow\")]),t._v(\" \"),v(\"p\",[t._v(\"TextOverflow\")]),t._v(\" \"),v(\"p\",[t._v(\"文本的截断方式\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"textScaleFactor\")]),t._v(\" \"),v(\"p\",[t._v(\"double\")]),t._v(\" \"),v(\"p\",[t._v(\"代表文本相对于当前字体大小的缩放因子\"),v(\"br\"),t._v(\"\\n默认值为1.0\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"maxLines\")]),t._v(\" \"),v(\"p\",[t._v(\"int\")]),t._v(\" \"),v(\"p\",[t._v(\"显示的最大行数\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"locale\")]),t._v(\" \"),v(\"p\",[t._v(\"Locale\")]),t._v(\" \"),v(\"p\",[t._v(\"用于选择用户语言和格式设置首选项的标识符\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"strutStyle\")]),t._v(\" \"),v(\"p\",[t._v(\"StrutStyle\")]),t._v(\" \"),v(\"p\",[t._v(\"设置每行的最小行高\")]),t._v(\" \"),v(\"p\",[t._v(\"可选\")]),t._v(\" \"),v(\"p\",[t._v(\"从红也可以看到 RichText 的必选参数是 text，text 的类型是 TextSpan，除了 text 参数, RichText 的大部分参数和 Text 一样。\")]),t._v(\" \"),v(\"h2\",{attrs:{id:\"flutter-使用自定义字体\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-使用自定义字体\"}},[t._v(\"#\")]),t._v(\" Flutter 使用自定义字体\")]),t._v(\" \"),v(\"p\",[t._v(\"可以在 Flutter 中使用不同的字体。例如，我们可能会使用设计人员创建的自定义字体，或者其它第三方的字体，如 Google Fonts 中的字体。本节将介绍如何为 Flutter 应用配置字体，并在渲染文本时使用它们。\")]),t._v(\" \"),v(\"p\",[t._v(\"在 Flutter中 使用字体分两步完成：\")]),t._v(\" \"),v(\"ol\",[v(\"li\",[t._v(\"首先在 pubspec.yaml 中声明它们，以确保它们会打包到应用程序中。\")]),t._v(\" \"),v(\"li\",[t._v(\"然后通过 TextStyle 属性使用字体。\")])]),t._v(\" \"),v(\"h3\",{attrs:{id:\"在-pubspec-yaml-中声明\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#在-pubspec-yaml-中声明\"}},[t._v(\"#\")]),t._v(\" 在 pubspec.yaml 中声明\")]),t._v(\" \"),v(\"p\",[t._v(\"要将字体打文件打包到应用中，和使用其它资源一样，要先在 pubspec.yaml 中声明它。然后将字体文件复制到在 pubspec.yaml 中指定的位置。如：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v(\"flutter:\\n  fonts:\\n    - family: Raleway\\n      fonts:\\n        - asset: assets/fonts/Raleway-Regular.ttf\\n        - asset: assets/fonts/Raleway-Medium.ttf\\n          weight: 500\\n        - asset: assets/fonts/Raleway-SemiBold.ttf\\n          weight: 600\\n    - family: AbrilFatface\\n      fonts:\\n        - asset: assets/fonts/abrilfatface/AbrilFatface-Regular.ttf\\n\\n\")])])]),v(\"h3\",{attrs:{id:\"使用字体\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用字体\"}},[t._v(\"#\")]),t._v(\" 使用字体\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v(\"// 声明文本样式\\nconst textStyle = const TextStyle(\\n  fontFamily: 'Raleway',\\n);\\n\\n// 使用文本样式\\nvar buttonText = const Text(\\n  \\\"Use the font for this text\\\",\\n  style: textStyle,\\n);\\n\\n\")])])]),v(\"h3\",{attrs:{id:\"package-中的字体\"}},[v(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#package-中的字体\"}},[t._v(\"#\")]),t._v(\" Package 中的字体\")]),t._v(\" \"),v(\"p\",[t._v(\"要使用 Package 中定义的字体，必须提供 package 参数。例如，假设上面的字体声明位于 my_package 包中。然后创建 TextStyle 的过程如下：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v(\"const textStyle = const TextStyle(\\n  fontFamily: 'Raleway',\\n  package: 'my_package', //指定包名\\n);\\n\\n\")])])]),v(\"p\",[t._v(\"如果在 package 包内部使用它自己定义的字体，也应该在创建文本样式时指定 package 参数，如上例所示。\")]),t._v(\" \"),v(\"p\",[t._v(\"一个包也可以只提供字体文件而不需要在 pubspec.yaml 中声明。 这些文件应该存放在包的 lib/ 文件夹中。字体文件不会自动绑定到应用程序中，应用程序可以在声明字体时有选择地使用这些字体。假设一个名为 my_package 的包中有一个字体文件：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v(\"lib/fonts/Raleway-Medium.ttf\\n\\n\")])])]),v(\"p\",[t._v(\"然后，应用程序可以声明一个字体，如下面的示例所示：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v(\" flutter:\\n   fonts:\\n     - family: Raleway\\n       fonts:\\n         - asset: assets/fonts/Raleway-Regular.ttf\\n         - asset: packages/my_package/fonts/Raleway-Medium.ttf\\n           weight: 500\\n\\n\")])])]),v(\"p\",[t._v(\"lib/ 是隐含的，所以它不应该包含在 asset 路径中。\")]),t._v(\" \"),v(\"p\",[t._v(\"在这种情况下，由于应用程序本地定义了字体，所以在创建 TextStyle 时可以不指定 package 参数：\")]),t._v(\" \"),v(\"div\",{staticClass:\"language- extra-class\"},[v(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[v(\"code\",[t._v(\"const textStyle = const TextStyle(\\n  fontFamily: 'Raleway',\\n);\\n\\n\")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);","extractedComments":[]}