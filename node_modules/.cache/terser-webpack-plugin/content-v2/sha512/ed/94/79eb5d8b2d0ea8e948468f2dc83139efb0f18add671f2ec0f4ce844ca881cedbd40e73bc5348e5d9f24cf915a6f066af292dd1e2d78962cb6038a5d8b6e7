{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{535:function(t,a,n){\"use strict\";n.r(a);var e=n(42),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"第-13-节-复杂数据图表-·-箱线图\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第-13-节-复杂数据图表-·-箱线图\"}},[t._v(\"#\")]),t._v(\" 第 13 节 复杂数据图表 · 箱线图\")]),t._v(\" \"),n(\"p\",[t._v(\"箱线图是一种结合了散点图和柱状图特性的复合数据图表，它主要用于展示一组或多组离散型数值数据的多个特征值及离散程度。\")]),t._v(\" \"),n(\"p\",[t._v(\"箱线图可以非常好地表现一组数据中大致的整体状况，从而配合统计学方法对数据进行分析和评价。\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"_13-1-准备数据\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-1-准备数据\"}},[t._v(\"#\")]),t._v(\" 13.1 准备数据\")]),t._v(\" \"),n(\"h3\",{attrs:{id:\"_13-1-1-箱线图统计量\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-1-1-箱线图统计量\"}},[t._v(\"#\")]),t._v(\" 13.1.1 箱线图统计量\")]),t._v(\" \"),n(\"p\",[t._v(\"箱线图是利用离散数据中的 5 个统计量进行绘制的：最小值、第一四分位数 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=Q_1\",alt:\"Q_1\"}}),t._v(\"、中位数、第三四分位数 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=Q_3\",alt:\"Q_3\"}}),t._v(\" 以及最大值，并利用 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=Q_1\",alt:\"Q_1\"}}),t._v(\" 和 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=Q_3\",alt:\"Q_3\"}}),t._v(\" 两个四分位数计算得到四分位距 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=IQR\",alt:\"IQR\"}}),t._v(\"。\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=IQR\",alt:\"IQR\"}}),t._v(\" 是一种用于表示离散数据离散程度的统计量，其定义为一组离散数据中的第一四分位数与第三四分位数的差值。\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=IQR%3DQ_3-Q_1\",alt:\"IQR=Q_3-Q_1\"}})]),t._v(\" \"),n(\"p\",[t._v(\"得到了 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=IQR\",alt:\"IQR\"}}),t._v(\" 之后便可以继续推导出离散数据箱线图的内限 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=%5BQ_1-1.5%20%5Ctimes%20IQR%2CQ_3%2B1.5%20%5Ctimes%20IQR%5D\",alt:\"[Q_1-1.5 \\\\times IQR,Q_3+1.5 \\\\times IQR]\"}}),t._v(\"，超出这个内限的值便为该组数据中的离群值（outlier），需要被单独标记。\")]),t._v(\" \"),n(\"p\",[t._v(\"虽然在 ECharts 中已经提供了这些数据的计算工具，但是为了能够更好地理解其中的统计学含义，这里将会一步步地计算这些我们需要使用到的数据。\")]),t._v(\" \"),n(\"h3\",{attrs:{id:\"_13-1-2-计算统计量\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-1-2-计算统计量\"}},[t._v(\"#\")]),t._v(\" 13.1.2 计算统计量\")]),t._v(\" \"),n(\"p\",[t._v(\"跟前几节不一样的是，使用 \"),n(\"code\",[t._v(\"Math.random()\")]),t._v(\" 所生成的数据在不加以处理的情况下都会呈均匀分布，而像 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=IQR\",alt:\"IQR\"}}),t._v(\" 这些用于表示数据离散程度的统计量在这里便失去了意义。因此，这一节会使用一组真实的数据来作为将要使用的数据。\")]),t._v(\" \"),n(\"p\",[t._v(\"这份数据来自非常著名的物理实验 —— 迈克耳孙-莫雷实验，它是一项用于验证“以太”物质是否存在的实验。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"const data = [ 850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960 ]\\n\\n\")])])]),n(\"p\",[n(\"strong\",[t._v(\"最小值 & 最大值\")])]),t._v(\" \"),n(\"p\",[t._v(\"最小值和最大值可以说是我们非常熟悉的一对数据统计量，在 JavaScript 中计算这两个值的方法非常多，可以先使用排序然后取头尾两值。当然在 JavaScript 中我们有更好的方法，可以分别使用 \"),n(\"code\",[t._v(\"Math.min()\")]),t._v(\" 和 \"),n(\"code\",[t._v(\"Math.max()\")]),t._v(\" 来进行计算。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"const min = Math.min(...data) //=> 650\\nconst max = Math.max(...data) //=> 1070\\n\\n\")])])]),n(\"p\",[n(\"strong\",[t._v(\"中位数\")])]),t._v(\" \"),n(\"p\",[t._v(\"中位数的定义为离散数据 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=S\",alt:\"S\"}}),t._v(\" 在数轴上的中间值：\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"如果离散数据的个数 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=n\",alt:\"n\"}}),t._v(\" 为奇数，则中位数就为第 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=%5Cfrac%7Bn%2B1%7D%7B2%7D\",alt:\"\\\\frac{n+1}{2}\"}}),t._v(\" 个数值，\"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=median%3DS_%7B%5Cfrac%7Bn%2B1%7D%7B2%7D%7D\",alt:\"median=S_{\\\\frac{n+1}{2}}\"}}),t._v(\"；\")]),t._v(\" \"),n(\"li\",[t._v(\"若数据的个数 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=n\",alt:\"n\"}}),t._v(\" 为偶数，则中位数为最中间两个数值的平均值，\"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=median%3D%5Cfrac%7B1%7D%7B2%7D(S_%7B%5Cfrac%7Bn%7D%7B2%7D%7D%2BS_%7B%5Cfrac%7Bn%7D%7B2%7D%2B1%7D)\",alt:\"median=\\\\frac{1}{2}(S_{\\\\frac{n}{2}}+S_{\\\\frac{n}{2}+1})\"}}),t._v(\"。\")])]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"let median = 0\\nconst n = data.length\\nconst sortedData = data.sort(function(a, b) {\\n  return a - b\\n})\\n\\nif (n % 2 == 1) {\\n  median = sortedData[((n + 1) / 2) - 1]\\n} else {\\n  median = (sortedData[(n / 2 + 1) - 1] + sortedData[(n / 2) - 1]) / 2\\n}\\n\\nconsole.log(median) //=> 940\\n\\n\")])])]),n(\"p\",[n(\"strong\",[t._v(\"四分位数\")])]),t._v(\" \"),n(\"p\",[t._v(\"中位数实际上就是一个四分位数，将离散数据画在数轴上，然后以最小值和最大值作为范围，将数轴切分成四份。第一和第二份的边界点为第一四分位数，第二和第三份的边界点为中位数，而第三和第四份的边界点则为第三四分位数。\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/8/12/1652bb63557e8b98?w=452&h=175&f=png&s=9623\",alt:\"四分位数\"}})]),t._v(\" \"),n(\"p\",[t._v(\"当中位数的位置上不存在某一个特定的数值时，则取最中间两个数值的平均数。而第一和第三四分位数则除了需要合并两个相邻的数值以外，还需要根据各自的位置进行相应的计算。\")]),t._v(\" \"),n(\"p\",[t._v(\"比如当第一四分位数的位置上并不是特定的一个数值时，则取前一个数乘以 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=%5Cfrac%7B1%7D%7B4%7D\",alt:\"\\\\frac{1}{4}\"}}),t._v(\" 的乘积加上后一个数乘以 \"),n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=%5Cfrac%7B3%7D%7B4%7D\",alt:\"\\\\frac{3}{4}\"}}),t._v(\" 的乘积，而并不是两者的平均数，因为这样才更符合第一四分位数的定义。第三四分位数同理。\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=%5Cbegin%7Bequation%7D%0A%5Cleft%5C%7B%0A%20%20%5Cbegin%7Barray%7D%7Blr%7D%0A%20%20%20%20Q_1%3DS_%7B%5Cfrac%7Bn%7D%7B4%7D%7D%20%26%20n%3D2k(k%20%5Cne%200)%20%5C%5C%0A%20%20%20%20Q_1%3D%5Cfrac%7B1%7D%7B4%7DS_%7B%5Cleft%20%5Clfloor%20%5Cfrac%7Bn%7D%7B4%7D%20%5Cright%20%5Crfloor%7D%20%2B%20%5Cfrac%7B3%7D%7B4%7DS_%7B%5Cleft%20%5Clfloor%20%5Cfrac%7Bn%7D%7B4%7D%20%5Cright%20%5Crfloor%20%2B%201%7D%20%26%20n%3D2k%2B1(k%20%5Cne%200)%0A%20%20%5Cend%7Barray%7D%0A%5Cright.%0A%5Cend%7Bequation%7D\",alt:\"\\\\begin{equation}\\\\left{\\\\begin{array}{lr}Q_1=S_{\\\\frac{n}{4}} & n=2k(k \\\\ne 0) \\\\Q_1=\\\\frac{1}{4}S_{\\\\left \\\\lfloor \\\\frac{n}{4} \\\\right \\\\rfloor} + \\\\frac{3}{4}S_{\\\\left \\\\lfloor \\\\frac{n}{4} \\\\right \\\\rfloor + 1} & n=2k+1(k \\\\ne 0)\\\\end{array}\\\\right.\\\\end{equation}\"}})]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=%5Cbegin%7Bequation%7D%0A%5Cleft%5C%7B%0A%20%20%5Cbegin%7Barray%7D%7Blr%7D%0A%20%20%20%20Q_3%3DS_%7B%5Cfrac%7B3n%7D%7B4%7D%7D%20%26%20n%3D2k(k%20%5Cne%200)%20%5C%5C%0A%20%20%20%20Q_3%3D%5Cfrac%7B3%7D%7B4%7DS_%7B%5Cleft%20%5Clfloor%20%5Cfrac%7B3n%7D%7B4%7D%20%5Cright%20%5Crfloor%7D%20%2B%20%5Cfrac%7B1%7D%7B4%7DS_%7B%5Cleft%20%5Clfloor%20%5Cfrac%7B3n%7D%7B4%7D%20%5Cright%20%5Crfloor%20%2B%201%7D%20%26%20n%3D2k%2B1(k%20%5Cne%200)%0A%20%20%5Cend%7Barray%7D%0A%5Cright.%0A%5Cend%7Bequation%7D\",alt:\"\\\\begin{equation}\\\\left{\\\\begin{array}{lr}Q_3=S_{\\\\frac{3n}{4}} & n=2k(k \\\\ne 0) \\\\Q_3=\\\\frac{3}{4}S_{\\\\left \\\\lfloor \\\\frac{3n}{4} \\\\right \\\\rfloor} + \\\\frac{1}{4}S_{\\\\left \\\\lfloor \\\\frac{3n}{4} \\\\right \\\\rfloor + 1} & n=2k+1(k \\\\ne 0)\\\\end{array}\\\\right.\\\\end{equation}\"}})]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"function quantile4(data, pos) {\\n  if (pos < 1 || pos > 3 || pos % 1 !== 0) {\\n    throw 'the second argument pos should be an interger and should be 1, 2 or 3'\\n  }\\n\\n  const sortedData = data.sort(function(a, b) {\\n    return a - b\\n  })\\n\\n  const n = sortedData.length\\n\\n  if ((pos * n / 4) % 1 !== 0) {\\n    // pos * n / 4 不为整数时\\n    return sortedData[pos * n / 4 - 1]\\n  } else {\\n    return (pos / 4) * (sortedData[Math.floor(pos * n / 4) - 1]) + ((4 - pos) / 4) * (sortedData[Math.floor(pos * n / 4)])\\n  }\\n}\\n\\n// 使用中位数作为验证\\nconsole.log(quantile4(data, 2)) //=> 940\\n\\nconst Q1 = quantile4(data, 1)\\nconst Q3 = quantile4(data, 3)\\n\\n\")])])]),n(\"p\",[n(\"strong\",[t._v(\"IQR\")])]),t._v(\" \"),n(\"p\",[t._v(\"IQR 即四分位距，定义为第一四分位数和第三四分位数的差值。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"const IQR = Q3 - Q1 //=> 130\\n\\n\")])])]),n(\"p\",[n(\"strong\",[t._v(\"内限 & 离群值\")])]),t._v(\" \"),n(\"p\",[t._v(\"若需要判断一个数据点是否为离群值，就需要先通过四分位数和 IQR 计算出内限，再通过对比该数据点与内限来判断它是否为离群值。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"const limit = [\\n  Q1 - 1.5 * IQR,\\n  Q3 + 1.5 * IQR\\n]\\n\\nconst outliers = data.filter(function(k) {\\n  return k < limit[0] || k > limit[1]\\n})\\n\\nconsole.log(outliers) //=> [ 650 ]\\n\\n\")])])]),n(\"h2\",{attrs:{id:\"_13-2-绘制箱线图\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-2-绘制箱线图\"}},[t._v(\"#\")]),t._v(\" 13.2 绘制箱线图\")]),t._v(\" \"),n(\"p\",[t._v(\"凑齐了这些需要用到的数据之后，我们便可以将它们放进图表上了。与前面我们学习使用过的数据图表不一样的是，箱线图一个数据系列就要使用到五个维度的数据。所以我们在做数据绑定的时候也需要分别为这五个维度的数据进行绑定。\")]),t._v(\" \"),n(\"h3\",{attrs:{id:\"_13-2-1-准备数据集\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-2-1-准备数据集\"}},[t._v(\"#\")]),t._v(\" 13.2.1 准备数据集\")]),t._v(\" \"),n(\"p\",[t._v(\"跟其他数据图表一样，箱线图的数据同样可以使用 \"),n(\"code\",[t._v(\"dataset\")]),t._v(\" 来提供数据支持。分别需要将 6 个不同的维度数据传入：箱线图标识、最小值、第一四分位数、中位数、第三四分位数、最大值。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"const option = {\\n  dataset: {\\n    source: [\\n      [ 1 /* 第一个箱线图 */, min, Q1, median, Q3, max ]\\n    ]\\n  }\\n}\\n\\n\")])])]),n(\"h3\",{attrs:{id:\"_13-2-2-准备笛卡尔坐标系\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-2-2-准备笛卡尔坐标系\"}},[t._v(\"#\")]),t._v(\" 13.2.2 准备笛卡尔坐标系\")]),t._v(\" \"),n(\"p\",[t._v(\"因为箱线图的数据类型是计量数据，所以我们所使用的依然是最熟悉的笛卡尔坐标系。而由于这里暂时只有一个箱线图，为了能够更好地表达数轴的概念，我们将 X 轴作为数据轴，Y 轴作为系列轴。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"const option = {\\n  xAxis: {\\n    type: 'value',\\n    scale: true\\n  },\\n  yAxis: {\\n    type: 'category'\\n  },\\n}\\n\\n\")])])]),n(\"h3\",{attrs:{id:\"_13-2-3-绑定数据系列\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-2-3-绑定数据系列\"}},[t._v(\"#\")]),t._v(\" 13.2.3 绑定数据系列\")]),t._v(\" \"),n(\"p\",[t._v(\"绑定数据系列是使用 ECharts 绘制数据图表中最重要的一环，因为这一步直接关系到如何将数据展示在图表上。而箱线图的特殊性在这一步中则显得格外突出，它需要绑定 5 个不同维度的数据。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"const option = {\\n  series: {\\n    type: 'boxplot',\\n    encode: {\\n      y: 0,\\n      x: [ 1, 2, 3, 4, 5 ]\\n    }\\n  }\\n}\\n\\n\")])])]),n(\"p\",[t._v(\"完成了上面的工作以后，我们便可以将图表配置应用到图表实例中查看效果了。\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/8/14/1653767273e14024?w=600&h=400&f=png&s=11983\",alt:\"boxplot-chart-1\"}})]),t._v(\" \"),n(\"p\",[t._v(\"非常好，我们已经在这个图表上看到了一个很好的效果，箱线图非常好地表现了数据的数值范围、离散程度以及中位数特征值。\")]),t._v(\" \"),n(\"h3\",{attrs:{id:\"_13-2-4-绘制离群值\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-2-4-绘制离群值\"}},[t._v(\"#\")]),t._v(\" 13.2.4 绘制离群值\")]),t._v(\" \"),n(\"p\",[t._v(\"除了箱线图以外，我们还知道箱线图有一个内限，用于判断数值是否离群。如果数据中出现了离群值，我们可以将其单绘制到图表上表示出来。离群值可以使用散点 \"),n(\"code\",[t._v(\"scatter\")]),t._v(\" 绘制在图表上。\")]),t._v(\" \"),n(\"p\",[t._v(\"我们可以多增加一个数据集来存储离群值的数据，以绑定 \"),n(\"code\",[t._v(\"scatter\")]),t._v(\" 数据系列。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"const option = {\\n  dataset: [\\n    {\\n      source: [\\n        [ 1, min, Q1, median, Q3, max ]\\n      ]\\n    },\\n    {\\n      source: outliers.map(function(outlier) {\\n        return [ 1, outlier ]\\n      })\\n    }\\n  ]\\n}\\n\\n\")])])]),n(\"p\",[t._v(\"然后我们需要进一步修改数据系列，包括前面的箱线图系列。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"const option = {\\n  series: [\\n    {\\n      type: 'boxplot',\\n      datasetIndex: 0,\\n      encode: {\\n        y: 0,\\n        x: [ 1, 2, 3, 4, 5 ]\\n      }\\n    },\\n    {\\n      type: 'scatter',\\n      datasetIndex: 1,\\n      encode: {\\n        y: 0,\\n        x: 1\\n      }\\n    }\\n  ]\\n}\\n\\n\")])])]),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/8/14/1653767273f4ff86?w=600&h=400&f=png&s=12143\",alt:\"boxplot-chart-2\"}})]),t._v(\" \"),n(\"h2\",{attrs:{id:\"_13-3-多系列箱线图\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-3-多系列箱线图\"}},[t._v(\"#\")]),t._v(\" 13.3 多系列箱线图\")]),t._v(\" \"),n(\"p\",[t._v(\"前面我使用一组数据绘制了一个更偏向于一维数轴的箱线图，但是在实际开发和应用中，我们往往需要在一张图表上绘制多组不同数据的箱线图。就比如在进行统计试验的时候，不同的测试水平需要进行多次试验得到数据并进行分析。而多次试验的数据结果需要进行可视化，便可以使用到箱线图进行表达。\")]),t._v(\" \"),n(\"p\",[t._v(\"比如上面的迈克耳孙-莫雷实验，真正记录的数据肯定不止这一次，我们可以引入多组试验的数据。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"const data = [\\n    [850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960],\\n    [960, 940, 960, 940, 880, 800, 850, 880, 900, 840, 830, 790, 810, 880, 880, 830, 800, 790, 760, 800],\\n    [880, 880, 880, 860, 720, 720, 620, 860, 970, 950, 880, 910, 850, 870, 840, 840, 850, 840, 840, 840],\\n    [890, 810, 810, 820, 800, 770, 760, 740, 750, 760, 910, 920, 890, 860, 880, 720, 840, 850, 850, 780],\\n    [890, 840, 780, 810, 760, 810, 790, 810, 820, 850, 870, 870, 810, 740, 810, 940, 950, 800, 810, 870]\\n]\\n\\n\")])])]),n(\"h3\",{attrs:{id:\"_13-3-1-整合统计量计算\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-3-1-整合统计量计算\"}},[t._v(\"#\")]),t._v(\" 13.3.1 整合统计量计算\")]),t._v(\" \"),n(\"p\",[t._v(\"前面我们为一组数据计算了多个统计量以展示在箱线图上，那么在多组数据中我们可以将前面的计算过程进行封装。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"function boxplotDatas(data) {\\n  const min = Math.min(...data)\\n  const max = Math.max(...data)\\n\\n  let median = 0\\n  const n = data.length\\n  const sortedData = data.sort(function(a, b) {\\n    return a - b\\n  })\\n\\n  if (n % 2 == 1) {\\n    median = sortedData[((n + 1) / 2) - 1]\\n  } else {\\n    median = (sortedData[(n / 2 + 1) - 1] + sortedData[(n / 2) - 1]) / 2\\n  }\\n\\n  const Q1 = quantile4(data, 1)\\n  const Q3 = quantile4(data, 3)\\n\\n  const IQR = Q3 - Q1\\n\\n  const limit = [\\n    Q1 - 1.5 * IQR,\\n    Q3 + 1.5 * IQR\\n  ]\\n\\n  const outliers = data.filter(function(k) {\\n    return k < limit[0] || k > limit[1]\\n  })\\n\\n  return {\\n    min, max, median, Q1, Q3, outliers,\\n  }\\n}\\n\\nconst boxplotData = data.map(function(exprData, i) {\\n  return Object.assign({ id: i }, boxplotDatas(exprData))\\n})\\n//=> [\\n//   {id: 0, min: 650, max: 1070, median: 940, Q1: 850, …},\\n//   {id: 1, min: 760, max: 960, median: 845, Q1: 800, …},\\n//   ...\\n// ]\\n\\nconst outliers = boxplotData\\n  .map(function({ id, outliers }) {\\n    return outliers.map(function(outlier) {\\n      return [ id, outlier ]\\n    })\\n  })\\n  .reduce(function(left, right) {\\n    return left.concat(right)\\n  })\\n//=> [\\n//   [0, 650], [2, 620], ...\\n// ]\\n\\n\")])])]),n(\"p\",[t._v(\"得到数据之后，我们就可以进行数据图表绘制了。\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"const option = {\\n  dataset: [\\n    {\\n      source: boxplotData\\n    },\\n    {\\n      source: outliers\\n    }\\n  ],\\n  xAxis: {\\n    type: 'category'\\n  },\\n  yAxis: {\\n    type: 'value',\\n    scale: true\\n  },\\n  series: [\\n    {\\n      type: 'boxplot',\\n      datasetIndex: 0,\\n      encode: {\\n        x: 'id',\\n        y: [ 'min', 'Q1', 'median', 'Q3', 'max' ]\\n      }\\n    },\\n    {\\n      type: 'scatter',\\n      datasetIndex: 1,\\n      encode: {\\n        x: 0,\\n        y: 1\\n      }\\n    }\\n  ]\\n}\\n\\n\")])])]),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/8/14/1653767273fda531?w=600&h=400&f=png&s=16437\",alt:\"boxplot-chart-3\"}})]),t._v(\" \"),n(\"h2\",{attrs:{id:\"小结\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[t._v(\"#\")]),t._v(\" 小结\")]),t._v(\" \"),n(\"p\",[t._v(\"这一节中我们学习了一个比较复杂的数据图表，它相较于前面学习和使用过的数据图表使用到了更多维度的数值数据，其自身所具有的统计分析意义也能更直观地表达。\")]),t._v(\" \"),n(\"h3\",{attrs:{id:\"习题\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#习题\"}},[t._v(\"#\")]),t._v(\" 习题\")]),t._v(\" \"),n(\"p\",[t._v(\"思考箱线图、散点图、折线图、柱状图这几种用于表达计量数据的不同数据图表的异同。\")])])}),[],!1,null,null,null);a.default=s.exports}}]);","extractedComments":[]}