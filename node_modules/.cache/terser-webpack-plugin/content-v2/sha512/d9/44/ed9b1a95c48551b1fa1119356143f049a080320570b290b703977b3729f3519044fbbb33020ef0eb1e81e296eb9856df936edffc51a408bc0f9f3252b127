{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[325],{688:function(n,r,e){\"use strict\";e.r(r);var t=e(42),c=Object(t.a)({},(function(){var n=this,r=n.$createElement,e=n._self._c||r;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[e(\"blockquote\",[e(\"p\",[n._v(\"本节代码对应 GitHub 分支: chapter9\")])]),n._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter8\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"仓库传送门\"),e(\"OutboundLink\")],1)]),n._v(\" \"),e(\"h2\",{attrs:{id:\"播放器逻辑\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#播放器逻辑\"}},[n._v(\"#\")]),n._v(\" 播放器逻辑\")]),n._v(\" \"),e(\"p\",[n._v(\"首先，将 Player/index.js 中的获取歌词的代码完善一下。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"// 记得引入插件\\nimport Lyric from './../../api/lyric-parser';\\n\\nconst handleLyric = ({lineNum, txt}) => {\\n  if (!currentLyric.current) return;\\n  currentLineNum.current = lineNum;\\n  setPlayingLyric (txt);\\n};\\n\\nconst getLyric = id => {\\n  let lyric = \\\"\\\";\\n  if (currentLyric.current) {\\n    currentLyric.current.stop ();\\n  }\\n  // 避免 songReady 恒为 false 的情况\\n  getLyricRequest (id)\\n    .then (data => {\\n      lyric = data.lrc.lyric;\\n      if (!lyric) {\\n        currentLyric.current = null;\\n        return;\\n      }\\n      currentLyric.current = new Lyric (lyric, handleLyric);\\n      currentLyric.current.play ();\\n      currentLineNum.current = 0;\\n      currentLyric.current.seek (0);\\n    })\\n    .catch (() => {\\n      songReady.current = true;\\n      audioRef.current.play ();\\n    });\\n};\\n\\n\")])])]),e(\"p\",[n._v(\"对于歌词功能，已经有了一个 currentLyric 对象，但同时我们还有一条即时歌词，因此要再声明一个 currentPlayingLyric 变量:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('const [currentPlayingLyric, setPlayingLyric] = useState (\"\");\\n\\n')])])]),e(\"p\",[n._v(\"当然，还有一个记录当前行数的 currentLineNum:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"const currentLineNum = useRef (0);\\n\\n\")])])]),e(\"p\",[n._v(\"然后，将这些属性传递给 nornalPlayer 处理:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"<NormalPlayer\\n  //...\\n  currentLyric={currentLyric.current}\\n  currentPlayingLyric={currentPlayingLyric}\\n  currentLineNum={currentLineNum.current}\\n></NormalPlayer>\\n\\n\")])])]),e(\"p\",[n._v(\"对于歌曲播放的过程，还有两个非常重要的逻辑需要处理，一个是歌曲暂停，一个是歌曲进度更新，这两种情况，歌词都是需要跟着改变的。\")]),n._v(\" \"),e(\"p\",[n._v(\"歌曲暂停 / 播放:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"const clickPlaying = (e, state) => {\\n  //...\\n  if (currentLyric.current) {\\n    currentLyric.current.togglePlay (currentTime*1000);\\n  }\\n};\\n\\n\")])])]),e(\"p\",[n._v(\"歌曲进度更新:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"const onProgressChange = curPercent => {\\n  //...\\n  if (currentLyric.current) {\\n    currentLyric.current.seek (newTime * 1000);\\n  }\\n};\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"normalplayer-中集成\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#normalplayer-中集成\"}},[n._v(\"#\")]),n._v(\" normalPlayer 中集成\")]),n._v(\" \"),e(\"p\",[n._v(\"先从父组件接收歌词相关的属性:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"const {\\n  currentLineNum,\\n  currentPlayingLyric,\\n  currentLyric\\n} = props;\\n\\n\")])])]),e(\"p\",[n._v(\"我们希望点击中间的 CD 之后切换为歌词，因此中间部分可以保存一个状态，根据它来显示不同的内容。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('import Scroll from \"../../../baseUI/scroll\";\\nimport { LyricContainer, LyricWrapper } from \"./style\";\\n\\nconst currentState = useRef (\"\");\\nconst lyricScrollRef = useRef ();\\nconst lyricLineRefs = useRef ([]);\\n\\n// 在 Middle 组件内\\n<Middle ref={cdWrapperRef} onClick={toggleCurrentState}>\\n  <CSSTransition\\n    timeout={400}\\n    classNames=\"fade\"\\n    in={currentState.current !== \"lyric\"}\\n  >\\n    <CDWrapper style={{visibility: currentState.current !== \"lyric\" ? \"visible\" : \"hidden\"}}>\\n      // 其余跟以前保持一致\\n      <p className=\"playing_lyric\">{currentPlayingLyric}</p>\\n    </CDWrapper>\\n  </CSSTransition>\\n  <CSSTransition\\n    timeout={400}\\n    classNames=\"fade\"\\n    in={currentState.current === \"lyric\"}\\n  >\\n    <LyricContainer>\\n      <Scroll ref={lyricScrollRef}>\\n        <LyricWrapper\\n          style={{visibility: currentState.current === \"lyric\" ? \"visible\" : \"hidden\"}}\\n          className=\"lyric_wrapper\"\\n        >\\n          {\\n            currentLyric\\n              ? currentLyric.lines.map ((item, index) => {\\n              // 拿到每一行歌词的 DOM 对象，后面滚动歌词需要！ \\n              lyricLineRefs.current [index] = React.createRef ();\\n              return (\\n                <p\\n                  className={`text ${\\n                    currentLineNum === index ? \"current\" : \"\"\\n                  }`}\\n                  key={item + index}\\n                  ref={lyricLineRefs.current [index]}\\n                >\\n                  {item.txt}\\n                </p>\\n              );\\n            })\\n          : <p className=\"text pure\"> 纯音乐，请欣赏。</p>}\\n        </LyricWrapper>\\n      </Scroll>\\n    </LyricContainer>\\n  </CSSTransition>\\n</Middle>\\n\\n')])])]),e(\"p\",[n._v(\"对应的 style.js 中，相应的样式代码如下:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('export const LyricContainer = styled.div`\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  top: 0;\\n  bottom: 0;\\n`;\\nexport const LyricWrapper = styled.div`\\n  position: absolute;\\n  left: 0;\\n  right: 0;\\n  width: 100%;\\n  box-sizing: border-box;\\n  text-align: center;\\n  p {\\n    line-height: 32px;\\n    color: rgba (255, 255, 255, 0.5);\\n    white-space: normal;\\n    font-size: ${style [\"font-size-l\"]};\\n    &.current {\\n      color: #fff;\\n    }\\n    &.pure {\\n      position: relative;\\n      top: 30vh;\\n    }\\n  }\\n`;\\n\\n')])])]),e(\"p\",[n._v(\"其中，toggleCurrentState 为改变 Middle 状态的方法，定义如下:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('const toggleCurrentState = () => {\\n  if (currentState.current !== \"lyric\") {\\n    currentState.current = \"lyric\";\\n  } else {\\n    currentState.current = \"\";\\n  }\\n};\\n\\n')])])]),e(\"p\",[n._v(\"这个时候打开播放器，可以完整的看到歌词了，但是你滑动进度条，歌词并没有跟着动。那这是什么原因呢？\")]),n._v(\" \"),e(\"p\",[n._v(\"因为父组件 currentLine 已经改变，而 normalPlayer 的歌词并没有滚动到相应位置。\")]),n._v(\" \"),e(\"p\",[n._v(\"现在我们就来监听 currentLine 变量，当它改变时，来进行一些歌词滚动操作。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('import { useEffect } from \"react\";\\n\\nuseEffect (() => {\\n  if (!lyricScrollRef.current) return;\\n  let bScroll = lyricScrollRef.current.getBScroll ();\\n  if (currentLineNum > 5) {\\n    // 保持当前歌词在第 5 条的位置\\n    let lineEl = lyricLineRefs.current [currentLineNum - 5].current;\\n    bScroll.scrollToElement (lineEl, 1000);\\n  } else {\\n    // 当前歌词行数 <=5, 直接滚动到最顶端\\n    bScroll.scrollTo (0, 0, 1000);\\n  }\\n}, [currentLineNum]);\\n\\n')])])]),e(\"p\",[n._v(\"现在歌词的功能就非常正常了。\")]),n._v(\" \"),e(\"p\",[n._v(\"不过还有一个小小的 bug，当在歌词界面退出播放器的时候，下次进来的时候并不是 CD 先进来，我们在退出播放器的时候将状态还原。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('const afterLeave = () => {\\n  //...\\n  currentState.current = \"\";\\n};\\n\\n')])])]),e(\"p\",[n._v(\"到目前为止，歌词的功能就集成完毕了。从下小节开始，我们进入到搜索模块的开发。大家加油！\")])])}),[],!1,null,null,null);r.default=c.exports}}]);","extractedComments":[]}