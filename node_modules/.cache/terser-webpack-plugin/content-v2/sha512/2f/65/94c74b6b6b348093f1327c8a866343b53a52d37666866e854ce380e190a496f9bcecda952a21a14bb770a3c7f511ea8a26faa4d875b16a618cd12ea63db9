{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[178],{534:function(t,e,a){\"use strict\";a.r(e);var s=a(42),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"第-2-节-基本数据处理-·-字符串和数字\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第-2-节-基本数据处理-·-字符串和数字\"}},[t._v(\"#\")]),t._v(\" 第 2 节 基本数据处理 · 字符串和数字\")]),t._v(\" \"),a(\"p\",[t._v(\"无论在任何的现代编程语言中，最基本的数据格式都会是字符串和数字。字符串用于表达人类文明的自然语言，数字用于表达量化世界的各种数值。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_2-1-字符串\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-字符串\"}},[t._v(\"#\")]),t._v(\" 2.1 字符串\")]),t._v(\" \"),a(\"p\",[t._v(\"字符串在自然世界中充当着非常重要的角色，所有的自然语言（比如汉语、英语等）都由多个字符组成，比如经典的 “Hello World” 这句话则由 11 个字符组成：\"),a(\"code\",[t._v(\"H,e,l,l,o,<space>,W,o,r,l,d\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"而当我们在希望使用计算机程序来理解我们平常所说的自然语言时，我们则需要对包含了目标自然语言的字符串进行拆分，如分词算法；同时当我们需要使用计算机程序来自动化地完成一些自然语言表达时，如自动组成“今天你有 3 个待办事务”，则需要对多段字符串进行组合而变成一个字符串；当我们想要从寻找字符串中符合“XXX 你好，我是 XXX”句式的文字时，我们又应该如何进行检索呢？别着急，我们一步一步来。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-1-1-创建字符串\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-1-创建字符串\"}},[t._v(\"#\")]),t._v(\" 2.1.1 创建字符串\")]),t._v(\" \"),a(\"p\",[t._v(\"在 JavaScript 中创建一个字符串跟其他语言并没有较大的区别，可以分别使用 \"),a(\"code\",[t._v(\"'\")]),t._v(\"、\"),a(\"code\",[t._v('\"')]),t._v(\" 和 \"),a(\"code\",[t._v(\"`\")]),t._v(\" 作为边界标识。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const str1 = 'string 1'\\nconst str2 = \\\"string 2\\\"\\nconst str3 = `string 3`\\n\\n\")])])]),a(\"p\",[t._v(\"从 JavaScript 的语法定义上 \"),a(\"code\",[t._v(\"'\")]),t._v(\" 和 \"),a(\"code\",[t._v('\"')]),t._v(\" 并没有太大的差别，但是 \"),a(\"code\",[t._v(\"`\")]),t._v(\" 的用途较为特殊。虽然 \"),a(\"code\",[t._v(\"`\")]),t._v(\" 同样可以以与 \"),a(\"code\",[t._v(\"'\")]),t._v(\" 和 \"),a(\"code\",[t._v('\"')]),t._v(\" 一样的使用方式使用，但也可以有更高级的用法。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const target = 'World'\\nconst word = `Hello ${target}` //=> Hello World\\n\\n\")])])]),a(\"p\",[t._v(\"同时 \"),a(\"code\",[t._v(\"`\")]),t._v(\" 也可以用于创建一个“多行字符串”，即字符串内容中包含多行文本。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const str = `\\nHello\\nWorld\\n`\\n\\n//=>\\n// Hello\\n// World\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"_2-1-2-分割字符串\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-2-分割字符串\"}},[t._v(\"#\")]),t._v(\" 2.1.2 分割字符串\")]),t._v(\" \"),a(\"p\",[t._v('当我们在学习任何一门编程语言时，书本或者老师教我们的第一行代码往往是“如何输出 Hello World”，如上一小节中。而在数据科学领域中，又应该以什么来充当这个 \"Hello World\" 的例子呢？')]),t._v(\" \"),a(\"p\",[t._v(\"一般来说人们都会使用\"),a(\"strong\",[t._v(\"词频统计\")]),t._v('作为数据科学的 \"Hello World\"，简单来说就是对一段英语内容中的单词进行频次（出现次数）统计。')]),t._v(\" \"),a(\"p\",[t._v(\"我们在这里选取 MIT 开源协议中的一部分内容：\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v('Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:')]),t._v(\" \"),a(\"p\",[t._v(\"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\")]),t._v(\" \"),a(\"p\",[t._v('THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.')])]),t._v(\" \"),a(\"p\",[t._v(\"我们在进行词频统计之前，我们首先需要对源内容进行预处理。首先我们要了解的是，我们可以看到这段内容中有小写字母、大写字母以及标点符号（包括逗号、句号、括号、双引号、斜杠和冒号）。\")]),t._v(\" \"),a(\"p\",[t._v(\"而从语言角度，\"),a(\"code\",[t._v(\"HELLO\")]),t._v(\"、\"),a(\"code\",[t._v(\"hello\")]),t._v(\" 和 \"),a(\"code\",[t._v(\"Hello\")]),t._v(\" 都是一样的，所以我们需要先完成以下预处理任务：\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"去除文本中的标点符号、数字\")]),t._v(\" \"),a(\"li\",[t._v(\"将所有大写字母转换为小写字母\")])]),t._v(\" \"),a(\"p\",[t._v('假设原文为 \"Hey dude, how is it going?\"，则需要首先转换为 \"hey dude how is it going\"。')]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"去除文本中的标点符号\")])]),t._v(\" \"),a(\"p\",[t._v(\"在做任何需求之前，都需要先对需求的上下文进行多方位理解，比如去除标点符号、数字这个需求在全英语的语境下可以说是约等于只保留英文字母。这样我们就可以从文本中直接筛选出英文字母和空格即可，这里可以使用 ASCII 码进行甄别。大写字母的 ASCII 码范围为 65 到 90，即 \"),a(\"code\",[t._v(\"A\")]),t._v(\" 到 \"),a(\"code\",[t._v(\"Z\")]),t._v(\"，而小写字母则为 97 到 122，空格的 ASCII 码为 32，换行符的 ASCII 码为 10。在 JavaScript 可以用 \"),a(\"code\",[t._v(\"string.charCodeAt()\")]),t._v(\" 方法获取字符的 ASCII 码。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const originalText = 'Hey dude, how is it going?'\\n\\nlet wordOnlyText = ''\\n\\nfor (let i = 0; i < originalText.length; ++i) {\\n  const letter = originalText[i]\\n  const asciiCode = letter.charCodeAt()\\n\\n  if ((asciiCode >= 65 && asciiCode <= 90) || (asciiCode >= 97 && asciiCode <= 122) || asciiCode === 32) {\\n    wordOnlyText += letter\\n  }\\n}\\n\\nconsole.log(wordOnlyText) //=> \\\"Hey dude how is it going\\\"\\n\\n\")])])]),a(\"blockquote\",[a(\"p\",[t._v(\"数值变量 \"),a(\"code\",[t._v(\"i\")]),t._v(\" 使用表达式 \"),a(\"code\",[t._v(\"++i\")]),t._v(\" 的意义为将其数值加 1，并将其结果作为该表达式的值；而表达式 \"),a(\"code\",[t._v(\"i++\")]),t._v(\" 则为将其数值加 1，但返回 \"),a(\"code\",[t._v(\"i\")]),t._v(\" 的原值。\")])]),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"将所有大写字母转换为小写字母\")])]),t._v(\" \"),a(\"p\",[t._v(\"上面我们用到了 \"),a(\"code\",[t._v(\"string.charCodeAt()\")]),t._v(\" 方法来获取字符的 ASCII 码，那么自然也有对应的方法用于将 ASCII 码转换为对应字符 \"),a(\"code\",[t._v(\"String.fromCharCode(code)\")]),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"而从字母的 ASCII 码范围可以看到，将大写字母的 ASCII 码数值加上 32 便是其对应小写字母的 ASCII 码数值。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"let lowerCaseText = ''\\n\\nfor (let i = 0; i < wordOnlyText.length; ++i) {\\n  const letter = wordOnlyText[i]\\n  const asciiCode = letter.charCodeAt()\\n  \\n  if (asciiCode >= 65 && asciiCode <= 90) {\\n    lowerCaseText += String.fromCharCode(asciiCode + 32)\\n  } else {\\n    lowerCaseText += letter\\n  }\\n}\\n\\nconsole.log(lowerCaseText) //=> \\\"hey dude how is it going\\\"\\n\\n\")])])]),a(\"p\",[t._v(\"幸运的是，在 JavaScript 中早就已经内置了将文本中的大写字母转换为小写字母的 API 了 —— \"),a(\"code\",[t._v(\"string.toLowerCase()\")]),t._v(\"。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const lowerCaseText = wordOnlyText.toLowerCase()\\n\\n\")])])]),a(\"p\",[t._v(\"完成了文本的预处理之后，就可以将文本数据进行分割了。而最主要用到的方法便是 \"),a(\"code\",[t._v(\"string.split(separator)\")]),t._v(\"，其中这个 \"),a(\"code\",[t._v(\"separator\")]),t._v(\" 则是定义了用于分割字符串内容的“分割符”。比如在该需求中，我们已经将文本内容进行了预处理，单词与单词之间的分割符则是空格。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const originalText = `\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n`\\n\\nlet wordOnlyText = ''\\n\\nfor (let i = 0; i < originalText.length; ++i) {\\n  const letter = originalText[i]\\n  const asciiCode = letter.charCodeAt()\\n\\n  if ((asciiCode >= 65 && asciiCode <= 90) || (asciiCode >= 97 && asciiCode <= 122) || asciiCode === 32) {\\n    wordOnlyText += letter\\n  }\\n}\\n\\nconst lowerCaseText = wordOnlyText.toLowerCase()\\n\\n/*---------------------------------------------------------------------*/\\n\\nconst words = lowerCaseText.split(' ')\\n\\nconsole.log(words.length) //=> 163\\n\\n\")])])]),a(\"p\",[t._v(\"而如何实现词频统计，我们先稍作休息，后面的章节继续来学习。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-1-3-组装字符串\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-3-组装字符串\"}},[t._v(\"#\")]),t._v(\" 2.1.3 组装字符串\")]),t._v(\" \"),a(\"p\",[t._v(\"除了对字符串进行拆分以外，我们也常常需要将不同的信息通过各种方式拼装成一个完整的字符串信息。最常见的例子便是我们几乎每天都能遇见的，由程序自动发送的自动短信、自动邮件等。要学习如何在 JavaScript 中进行字符串组装，我们需要一步一步来。\")]),t._v(\" \"),a(\"p\",[t._v(\"字符串之间的连接可以直接使用 \"),a(\"code\",[t._v(\"+\")]),t._v(\" 运算符完成。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const str1 = 'Hello'\\nconst str2 = 'World'\\n\\nconsole.log(str1 + ' ' + str2) //=> \\\"Hello World\\\"\\n\\n\")])])]),a(\"p\",[t._v(\"这是最基本的字符串连接方式，这适用于数据量较小的字符串信息拼接。若当数据量比较大时，需要将多个数据量“嵌入”到一个文本模板中。一般情况下，开发工程师会选择一个较为顺手的模板引擎来实现这个功能，但在这里我们一切从简，使用 JavaScript 中的字符串模板特性 \"),a(\"code\",[t._v(\"`\")]),t._v(\" 来完成这个需求。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const name = 'Will Wen Gunn'\\nconst level = 'Gold'\\n\\nconst message = `\\nHello, ${name}.\\nHere is Turing Airline, you are the ${level} member of our Privilege Club.\\n`\\n\\nconsole.log(message)\\n//=>\\n// Hello, Will Wen Gunn.\\n// Here is Turing Airline, you are the Gold member of our Privilege Club.\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"_2-1-4-正则表达式\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-4-正则表达式\"}},[t._v(\"#\")]),t._v(\" 2.1.4 正则表达式\")]),t._v(\" \"),a(\"p\",[t._v(\"我们回过头来看看我们在进行字符串分割的时候，需要剔除文本中非英文字母的内容。而前面我们所使用的方法为判定每一个字符的 ASCII 码是否符合英文字母的范围。这种方法虽然容易理解，但很显然这并非最好的办法。而正则表达式的使用可以让这个需求的实现变得非常简单。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const originalText = 'Hey dude, how is it going?'\\n\\nconst words = originalText.toLowerCase().match(/\\\\w+/g)\\n\\nconsole.log(words.length) //=> 6\\n\\n\")])])]),a(\"p\",[t._v(\"当然，因为正则表达式这一个知识点单独拿出来就可以写一本书了，所以这里我们不再详细阐述。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_2-2-数字\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-数字\"}},[t._v(\"#\")]),t._v(\" 2.2 数字\")]),t._v(\" \"),a(\"p\",[t._v(\"除了自然语言以外，当我们需要准确地表达世界上任何事物时，我们还需要有数字的帮助。\")]),t._v(\" \"),a(\"blockquote\",[a(\"ul\",[a(\"li\",[t._v(\"我今年 18 岁\")]),t._v(\" \"),a(\"li\",[t._v(\"我有 3 个孩子\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-2-1-四则运算\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-1-四则运算\"}},[t._v(\"#\")]),t._v(\" 2.2.1 四则运算\")]),t._v(\" \"),a(\"p\",[t._v(\"四则运算是所有数学运算的基础，懂得如何对数字做四则运算是进行后续更高深运算的首要前提。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const a = 3\\nconst b = 4\\n\\na + b //=> 7\\nb - a //=> 1\\na * b //=> 12\\na / b //=> 0.75\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"_2-2-2-优先级\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-2-优先级\"}},[t._v(\"#\")]),t._v(\" 2.2.2 优先级\")]),t._v(\" \"),a(\"p\",[t._v(\"我们在计算数学式子的时候经常会碰到这样的情况：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=2%20%2B%203%20*%204%20%3D%2014%20%5Cquad%20(1)%5C%5C%0A(2%20%2B%203)%20*%204%20%3D%2020%20%5Cquad%20(2)\",alt:\"2 + 3 * 4 = 14 \\\\quad (1)\\\\(2 + 3) * 4 = 20 \\\\quad (2)\"}})]),t._v(\" \"),a(\"p\",[t._v(\"由于在四则运算中乘法和除法拥有比加法和减法更高的优先级，若当我们要计算 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=2\",alt:\"2\"}}),t._v(\" 与 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=3\",alt:\"3\"}}),t._v(\" 的和再乘以 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=4\",alt:\"4\"}}),t._v(\" 的结果时就需要像 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=(2)\",alt:\"(2)\"}}),t._v(\" 式这样写，否则由于优先级的原因会导致错误的结果，如式子 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=(1)\",alt:\"(1)\"}}),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"在 JavaScript 中也同样存在这样的问题，当然我们也是可以使用括号来解决。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"console.log(2 + 3 * 4) //=> 14\\nconsole.log((2 + 3) * 4) //=> 20\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"_2-2-3-幂运算\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-3-幂运算\"}},[t._v(\"#\")]),t._v(\" 2.2.3 幂运算\")]),t._v(\" \"),a(\"p\",[t._v(\"问：设有一个边长为 3 厘米的正方体，求该正方体的体积为多少？\")]),t._v(\" \"),a(\"p\",[t._v(\"答：\"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=V%20%3D%203%20%5Ctimes%203%20%5Ctimes%203%20%3D%2027\",alt:\"V = 3 \\\\times 3 \\\\times 3 = 27\"}})]),t._v(\" \"),a(\"p\",[t._v(\"问：设一个正方体的边长为 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=n\",alt:\"n\"}}),t._v(\"，求该正方体的体积为多少？\")]),t._v(\" \"),a(\"p\",[t._v(\"答：\"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=V%20%3D%20n%5E3\",alt:\"V = n^3\"}})]),t._v(\" \"),a(\"p\",[t._v(\"幂运算，又称指数运算，是数学中非常重要的一种运算方式，具体定义便是同一个数值的多次自乘结果。有了幂运算才有后面更为深入的对数运算、导数运算、方差运算等等。在 JavaScript 中，使用 \"),a(\"code\",[t._v(\"Math.pow(base, exponent)\")]),t._v(\" 来进行幂运算，其中 \"),a(\"code\",[t._v(\"base\")]),t._v(\" 为底数即上式中的 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=n\",alt:\"n\"}}),t._v(\"，而 \"),a(\"code\",[t._v(\"exponent\")]),t._v(\" 则为指数即右上角的 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=3\",alt:\"3\"}}),t._v(\"。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const V1 = 3 * 3 * 3\\nconsole.log(V1) //=> 27\\n\\nconst V2 = Math.pow(3, 3)\\nconsole.log(V2) //=> 27\\n\\nconst calcCubeVolume = function(sideLength) {\\n  return Math.pow(sideLength, 3)\\n}\\nconsole.log(calcCubeVolume(3)) //=> 27\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"_2-2-4-对数运算\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-4-对数运算\"}},[t._v(\"#\")]),t._v(\" 2.2.4 对数运算\")]),t._v(\" \"),a(\"p\",[t._v(\"当人类发明了幂运算之后，为了能够知道一个数究竟是由什么数进行了幂运算所得的，所以有幂运算的逆转运算——对数运算。\")]),t._v(\" \"),a(\"blockquote\",[a(\"ul\",[a(\"li\",[t._v(\"27 是 3 的多少次方？\")]),t._v(\" \"),a(\"li\",[t._v(\"1024 是 2 的多少次方？\")])])]),t._v(\" \"),a(\"p\",[t._v(\"在数学中这就涉及了\"),a(\"strong\",[t._v(\"对数运算\")]),t._v(\"，比如求“27 是 3 的多少次方”则为\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=%5Clog_3%2027%20%3D%203%20%5C%5C%0A%5Clog_2%201024%20%3D%2010\",alt:\"\\\\log_3 27 = 3 \\\\\\\\log_2 1024 = 10\"}})]),t._v(\" \"),a(\"p\",[t._v(\"而在数学中有一个神奇的数值\"),a(\"strong\",[t._v(\"自然对数\")]),t._v(\" \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=e\",alt:\"e\"}}),t._v(\"，关于这个数值的传奇故事你可以搜索到非常多的文章甚至视频。在 JavaScript 中的 \"),a(\"code\",[t._v(\"Math.log(x)\")]),t._v(\" 函数只接受一个参数，而这个函数的直接作用便是计算以自然对数 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=e\",alt:\"e\"}}),t._v(\" 为底 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=x\",alt:\"x\"}}),t._v(\" 的对数。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=%5Clog_e%20x\",alt:\"\\\\log_e x\"}})]),t._v(\" \"),a(\"p\",[t._v(\"那么就很奇怪了，我们要如何在 JavaScript 中计算并非以 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=e\",alt:\"e\"}}),t._v(\" 为底的对数结果呢？这得先回到数学推导上来。对数中有一个经典公式为\"),a(\"strong\",[t._v(\"换底公式\")]),t._v(\"，定义如下：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=%5Clog_%5Calpha%20x%3D%5Cfrac%7B%5Clog_%5Cbeta%20x%7D%7B%5Clog_%5Cbeta%20%5Calpha%7D\",alt:\"\\\\log_\\\\alpha x=\\\\frac{\\\\log_\\\\beta x}{\\\\log_\\\\beta \\\\alpha}\"}})]),t._v(\" \"),a(\"p\",[t._v(\"具体推导可以参考\"),a(\"a\",{attrs:{href:\"https://zh.wikipedia.org/wiki/%E5%AF%B9%E6%95%B0\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"维基百科页面 · 对数\"),a(\"OutboundLink\")],1),t._v(\"。那么代入我们前面公式中就可以用这样的方式解决了。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=%5Clog_%5Calpha%20x%3D%5Cfrac%7B%5Clog_e%20x%7D%7B%5Clog_e%20%5Calpha%7D\",alt:\"\\\\log_\\\\alpha x=\\\\frac{\\\\log_e x}{\\\\log_e \\\\alpha}\"}})]),t._v(\" \"),a(\"p\",[t._v(\"换成使用 JavaScript 实现便是：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"function getBaseLog(base, x) {\\n  return Math.log(x) / Math.log(base)\\n}\\n\\nconsole.log(getBaseLog(2, 1024)) //=> 10\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"_2-2-5-求和\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-5-求和\"}},[t._v(\"#\")]),t._v(\" 2.2.5 求和\")]),t._v(\" \"),a(\"p\",[t._v(\"当两个数值相加时用一个加号可以完成，当三个数值相加时用两个加号可以完成，但若需要求 1000 个数值甚至更多的数值相加的时候，数学表达式要怎么表达呢？\")]),t._v(\" \"),a(\"p\",[t._v(\"假设数列 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=L\",alt:\"L\"}}),t._v(\" 为有 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=n\",alt:\"n\"}}),t._v(\" 个元素的自然数数列，其中 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=L_i%20%5C%3B%20(1%20%5Cle%20i%20%5Cle%20n)\",alt:\"L_i ; (1 \\\\le i \\\\le n)\"}}),t._v(\" 为数列 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=L\",alt:\"L\"}}),t._v(\" 的第 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=i\",alt:\"i\"}}),t._v(\" 个元素。那么求数列 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=L\",alt:\"L\"}}),t._v(\" 的元素总和 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=S\",alt:\"S\"}}),t._v(\" 可以用以下公式表达：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=S%3D%5Csum_%7Bi%3D1%7D%7B%5En%7DL_%7Bi%7D\",alt:\"S=\\\\sum_{i=1}{^n}L_{i}\"}})]),t._v(\" \"),a(\"p\",[t._v(\"比较可惜的是，在 JavaScript 中并没有直接等同于这个 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=%5Csum%7B%7D\",alt:\"\\\\sum{}\"}}),t._v(\" 的 API。但是我们可以手动使用\"),a(\"strong\",[t._v(\"循环\")]),t._v(\"的方式来实现这个需求。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"let S = 0\\nconst L = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\\nconst n = L.length\\n\\nfor (let i = 0; i < n; ++i) {\\n  S += L[i]\\n}\\n\\nconsole.log(S) //=> 55\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"_2-2-6-求余\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-6-求余\"}},[t._v(\"#\")]),t._v(\" 2.2.6 求余\")]),t._v(\" \"),a(\"p\",[t._v(\"求余可能是在数学中比较少见的一种运算，但是计算机领域中却会经常使用，比如进制之间的转换等等。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"5 % 2 == 1\\n4 % 2 == 0\\n\\n\")])])]),a(\"h2\",{attrs:{id:\"小结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[t._v(\"#\")]),t._v(\" 小结\")]),t._v(\" \"),a(\"p\",[t._v(\"在本节学习中，你学会了如何使用 JavaScript 创建一个字符串以及一个数字，并且学会了如何对它们进行计算、转换、拼接以及拆分。那么为了能够更好地理解和吸收本节的知识，动动手完成以下的习题吧。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"习题\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#习题\"}},[t._v(\"#\")]),t._v(\" 习题\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"尝试使用 JavaScript 将字符串 \"),a(\"code\",[t._v('\"Hello World\"')]),t._v(\" 中的小写字母全部转为大写字母。\")]),t._v(\" \"),a(\"li\",[t._v(\"尝试筛选出章节 \"),a(\"strong\",[t._v(\"2.1.2\")]),t._v(\" 中 MIT 开源协议的文本中的大写英文字母。\")]),t._v(\" \"),a(\"li\",[t._v(\"使用 JavaScript 完成以下式子的计算。\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=1%20%2B%20(2%20%2B%203)%20*%204%20%5Cdiv%205%20-%20(6%20%2B%207)\",alt:\"1 + (2 + 3) * 4 \\\\div 5 - (6 + 7)\"}})]),t._v(\" \"),a(\"ol\",{attrs:{start:\"4\"}},[a(\"li\",[t._v(\"定义函数 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=F\",alt:\"F\"}}),t._v(\"，接受唯一参数长度为 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=i\",alt:\"i\"}}),t._v(\" 的数列 \"),a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=L\",alt:\"L\"}}),t._v(\"。使用 JavaScript 实现该函数。\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://juejin.im/equation?tex=F(L)%20%3D%20L_1%20*%20L_2%20*%20%5Ccdots%20*%20L_i\",alt:\"F(L) = L_1 * L_2 * \\\\cdots * L_i\"}})])])}),[],!1,null,null,null);e.default=n.exports}}]);","extractedComments":[]}