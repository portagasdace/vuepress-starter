{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[238],{593:function(e,t,a){\"use strict\";a.r(t);var r=a(42),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"实战篇-8-订单创建-使用事务\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实战篇-8-订单创建-使用事务\"}},[e._v(\"#\")]),e._v(\" 实战篇 8：订单创建 —— 使用事务\")]),e._v(\" \"),a(\"p\",[e._v(\"前面三节，我们用了较多的篇幅来交代用户身份管理与验证的技术实现，解决完用户身份验证的问题之后，我们终于可以开始实现与用户身份相关的订单创建的功能。\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"用户下单的订单表结构设计\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用户下单的订单表结构设计\"}},[e._v(\"#\")]),e._v(\" 用户下单的订单表结构设计\")]),e._v(\" \"),a(\"p\",[e._v(\"对于一笔订单记录，往往涉及订单的订单编号，创建时间，订单的用户，支付状态，支付流水号，以及订单的商品详情。由于订单的收件地址涉及地址管理的相关业务逻辑，实际逻辑与订单商品的逻辑相仿，故而在小册中作精简设计。\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"_1-orders-表结构定义与迁移\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-orders-表结构定义与迁移\"}},[e._v(\"#\")]),e._v(\" 1. orders 表结构定义与迁移\")]),e._v(\" \"),a(\"p\",[e._v(\"订单 orders 的表结构定义：\")]),e._v(\" \"),a(\"p\",[e._v(\"字段\")]),e._v(\" \"),a(\"p\",[e._v(\"字段类型\")]),e._v(\" \"),a(\"p\",[e._v(\"字段说明\")]),e._v(\" \"),a(\"p\",[e._v(\"id\")]),e._v(\" \"),a(\"p\",[e._v(\"integer\")]),e._v(\" \"),a(\"p\",[e._v(\"订单的 ID，自增\")]),e._v(\" \"),a(\"p\",[e._v(\"user_id\")]),e._v(\" \"),a(\"p\",[e._v(\"integer\")]),e._v(\" \"),a(\"p\",[e._v(\"用户的 ID\")]),e._v(\" \"),a(\"p\",[e._v(\"payment_status\")]),e._v(\" \"),a(\"p\",[e._v(\"enum\")]),e._v(\" \"),a(\"p\",[e._v(\"付款状态\")]),e._v(\" \"),a(\"p\",[e._v(\"创建 orders 表的迁移文件 create-orders-table:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"$ node_modules/.bin/sequelize migration:create --name create-orders-table\\n\\n\")])])]),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"// migrations/create-orders-table.js\\nmodule.exports = {\\n  up: (queryInterface, Sequelize) => queryInterface.createTable(\\n    'orders',\\n    {\\n      id: {\\n        type: Sequelize.INTEGER,\\n        autoIncrement: true,\\n        primaryKey: true,\\n      },\\n      user_id: {\\n        type: Sequelize.INTEGER,\\n        allowNull: false,\\n      },\\n      payment_status: {\\n        type: Sequelize.ENUM('0', '1'),  // 0 未支付， 1 已支付\\n        defaultValue: '0',\\n      },\\n      created_at: Sequelize.DATE,\\n      updated_at: Sequelize.DATE,\\n    },\\n  ),\\n\\n  down: queryInterface => queryInterface.dropTable('orders'),\\n};\\n\\n\\n\")])])]),a(\"p\",[e._v(\"在 models 中定义 orders 表结构:\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"// models/orders.js\\n\\nmodule.exports = (sequelize, DataTypes) => sequelize.define(\\n  'orders',\\n  {\\n    id: {\\n      type: DataTypes.INTEGER,\\n      primaryKey: true,\\n      autoIncrement: true\\n    },\\n    user_id: {\\n      type: DataTypes.INTEGER,\\n      allowNull: false,\\n    },\\n    payment_status: {\\n      type: DataTypes.ENUM('0', '1'),  // 0 未支付， 1 已支付\\n      defaultValue: '0',\\n    },\\n  },\\n  {\\n    tableName: 'orders',\\n  },\\n);\\n\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"_2-order-goods-表结构定义与迁移\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-order-goods-表结构定义与迁移\"}},[e._v(\"#\")]),e._v(\" 2. order_goods 表结构定义与迁移\")]),e._v(\" \"),a(\"p\",[e._v(\"订单商品表 order_goods 的表结构定义：\")]),e._v(\" \"),a(\"p\",[e._v(\"字段\")]),e._v(\" \"),a(\"p\",[e._v(\"字段类型\")]),e._v(\" \"),a(\"p\",[e._v(\"字段说明\")]),e._v(\" \"),a(\"p\",[e._v(\"id\")]),e._v(\" \"),a(\"p\",[e._v(\"integer\")]),e._v(\" \"),a(\"p\",[e._v(\"订单商品的 ID，自增\")]),e._v(\" \"),a(\"p\",[e._v(\"order_id\")]),e._v(\" \"),a(\"p\",[e._v(\"integer\")]),e._v(\" \"),a(\"p\",[e._v(\"订单的 ID\")]),e._v(\" \"),a(\"p\",[e._v(\"goods_id\")]),e._v(\" \"),a(\"p\",[e._v(\"integer\")]),e._v(\" \"),a(\"p\",[e._v(\"商品的 ID\")]),e._v(\" \"),a(\"p\",[e._v(\"single_price\")]),e._v(\" \"),a(\"p\",[e._v(\"float\")]),e._v(\" \"),a(\"p\",[e._v(\"商品的价格\")]),e._v(\" \"),a(\"p\",[e._v(\"count\")]),e._v(\" \"),a(\"p\",[e._v(\"integer\")]),e._v(\" \"),a(\"p\",[e._v(\"商品的数量\")]),e._v(\" \"),a(\"p\",[e._v(\"创建 order-goods 表的迁移文件 create-order-goods-table：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"$ node_modules/.bin/sequelize migration:create --name create-order-goods-table\\n\\n\")])])]),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"// migrations/create-order-goods-table.js\\nmodule.exports = {\\n  up: (queryInterface, Sequelize) => queryInterface.createTable(\\n    'order_goods',\\n    {\\n      id: {\\n        type: Sequelize.INTEGER,\\n        autoIncrement: true,\\n        primaryKey: true,\\n      },\\n      order_id: {\\n        type: Sequelize.INTEGER,\\n        allowNull: false,\\n      },\\n      goods_id: {\\n        type: Sequelize.INTEGER,\\n        allowNull: false,\\n      },\\n      single_price: {\\n        type: Sequelize.FLOAT,\\n        allowNull: false,\\n      },\\n      count: {\\n        type: Sequelize.INTEGER,\\n        allowNull: false,\\n      },\\n      created_at: Sequelize.DATE,\\n      updated_at: Sequelize.DATE,\\n    },\\n  ),\\n\\n  down: queryInterface => queryInterface.dropTable('order_goods'),\\n};\\n\\n\\n\")])])]),a(\"p\",[e._v(\"在 models 中定义表结构：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"// models/order-goods.js\\n\\nmodule.exports = (sequelize, DataTypes) => sequelize.define(\\n  'order_goods',\\n  {\\n    id: {\\n      type: DataTypes.INTEGER,\\n      primaryKey: true,\\n      autoIncrement: true,\\n      \\n    },\\n    order_id: {\\n      type: DataTypes.INTEGER,\\n      allowNull: false,\\n    },\\n    goods_id: {\\n      type: DataTypes.INTEGER,\\n      allowNull: false,\\n    },\\n    single_price: {\\n      type: DataTypes.FLOAT,\\n      allowNull: false,\\n    },\\n    count: {\\n      type: DataTypes.INTEGER,\\n      allowNull: false,\\n    },\\n  },\\n  {\\n    tableName: 'order_goods',\\n  },\\n);\\n\\n\\n\")])])]),a(\"p\",[e._v(\"向数据库迁移 orders 与 order-goods 表：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"$ node_modules/.bin/sequelize db:migrate\\n\\n\")])])]),a(\"h2\",{attrs:{id:\"为通过身份验证的用户创建订单\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为通过身份验证的用户创建订单\"}},[e._v(\"#\")]),e._v(\" 为通过身份验证的用户创建订单\")]),e._v(\" \"),a(\"p\",[e._v(\"我们在《实战篇 2：接口契约与入参校验——使用 Swagger & Joi》一节，在 routes/orders.js 中为订单创建，预留过如下的入参校验的 API 接口配置：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"\\n// 参数校验\\n{\\n  method: 'POST',\\n  path: `/${GROUP_NAME}`,\\n  handler: async (request, reply) => {\\n    reply();\\n  },\\n  config: {\\n    tags: ['api', GROUP_NAME],\\n    description: '创建订单',\\n    validate: {\\n      payload: {\\n        goodsList: Joi.array().items(\\n          Joi.object().keys({\\n            goods_id: Joi.number().integer(),\\n            count: Joi.number().integer(),\\n          }),\\n        ),\\n      },\\n      ...jwtHeaderDefine,\\n    },\\n  },\\n},\\n\\n\")])])]),a(\"p\",[e._v(\"传入的订单商品信息以数组的方式描述，例如：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"// 参数示例\\n[\\n  { goods_id: 123, count: 1 },  // 1件 id 为123 的商品\\n  { goods_id: 124, count: 2 },  // 2件 id 为124 的商品\\n]\\n\\n\")])])]),a(\"p\",[e._v(\"后续的订单创建，将在 handler 的处理方法中继续展开。\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"理解事务的使用场景\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#理解事务的使用场景\"}},[e._v(\"#\")]),e._v(\" 理解事务的使用场景\")]),e._v(\" \"),a(\"p\",[e._v(\"从表结构的设计关系来看，创建一次订单，依赖于先创建产生一条 orders 表的记录，获得一个 order_id, 然后在 order_goods 表中通过 order_id 插入订单中的每一条商品记录，以最终完成一次完整的订单创建行为。中途若商品记录的插入遇到了失败，则一个订单记录的创建行为便是不完整的，orders 表中却产生了一条数据不完整的垃圾数据。在这样的场景下，我们可以尝试引入事务操作。\")]),e._v(\" \"),a(\"p\",[e._v(\"数据库中的事务是指单个逻辑所包含的一系列数据操作，要么全部执行，要么全部不执行。在一个事务中，可能会包含开始（start）、提交（commit）、回滚（rollback）等操作，Sequelize 通过 Transaction 类来实现事务相关功能。以满足一些对操作过程的完整性比较高的使用场景。\")]),e._v(\" \"),a(\"p\",[e._v(\"Sequelize 支持两种使用事务的方法：\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[e._v(\"托管事务\")]),e._v(\" \"),a(\"li\",[e._v(\"非托管事务\")])]),e._v(\" \"),a(\"p\",[e._v(\"托管事务基于 Promise 结果链进行自动提交或回滚。非托管事务则交由用户自行控制提交或回滚。\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"使用托管事务创建订单\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用托管事务创建订单\"}},[e._v(\"#\")]),e._v(\" 使用托管事务创建订单\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"async handler(request, reply) => {\\n  await models.sequelize.transaction((t) => {\\n    const result = models.orders.create(\\n      { user_id: request.auth.credentials.userId },\\n      { transaction: t },\\n    ).then((order) => {\\n      const goodsList = [];\\n      request.payload.goodsList.forEach((item) => {\\n        goodsList.push(models.order_goods.create({\\n          order_id: order.dataValues.id,\\n          goods_id: item.goods_id,\\n          // 此处单价的数值应该从商品表中反查出写入，出于教程的精简性而省略该步骤\\n          single_price: 4.9,\\n          count: item.count,\\n        }));\\n      });\\n      return Promise.all(goodsList);\\n    });\\n    return result;\\n  }).then(() => {\\n    // 事务已被提交\\n    reply('success');\\n  }).catch(() => {\\n    // 事务已被回滚\\n    reply('error');\\n  });\\n}\\n\\n\")])])]),a(\"p\",[e._v(\"无论是托管事务还是非托管事务，只要 sequelize.transaction 中抛出异常，sequelize.transaction 中所有关于数据库的操作都将被回滚。\")]),e._v(\" \"),a(\"p\",[e._v(\"更多功能请查看官方手册 \"),a(\"a\",{attrs:{href:\"http://docs.sequelizejs.com/manual/tutorial/transactions.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Transactions\"),a(\"OutboundLink\")],1),e._v(\" 。\")]),e._v(\" \"),a(\"blockquote\",[a(\"p\",[a(\"strong\",[e._v(\"GitHub 参考代码\")]),e._v(\" \"),a(\"a\",{attrs:{href:\"https://github.com/yeshengfei/hapi-tutorial/tree/master/chapter12/hapi-tutorial-1\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"chapter12/hapi-tutorial-1\"),a(\"OutboundLink\")],1)])]),e._v(\" \"),a(\"h2\",{attrs:{id:\"小结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[e._v(\"#\")]),e._v(\" 小结\")]),e._v(\" \"),a(\"p\",[e._v(\"关键词：request.auth.credentials，sequelize.transaction\")]),e._v(\" \"),a(\"p\",[e._v(\"本小节我们通过订单创建的案例，给同学们介绍了利用 request.auth.credentials 来解析 JWT，获取当前用户的身份标识，再利用 sequelize.transaction 完成数据库事务的使用，确保跨表的订单数据创建完整性。以帮助同学们在日后实现其他重要而涉及连续操作的业务时，很好地举一反三，有的放矢。\")]),e._v(\" \"),a(\"p\",[a(\"strong\",[e._v(\"本小节参考代码汇总\")])]),e._v(\" \"),a(\"p\",[e._v(\"GitHub 参考代码：\"),a(\"a\",{attrs:{href:\"https://github.com/yeshengfei/hapi-tutorial/tree/master/chapter12/hapi-tutorial-1\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"chapter12/hapi-tutorial-1\"),a(\"OutboundLink\")],1)]),e._v(\" \"),a(\"p\",[e._v(\"sequelize.transaction 更多操作参考官方手册：\"),a(\"a\",{attrs:{href:\"http://docs.sequelizejs.com/manual/tutorial/transactions.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Transactions\"),a(\"OutboundLink\")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}