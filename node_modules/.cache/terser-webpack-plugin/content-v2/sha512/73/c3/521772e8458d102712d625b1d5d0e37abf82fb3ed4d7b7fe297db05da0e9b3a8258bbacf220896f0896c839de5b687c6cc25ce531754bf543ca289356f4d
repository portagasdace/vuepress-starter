{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[316],{671:function(t,a,e){\"use strict\";e.r(a);var n=e(42),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"blockquote\",[e(\"p\",[t._v(\"本节代码对应 GitHub 分支: chapter8\")])]),t._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter8\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"仓库传送门\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"p\",[t._v(\"终于，我们进入了最精彩的环节，也是最有挑战的模块 ———— 播放器开发。\")]),t._v(\" \"),e(\"p\",[t._v(\"之前在不断地重构、更新代码，经过\"),e(\"code\",[t._v(\"组件拆分\")]),t._v(\"、\"),e(\"code\",[t._v(\"代码解耦\")]),t._v(\"，最后理想的版本终于打造完成。接下来给大家呈现的也是最后一版的代码，每个组件的代码尽量控制在了 300 行以内，而不是在第一版那样近千行代码挤在一个文件，非常不利于维护。\")]),t._v(\" \"),e(\"p\",[t._v(\"播放器是一个比较特别的组件，里面并没有涉及到 Ajax 的操作，反而全程都在\"),e(\"strong\",[t._v(\"依赖 store 里面的数据\")]),t._v(\"。因从，我们从数据层开始准备是一个比较明智的选择。\")]),t._v(\" \"),e(\"p\",[t._v(\"application 目录下新建 Player 文件夹，然后新建 store 目录，开始 redux 层的开发。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"_1-声明初始化-state\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-声明初始化-state\"}},[t._v(\"#\")]),t._v(\" 1. 声明初始化 state\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"//store/reducer.js\\nimport * as actionTypes from './constants';\\nimport {fromJS} from 'immutable';\\nimport { playMode } from './../../../api/config';\\n\\nconst defaultState = fromJS ({\\n  fullScreen: false,// 播放器是否为全屏模式\\n  playing: false, // 当前歌曲是否播放\\n  sequencePlayList: [], // 顺序列表 (因为之后会有随机模式，列表会乱序，因从拿这个保存顺序列表)\\n  playList: [],\\n  mode: playMode.sequence,// 播放模式\\n  currentIndex: -1,// 当前歌曲在播放列表的索引位置\\n  showPlayList: false,// 是否展示播放列表\\n  currentSong: {} \\n});\\n\\n\")])])]),e(\"p\",[t._v(\"注意 playMode 对象应该在 api/config.js 中定义，\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"// 播放模式\\nexport const playMode = {\\n  sequence: 0,\\n  loop: 1,\\n  random: 2\\n};\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"_2-定义-constants\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-定义-constants\"}},[t._v(\"#\")]),t._v(\" 2. 定义 constants\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"//store/constants.js\\nexport const SET_CURRENT_SONG = 'player/SET_CURRENT_SONG';\\nexport const SET_FULL_SCREEN = 'player/SET_FULL_SCREEN';\\nexport const SET_PLAYING_STATE = 'player/SET_PLAYING_STATE';\\nexport const SET_SEQUECE_PLAYLIST = 'player/SET_SEQUECE_PLAYLIST';\\nexport const SET_PLAYLIST = 'player/SET_PLAYLIST';\\nexport const SET_PLAY_MODE = 'player/SET_PLAY_MODE';\\nexport const SET_CURRENT_INDEX = 'player/SET_CURRENT_INDEX';\\nexport const SET_SHOW_PLAYLIST = 'player/SET_SHOW_PLAYLIST';\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"_3-定义-reducer-函数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-定义-reducer-函数\"}},[t._v(\"#\")]),t._v(\" 3. 定义 reducer 函数\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"//store/reducer.js\\nexport default (state = defaultState, action) => {\\n  switch (action.type) {\\n    case actionTypes.SET_CURRENT_SONG:\\n      return state.set ('currentSong', action.data);\\n    case actionTypes.SET_FULL_SCREEN:\\n      return state.set ('fullScreen', action.data);\\n    case actionTypes.SET_PLAYING_STATE:\\n      return state.set ('playing', action.data);\\n    case actionTypes.SET_SEQUECE_PLAYLIST:\\n      return state.set ('sequencePlayList', action.data);\\n    case actionTypes.SET_PLAYLIST:\\n      return state.set ('playList', action.data);\\n    case actionTypes.SET_PLAY_MODE:\\n      return state.set ('mode', action.data);\\n    case actionTypes.SET_CURRENT_INDEX:\\n      return state.set ('currentIndex', action.data);\\n    case actionTypes.SET_SHOW_PLAYLIST:\\n      return state.set ('showPlayList', action.data);\\n    default:\\n      return state;\\n  }\\n}\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"_4-编写具体的-action\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-编写具体的-action\"}},[t._v(\"#\")]),t._v(\" 4. 编写具体的 action\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"//store/actionCreators.js\\nimport { SET_CURRENT_SONG, SET_FULL_SCREEN, SET_PLAYING_STATE, SET_SEQUECE_PLAYLIST, SET_PLAYLIST, SET_PLAY_MODE, SET_CURRENT_INDEX, SET_SHOW_PLAYLIST, DELETE_SONG, INSERT_SONG } from './constants';\\nimport { fromJS } from 'immutable';\\n\\nexport const changeCurrentSong = (data) => ({\\n  type: SET_CURRENT_SONG,\\n  data: fromJS (data)\\n});\\n\\nexport const changeFullScreen =  (data) => ({\\n  type: SET_FULL_SCREEN,\\n  data\\n});\\n\\nexport const changePlayingState = (data) => ({\\n  type: SET_PLAYING_STATE,\\n  data\\n});\\n\\nexport const changeSequecePlayList = (data) => ({\\n  type: SET_SEQUECE_PLAYLIST,\\n  data: fromJS (data)\\n});\\n\\nexport const changePlayList  = (data) => ({\\n  type: SET_PLAYLIST,\\n  data: fromJS (data)\\n});\\n\\nexport const changePlayMode = (data) => ({\\n  type: SET_PLAY_MODE,\\n  data\\n});\\n\\nexport const changeCurrentIndex = (data) => ({\\n  type: SET_CURRENT_INDEX,\\n  data\\n});\\n\\nexport const changeShowPlayList = (data) => ({\\n  type: SET_SHOW_PLAYLIST,\\n  data\\n});\\n\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"_5-将相关变量导出\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-将相关变量导出\"}},[t._v(\"#\")]),t._v(\" 5. 将相关变量导出\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"//store/index.js\\nimport reducer from './reducer'\\nimport * as actionCreators from './actionCreators'\\nimport * as constants from './constants'\\n\\nexport { reducer, actionCreators, constants };\\n\\n\")])])]),e(\"p\",[t._v(\"然后在全局 store 注册：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('//store/reducer.js\\nimport { reducer as playerReducer } from \"../application/Player/store/index\";\\n\\nexport default combineReducers ({\\n  //...\\n  player: playerReducer\\n});\\n\\n')])])]),e(\"h2\",{attrs:{id:\"播放器组件连接数据\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#播放器组件连接数据\"}},[t._v(\"#\")]),t._v(\" 播放器组件连接数据\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('//Player/index.js\\nimport React, { useRef, useState, useEffect } from \"react\";\\nimport { connect } from \"react-redux\";\\nimport {\\n  changePlayingState,\\n  changeShowPlayList,\\n  changeCurrentIndex,\\n  changeCurrentSong,\\n  changePlayList,\\n  changePlayMode,\\n  changeFullScreen\\n} from \"./store/actionCreators\";\\n\\nfunction Player (props) {\\n  return (\\n    <div>Player</div>\\n  )\\n}\\n\\n// 映射 Redux 全局的 state 到组件的 props 上\\nconst mapStateToProps = state => ({\\n  fullScreen: state.getIn ([\"player\", \"fullScreen\"]),\\n  playing: state.getIn ([\"player\", \"playing\"]),\\n  currentSong: state.getIn ([\"player\", \"currentSong\"]),\\n  showPlayList: state.getIn ([\"player\", \"showPlayList\"]),\\n  mode: state.getIn ([\"player\", \"mode\"]),\\n  currentIndex: state.getIn ([\"player\", \"currentIndex\"]),\\n  playList: state.getIn ([\"player\", \"playList\"]),\\n  sequencePlayList: state.getIn ([\"player\", \"sequencePlayList\"])\\n});\\n\\n// 映射 dispatch 到 props 上\\nconst mapDispatchToProps = dispatch => {\\n  return {\\n    togglePlayingDispatch (data) {\\n      dispatch (changePlayingState (data));\\n    },\\n    toggleFullScreenDispatch (data) {\\n      dispatch (changeFullScreen (data));\\n    },\\n    togglePlayListDispatch (data) {\\n      dispatch (changeShowPlayList (data));\\n    },\\n    changeCurrentIndexDispatch (index) {\\n      dispatch (changeCurrentIndex (index));\\n    },\\n    changeCurrentDispatch (data) {\\n      dispatch (changeCurrentSong (data));\\n    },\\n    changeModeDispatch (data) {\\n      dispatch (changePlayMode (data));\\n    },\\n    changePlayListDispatch (data) {\\n      dispatch (changePlayList (data));\\n    }\\n  };\\n};\\n\\n// 将 ui 组件包装成容器组件\\nexport default connect (\\n  mapStateToProps,\\n  mapDispatchToProps\\n)(React.memo (Player));\\n\\n')])])]),e(\"p\",[t._v(\"如果现在还看不到这个组件，可不要感到奇怪，仅仅凭经验就知道这个组件还并没有注册到全局。这里播放器组件比较特殊，没有专门的路由，也就是说，它会作为一个全局性的组件存在。让我们在 Home 组件来引入:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"import Player from '../Player';\\n\\nreturn (\\n  //...\\n  //renderRoute 下面\\n  <Player></Player>\\n)\\n\\n\")])])]),e(\"p\",[t._v(\"现在你如果进入到某个页面，比如排行榜页，就能看到 Player 组件了。内容已经出现，样式之后再调整。\")]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/10/26/16e07fd3ba3ffeb7?w=375&h=667&f=jpeg&s=46958\",alt:\"\"}})]),t._v(\" \"),e(\"p\",[t._v(\"接下来我们来把基础 UI 构建一波。\")])])}),[],!1,null,null,null);a.default=s.exports}}]);","extractedComments":[]}