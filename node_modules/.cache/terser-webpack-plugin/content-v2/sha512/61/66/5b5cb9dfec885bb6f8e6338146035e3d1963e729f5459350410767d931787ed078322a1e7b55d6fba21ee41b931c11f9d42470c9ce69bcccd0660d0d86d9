{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{495:function(t,e,a){\"use strict\";a.r(e);var r=a(42),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"第三方注册登录\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第三方注册登录\"}},[t._v(\"#\")]),t._v(\" 第三方注册登录\")]),t._v(\" \"),a(\"p\",[t._v(\"现在很多网站、APP都支持第三方登录。第三方登录不得不说的一个优势：那就是本地注册和第三方注册的选择。虽然这是一个不能称之为问题的问题，做为一个新用户，你有两个选择：1、做一个很受欢迎的用户，注册帐号，完善信息，over。2、选用第三方登录/注册，简单方便。二者供你选择，随心挑选。而我们作为一名技术人员，第三方注册登录就选择了 github。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ab40531a04e0?w=1178&h=657&f=png&s=39072\",alt:\"\"}})]),t._v(\" \"),a(\"h2\",{attrs:{id:\"oauth-2-0\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#oauth-2-0\"}},[t._v(\"#\")]),t._v(\" OAuth 2.0\")]),t._v(\" \"),a(\"p\",[t._v(\"说到第三方登录，不得不提的一个知识点就是 oauth 2.0。\")]),t._v(\" \"),a(\"p\",[t._v(\"OAuth（开放授权）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。\")]),t._v(\" \"),a(\"p\",[t._v(\"这个协议在认证和授权的时候涉及到：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"服务提供方，例如 GitHub，GitHub上储存了用户的登录名，Email，昵称，头像等信息\")]),t._v(\" \"),a(\"li\",[t._v(\"用户\")]),t._v(\" \"),a(\"li\",[t._v(\"客户端，例如我的博客就是一个客户端，需要服务方向我提供用户的一些基本信息\")])]),t._v(\" \"),a(\"p\",[t._v(\"OAuth 协议的认证和授权的过程如下：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"用户打开我的网站后，我想要通过GitHub获取该用户的基本信息\")]),t._v(\" \"),a(\"li\",[t._v(\"在转跳到GitHub的授权页面后，用户同意我获取他的基本信息\")]),t._v(\" \"),a(\"li\",[t._v(\"后端获得GitHub提供的授权码，使用该授权码向GitHub申请一个令牌\")]),t._v(\" \"),a(\"li\",[t._v(\"GitHub对后端提供的授权码进行验证，验证无误后，发放一个令牌给后端\")]),t._v(\" \"),a(\"li\",[t._v(\"后端使用令牌，向GitHub获取用户信息\")]),t._v(\" \"),a(\"li\",[t._v(\"GitHub 确认令牌无误，返回给后端基本的用户信息\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"使用github-提供的-oauth-服务\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用github-提供的-oauth-服务\"}},[t._v(\"#\")]),t._v(\" 使用GitHub 提供的 OAuth 服务\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"登陆 GitHub 官网并注册账号登陆后\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ab35d06999e3?w=504&h=535&f=png&s=83356\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ab3a8a422962?w=1317&h=784&f=png&s=154941\",alt:\"\"}})]),t._v(\" \"),a(\"ol\",{attrs:{start:\"2\"}},[a(\"li\",[t._v(\"创建一个应用并填写信息\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ab30289d3810?w=1465&h=267&f=png&s=26961\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ab2afa326d90?w=1002&h=690&f=png&s=56854\",alt:\"\"}})]),t._v(\" \"),a(\"ol\",{attrs:{start:\"3\"}},[a(\"li\",[t._v(\"获得 \"),a(\"strong\",[t._v(\"Client ID\")]),t._v(\" 和 \"),a(\"strong\",[t._v(\"Chient Secret\")])])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ab25961e267b?w=1064&h=176&f=png&s=34099\",alt:\"\"}})]),t._v(\" \"),a(\"h2\",{attrs:{id:\"配置-github-参数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配置-github-参数\"}},[t._v(\"#\")]),t._v(\" 配置 GitHub 参数\")]),t._v(\" \"),a(\"p\",[t._v(\"接下来将这些参数放到\"),a(\"a\",{attrs:{href:\"https://github.com/push-over/egg-example/blob/master/config/config.default.ts\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"配置文件\"),a(\"OutboundLink\")],1),t._v(\"中：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"config.github = {\\n    // 固定的\\n    login_url: 'https://github.com/login/oauth/authorize',\\n    // github Client ID\\n    client_id: 'xxxxxxxxxxxxxx',\\n    // github Client Secret\\n    client_secret: 'xxxxxxxxxxxxx',\\n    // 此参数表示只获取用户信息\\n    scope: [ 'user' ],\\n  };\\n\\n\")])])]),a(\"p\",[t._v(\"这样我们不仅可以方便的通过 \"),a(\"code\",[t._v(\"this.ctx.app.config.github\")]),t._v(\" 拿到所需的数据，还有利于多环境的区分，不同环境使用不同的配置。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"第三方登陆url\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第三方登陆url\"}},[t._v(\"#\")]),t._v(\" 第三方登陆URL\")]),t._v(\" \"),a(\"p\",[t._v(\"获取 GitHub 授权的 url 并不需要操作我们的数据库，所以在这个流程中，并没有什么逻辑。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"授权-url\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#授权-url\"}},[t._v(\"#\")]),t._v(\" 授权 URL\")]),t._v(\" \"),a(\"p\",[t._v(\"在这个\"),a(\"a\",{attrs:{href:\"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/graphql/utils/connector.ts\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"方法\"),a(\"OutboundLink\")],1),t._v(\"中我们只需要拼接我们之前定义好的参数即可。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\" public githubURL() {\\n    const { login_url, client_id, scope } = this.ctx.app.config.github;\\n    return `${login_url}?client_id=${client_id}&scope=${scope}&state=${Date.now()}`;\\n  }\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"返回结果\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#返回结果\"}},[t._v(\"#\")]),t._v(\" 返回结果\")]),t._v(\" \"),a(\"p\",[t._v(\"这就是一个简单的\"),a(\"a\",{attrs:{href:\"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/graphql/utils/resolver.ts\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"查询\"),a(\"OutboundLink\")],1),t._v(\"，我们直接返回结构即可。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"export default {\\n  Query: {\\n    async githubURL(_root: any, {}, { connector }) {\\n      return await connector.utils.githubURL();\\n    },\\n  },\\n};\\n\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"定义查询\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定义查询\"}},[t._v(\"#\")]),t._v(\" 定义\"),a(\"a\",{attrs:{href:\"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/graphql/query/schema.graphql\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"查询\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[t._v(\"在这里我们指定返回的必须是个 string 类型，string！ 必须返回\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"type Query {\\n  githubURL: String!\\n}\\n\\n\")])])]),a(\"p\",[t._v(\"看一下我们的运行结果：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ab1b32d34623?w=1834&h=309&f=png&s=29861\",alt:\"\"}})]),t._v(\" \"),a(\"h2\",{attrs:{id:\"登陆授权\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#登陆授权\"}},[t._v(\"#\")]),t._v(\" 登陆授权\")]),t._v(\" \"),a(\"p\",[t._v(\"由于我们这是一个 API 项目，并不具备前端页面。不过这可难不倒我们，让我们打开浏览器的 console 工具栏，执行一次跳转。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ab079c1ebbce?w=1765&h=643&f=png&s=119481\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"我们看到弹出一个页面，并让我们进行授权。那大家心里可能犯迷糊了，授权后跳转到哪里呢？又是怎么知道授权成功或者失败的？不知道大家还记得我们在创建一个应用填写的回调地址吗？\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"创建路由\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建路由\"}},[t._v(\"#\")]),t._v(\" 创建路由\")]),t._v(\" \"),a(\"p\",[t._v(\"Router 主要用来描述请求 URL 和具体承担执行动作的 Controller 的对应关系， 框架约定了 app/router.js 文件用于统一所有路由规则。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"如何定义-router\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何定义-router\"}},[t._v(\"#\")]),t._v(\" 如何定义 \"),a(\"a\",{attrs:{href:\"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/router.ts\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Router\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"app/router.ts\")]),t._v(\" 里面定义 URL 路由规则\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import { Application } from 'egg';\\n\\nexport default (app: Application) => {\\n  const { controller, router } = app;\\n\\n  router.get('/', controller.home.index);\\n  // 回调地址\\n  router.get('/github/callback', controller.user.githubLogin);\\n};\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"实现-controller\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现-controller\"}},[t._v(\"#\")]),t._v(\" 实现 \"),a(\"a\",{attrs:{href:\"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/controller/user.ts\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Controller\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"app/controller\")]),t._v(\" 目录下面 实现 \"),a(\"code\",[t._v(\"Controller\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import { Controller } from 'egg';\\n\\nexport default class UserController extends Controller {\\n  async githubLogin() {\\n    const { ctx } = this;\\n    ctx.body = {\\n      name: 'github 登陆',\\n    };\\n  }\\n}\\n\\n\")])])]),a(\"p\",[t._v(\"这样就完成了一个最简单的 Router 定义，当用户执行 GET /github/callback，user.ts 这个里面的 \"),a(\"code\",[t._v(\"githubLogin\")]),t._v(\"方法就会执行。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"实现回调方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现回调方法\"}},[t._v(\"#\")]),t._v(\" 实现回调方法\")]),t._v(\" \"),a(\"p\",[t._v(\"接下来我们来实现这个方法\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"验证-code\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#验证-code\"}},[t._v(\"#\")]),t._v(\" 验证 code\")]),t._v(\" \"),a(\"p\",[t._v(\"当回调到我们的项目时，会带给我们一个授权码，我们拿到这个授权码 ，使用该授权码向GitHub申请一个令牌\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const { ctx, app } = this;\\nconst { client_id, client_secret } = app.config.github;\\n\\nconst code = ctx.query.code;\\nconst tokenResult = await ctx.curl('https://github.com/login/oauth/access_token', {\\n  method: 'POST',\\n  contentType: 'json',\\n  data: {\\n    client_id,\\n    client_secret,\\n    code,\\n  },\\n  dataType: 'json',\\n  timeout: 8000,\\n});\\n\\n// 如果有错误信息或者状态码不等于200 那我们就不让他继续走下去了\\nif (tokenResult.data.error || tokenResult.status !== 200) {\\n  return await this.ctx.render('transit.html', { uuid: tokenResult.data.error });\\n}\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"获取用户信息\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#获取用户信息\"}},[t._v(\"#\")]),t._v(\" 获取用户信息\")]),t._v(\" \"),a(\"p\",[t._v(\"当我们获得令牌后，就可以拿着这个令牌去或许用户的信息了。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const { access_token } = tokenResult.data;\\nconst userResult = await ctx.curl(`https://api.github.com/user?access_token=${access_token}`, {\\n    dataType: 'json',\\n    timeout: 8000,\\n});\\n\\n// 如果有错误信息或者状态码不等于200 那我们就不让他继续走下去了\\nif (userResult.data.error || userResult.status !== 200) {\\n\\treturn await this.ctx.render('transit.html', { uuid: userResult.data.error });\\n}\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"返回-token\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#返回-token\"}},[t._v(\"#\")]),t._v(\" 返回 token\")]),t._v(\" \"),a(\"p\",[t._v(\"获取到用户信息后，会有一个第三方的唯一标识，我们需要拿到这个标识后判断当前用户有没有注册过我们的应用，如果有的话直接返回 \"),a(\"code\",[t._v(\"token\")]),t._v(\"，没有的话我们需要先把用户信息插入到数据库之后再返回 \"),a(\"code\",[t._v(\"token\")]),t._v(\" 给前端。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"const { login, node_id } = userResult.data;\\n// login: 名称   node_id: 第三方唯一标识\\nif (!login || !node_id) {\\n\\treturn await this.ctx.render('transit.html', { uuid: '权限验证失败, 请重试' });\\n} else {\\n\\tconst uuid = ctx.helper.uuidv1();\\n    // 查询数据库有没有这个用户信息\\n\\tconst oauth = await ctx.service.oauth.findById(node_id);\\n    // 如果不存在要先添加到数据库\\n\\tif (!oauth) {\\n  \\t\\tuserResult.data.oauth_type = 'GtiHub';\\n      \\tconst user = await ctx.service.user.githubRegister(userResult.data);\\n      \\tconst userInfo = JSON.stringify(user);\\n      \\tawait ctx.service.redis.set(uuid, userInfo, 3600 * 24);\\n\\t} else await ctx.service.redis.set(uuid, oauth, 3600 * 24);\\n    // 返回token\\n\\tawait this.ctx.render('transit.html', { uuid });\\n}\\n\\n\")])])]),a(\"p\",[t._v(\"不知道大家有没有注意 \"),a(\"code\",[t._v(\"await this.ctx.render('transit.html', { uuid });\")]),t._v(\" 这段代码。 在讲这段代码之前，大家先思考一下我们怎么把登陆消息传递给前端呢？\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://github.com/push-over/egg-example/blob/70dc0ac730/app/view/transit.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"transit.html\"),a(\"OutboundLink\")],1),t._v(\" 是我在第三方登录的中一个 \"),a(\"code\",[t._v(\"loading\")]),t._v(\" 页面，在这个页面中向前端传递信息，具体是怎么操作的，让我们来看代码：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n  <meta charset=\"UTF-8\">\\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\\n  <title>Document</title>\\n</head>\\n<body>\\n  登陆中...\\n  <script>\\n    window.onload = function () {\\n      // 这里的 link 就等于是你前端应用接收信息的页面\\n      const link = \"https://www.baidu.com/\";\\n      window.opener.postMessage(\"<%= uuid %>\", link);\\n      window.close();\\n    }\\n  <\\/script>\\n</body>\\n</html>\\n\\n')])])]),a(\"h3\",{attrs:{id:\"窗口间通信-postmessage\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#窗口间通信-postmessage\"}},[t._v(\"#\")]),t._v(\" 窗口间通信 postMessage\")]),t._v(\" \"),a(\"p\",[t._v(\"window.open方法会返回一个窗口对象，使用这个对象可以向子窗口发送消息，而子窗口可以通过window.opener向父窗口发送消息\")]),t._v(\" \"),a(\"p\",[t._v(\"由于postMessage是通过网络协议，所以不能以直接在浏览器打开html的方式进行调试。而是应该放在服务器上，走网络协议。\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708aafe76a92c24?w=1255&h=316&f=png&s=29311\",alt:\"\"}})]),t._v(\" \"),a(\"h2\",{attrs:{id:\"小结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[t._v(\"#\")]),t._v(\" 小结\")]),t._v(\" \"),a(\"p\",[t._v(\"在这一小节中我们学习了如何创建 \"),a(\"code\",[t._v(\"oauth\")]),t._v(\" 应用，并通过回调方法完成注册登录，以及在两个不同端口不同域名的页面之间怎么传递信息。\")])])}),[],!1,null,null,null);e.default=s.exports}}]);","extractedComments":[]}