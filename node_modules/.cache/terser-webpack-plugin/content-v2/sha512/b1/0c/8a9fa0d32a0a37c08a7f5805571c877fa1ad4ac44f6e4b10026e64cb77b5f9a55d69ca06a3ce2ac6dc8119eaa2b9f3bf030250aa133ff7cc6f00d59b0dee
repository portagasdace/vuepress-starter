{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{512:function(a,e,t){\"use strict\";t.r(e);var r=t(42),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"启动一个最简单的-graphql-api服务器\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#启动一个最简单的-graphql-api服务器\"}},[a._v(\"#\")]),a._v(\" 启动一个最简单的 GraphQL API服务器\")]),a._v(\" \"),t(\"p\",[a._v(\"在上一小节中我们创建了基础的 egg.js 项目并引入了第三方包 graphql，在本小结中我将带领大家启动 egg 项目并学习 grophql 的使用。\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"一个简单的-graphql-api\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一个简单的-graphql-api\"}},[a._v(\"#\")]),a._v(\" 一个简单的 GraphQL API\")]),a._v(\" \"),t(\"h3\",{attrs:{id:\"编写-hello-业务-章节源码\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编写-hello-业务-章节源码\"}},[a._v(\"#\")]),a._v(\" 编写 hello 业务 \"),t(\"a\",{attrs:{href:\"https://user-gold-cdn.xitu.io/2020/6/5/172833db254f0321\",target:\"_blank\",rel:\"noopener noreferrer\"}},[a._v(\"章节源码\"),t(\"OutboundLink\")],1)]),a._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708a6b185f8948f?w=296&h=117&f=png&s=5627\",alt:\"\"}})]),a._v(\" \"),t(\"h3\",{attrs:{id:\"schema-graphql\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#schema-graphql\"}},[a._v(\"#\")]),a._v(\" schema.graphql\")]),a._v(\" \"),t(\"p\",[a._v(\"graphql 自带一组默认标量类型，包括 \"),t(\"code\",[a._v(\"Int\")]),a._v(\"，\"),t(\"code\",[a._v(\"Float\")]),a._v(\"，\"),t(\"code\",[a._v(\"String\")]),a._v(\"，\"),t(\"code\",[a._v(\"Boolean\")]),a._v(\"，\"),t(\"code\",[a._v(\"ID\")]),a._v(\"。在定义字段时需要注明类型，这也是 graphql 的特点之一，是支持强类型的。如果非空，就在类型后面跟上一个!号。graphql 还包括枚举类型，列表和自定义类型。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"type Hello {\\n  id: ID!\\n  name: String!\\n}\\n\\n\")])])]),t(\"h3\",{attrs:{id:\"connector\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#connector\"}},[a._v(\"#\")]),a._v(\" connector\")]),a._v(\" \"),t(\"p\",[a._v(\"编写完 \"),t(\"code\",[a._v(\"schema\")]),a._v(\" 之后，graphql 知道有哪些数据了，但他还需要知道 \"),t(\"strong\",[a._v(\"“如何去取”\")]),a._v(\"， \"),t(\"code\",[a._v(\"connector\")]),a._v(\" 的角色就在于此。 \"),t(\"code\",[a._v(\"connector\")]),a._v(\" 的职责就是 “取数”， 他既可以调用 rpc 接口取数，又可以调用内置的 orm 插件去取数，还可以直接调用 egg 的 \"),t(\"code\",[a._v(\"service\")]),a._v(\"。\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"export default class HelloConnector {\\n  hellos() {\\n    return [\\n      {\\n        id: 1,\\n        name: 'Jack',\\n      },\\n      {\\n        id: 2,\\n        name: 'Lucy',\\n      },\\n    ];\\n  }\\n}\\n\\n\\n\")])])]),t(\"h3\",{attrs:{id:\"resolver\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#resolver\"}},[a._v(\"#\")]),a._v(\" resolver\")]),a._v(\" \"),t(\"p\",[a._v(\"resolve.js是数据类型的具体实现，依赖connector.js完成。其实 resolver 非常简单，就是针对你暴露的查询接口，调用相应的connector去取数即可，如下：\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"export default {\\n  Query: {\\n    hellos(_root: any, {}, { connector }) {\\n      return connector.hello.hellos();\\n    },\\n  },\\n};\\n\\n\")])])]),t(\"h3\",{attrs:{id:\"定义-query\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#定义-query\"}},[a._v(\"#\")]),a._v(\" 定义 \"),t(\"code\",[a._v(\"Query\")])]),a._v(\" \"),t(\"p\",[a._v(\"新建一个 \"),t(\"code\",[a._v(\"query\")]),a._v(\" 目录创建 \"),t(\"code\",[a._v(\"schema.graphql\")]),a._v(\" 文件，大家也可以直接在各个模块下的 \"),t(\"code\",[a._v(\"schema.graphql\")]),a._v(\" 文件中定义，纯属个人习惯\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"type Query {\\n  hellos: [Hello!]\\n}\\n\\n\")])])]),t(\"blockquote\",[t(\"p\",[a._v(\"[Hello!] 可以理解为 [{id: 1, name: 'jack'}, {id: 2, name: 'praise'}] Hello! 可以理解为 {id: 1, name: 'jack'}\")])]),a._v(\" \"),t(\"h3\",{attrs:{id:\"项目启动\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#项目启动\"}},[a._v(\"#\")]),a._v(\" 项目启动\")]),a._v(\" \"),t(\"p\",[a._v(\"egg本地开发环境启动方式非常简单：\")]),a._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[a._v(\"$ npm run dev\\n\\n\")])])]),t(\"p\",[a._v(\"我们在浏览器中输入 \"),t(\"code\",[a._v(\"http://127.0.0.1:7001/graphql\")]),a._v(\" 是类似下面这种界面说明已经 \"),t(\"code\",[a._v(\"graphql\")]),a._v(\" 服务已经跑起来了。这是 \"),t(\"code\",[a._v(\"graphql\")]),a._v(\" 自带的开发者工具页面，这个开发者工具可以满足我们绝大部分的调试工作，很是方便。\")]),a._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708a6acc0ce8108?w=1909&h=861&f=png&s=54676\",alt:\"\"}})]),a._v(\" \"),t(\"h3\",{attrs:{id:\"完成一次查询\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#完成一次查询\"}},[a._v(\"#\")]),a._v(\" 完成一次查询\")]),a._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708a6b66d2d0f5b?w=1839&h=592&f=png&s=32657\",alt:\"\"}})]),a._v(\" \"),t(\"p\",[a._v(\"结果的顺序也是按照你输入的顺序排序的，定制化的数据，完全根据你查什么返回什么结果。这就是 \"),t(\"code\",[a._v(\"GraphQL\")]),a._v(\" 被称作 \"),t(\"code\",[a._v(\"API\")]),a._v(\" 查询语言的原因。\")]),a._v(\" \"),t(\"p\",[a._v(\"如果你对返回的名称不满意，还可以设置别名：\")]),a._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708a6bab15763a0?w=1886&h=614&f=png&s=37995\",alt:\"\"}})]),a._v(\" \"),t(\"h3\",{attrs:{id:\"请求流程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#请求流程\"}},[a._v(\"#\")]),a._v(\" 请求流程\")]),a._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708a75466a5aa41?w=1039&h=214&f=png&s=8484\",alt:\"\"}})]),a._v(\" \"),t(\"p\",[a._v(\"通过上方的例子我们可以看出客户端发送请求会被 \"),t(\"code\",[a._v(\"graphql\")]),a._v(\" 解析，根据映射关系找到对应的 \"),t(\"code\",[a._v(\"resolver\")]),a._v(\"。路由将数据传递到对应的 \"),t(\"code\",[a._v(\"resolver\")]),a._v(\"，\"),t(\"code\",[a._v(\"resolver\")]),a._v(\" 去调用对应的 \"),t(\"code\",[a._v(\"connector\")]),a._v(\" 进行处理，\"),t(\"code\",[a._v(\"connector\")]),a._v(\" 再调用 \"),t(\"code\",[a._v(\"service\")]),a._v(\" 进行数据库处理。\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"小结\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[a._v(\"#\")]),a._v(\" 小结\")]),a._v(\" \"),t(\"p\",[a._v(\"在这一节中我们学习了如何启动项目，以及通过一个例子串联了一个graphql 的请求流程是怎样的，下一节我们将正式进入实战环节。\")])])}),[],!1,null,null,null);e.default=s.exports}}]);","extractedComments":[]}