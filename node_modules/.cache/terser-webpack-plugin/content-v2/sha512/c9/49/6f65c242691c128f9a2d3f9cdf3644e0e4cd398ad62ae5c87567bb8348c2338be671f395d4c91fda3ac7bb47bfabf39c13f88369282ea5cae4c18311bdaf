{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{462:function(t,e,n){\"use strict\";n.r(e);var a=n(42),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"flutter-实战篇-仿豆瓣电影app\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-实战篇-仿豆瓣电影app\"}},[t._v(\"#\")]),t._v(\" Flutter 实战篇：仿豆瓣电影APP\")]),t._v(\" \"),n(\"p\",[t._v(\"现在开始 Flutter 实战，我们的目的是仿写一个豆瓣电影APP。\")]),t._v(\" \"),n(\"p\",[t._v(\"在仿写的过程中，我们将学会：\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[t._v(\"如何写UI和布局\")]),t._v(\" \"),n(\"li\",[t._v(\"如何添加第三方库\")]),t._v(\" \"),n(\"li\",[t._v(\"如何发起请求并解析数据\")]),t._v(\" \"),n(\"li\",[t._v(\"如何异步编程\")]),t._v(\" \"),n(\"li\",[t._v(\"页面之间如何跳转及如何传递参数\")])]),t._v(\" \"),n(\"h1\",{attrs:{id:\"widget-布局的实现\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#widget-布局的实现\"}},[t._v(\"#\")]),t._v(\" Widget 布局的实现\")]),t._v(\" \"),n(\"p\",[t._v(\"本节用 Flutter 实现豆瓣电影APP的节目。从这里你会学到如何使用 Flutter 的 Widget 去布局，以及遇到问题时如何解决。\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"创建-flutter-工程\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建-flutter-工程\"}},[t._v(\"#\")]),t._v(\" 创建 Flutter 工程\")]),t._v(\" \"),n(\"p\",[t._v(\"在 VS Code 中创建 Flutter 工程，工程名字为：flutter_doubanmovie。\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/169ff68a681cb61e?w=1340&h=230&f=jpeg&s=56619\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"创建完成后，首先要对工程里的默认代码进行修改。\")]),t._v(\" \"),n(\"ul\",[n(\"li\",[n(\"p\",[t._v(\"将 title 改为 豆瓣电影\")]),t._v(\" \"),n(\"p\",[t._v(\"在类 MyApp 里改为：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"home: MyHomePage(title: '豆瓣电影'),\\n\\n\")])])])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"_MyHomePageState\")]),t._v(\" \"),n(\"p\",[t._v(\"_MyHomePageState 里的 UI 代码要删掉，而且因为豆瓣电影没有 AppBar，所以 AppBar 也要删除 ，除删除之后的 _MyHomePageState 为：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class _MyHomePageState extends State<MyHomePage> {\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return Scaffold(\\n      body: Center(\\n      ), \\n    );\\n  }\\n}\\n\\n\")])])])])]),t._v(\" \"),n(\"p\",[t._v(\"做完这些操作之后，在运行 flutter_doubanmovie，得到的是一个空页面。\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"仿写豆瓣电影app界面\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#仿写豆瓣电影app界面\"}},[t._v(\"#\")]),t._v(\" 仿写豆瓣电影APP界面\")]),t._v(\" \"),n(\"p\",[t._v(\"写界面的正常流程应该是按照设计稿来实现，但是因为我们没有设计稿，所以我们按照豆瓣电影APP界面的截图来仿写。\")]),t._v(\" \"),n(\"p\",[t._v(\"首先分析豆瓣电影APP的界面：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a0290e7e46ab37?w=496&h=848&f=jpeg&s=95700\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"可以看到 豆瓣电影APP 的界面主要有两部分组成：\")]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"底部的 Navigation Bar\")]),t._v(\" \"),n(\"li\",[t._v(\"上面显示的内容页面，包括：热映、找片、我的\")])]),t._v(\" \"),n(\"p\",[t._v(\"所以，接下来我们先实现底部的 Navigation Bar，然后在实现要显示的内容页面。\")]),t._v(\" \"),n(\"h2\",{attrs:{id:\"实现底部-navigation-bar\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现底部-navigation-bar\"}},[t._v(\"#\")]),t._v(\" 实现底部 Navigation Bar\")]),t._v(\" \"),n(\"p\",[t._v(\"底部的 Navigation Bar 使用 Flutter 的 BottomNavigationBar 来实现，BottomNavigationBar 这个 Widget 前面没有介绍过，但是没有关系，我们通过查看 BottomNavigationBar 的构造函数就可以知道如何使用。\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"使用-scaffold-的-bottomnavigationbar-属性\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用-scaffold-的-bottomnavigationbar-属性\"}},[t._v(\"#\")]),t._v(\" 使用 Scaffold 的 bottomNavigationBar 属性\")]),t._v(\" \"),n(\"p\",[t._v(\"首先给 Scaffold 的 bottomNavigationBar 属性赋值：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"return Scaffold(\\n    ...\\n    bottomNavigationBar: BottomNavigationBar(\\n        ...\\n    ),\\n    ...\\n)\\n\\n\")])])]),n(\"h4\",{attrs:{id:\"然后在实现-bottomnavigationbar\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#然后在实现-bottomnavigationbar\"}},[t._v(\"#\")]),t._v(\" 然后在实现 BottomNavigationBar\")]),t._v(\" \"),n(\"p\",[t._v(\"为了使用 BottomNavigationBar，先看 BottomNavigationBar 的构造函数：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class BottomNavigationBar extends StatefulWidget {\\n  BottomNavigationBar({\\n    Key key,\\n    @required this.items,\\n    this.onTap,\\n    this.currentIndex = 0,\\n    BottomNavigationBarType type,\\n    this.fixedColor,\\n    this.iconSize = 24.0,\\n  }) \\n  ...\\n}\\n\\n\")])])]),n(\"p\",[t._v(\"参数名字\")]),t._v(\" \"),n(\"p\",[t._v(\"参数类型\")]),t._v(\" \"),n(\"p\",[t._v(\"意义\")]),t._v(\" \"),n(\"p\",[t._v(\"必选 or 可选\")]),t._v(\" \"),n(\"p\",[t._v(\"key\")]),t._v(\" \"),n(\"p\",[t._v(\"Key\")]),t._v(\" \"),n(\"p\",[t._v(\"Widget 的标识\")]),t._v(\" \"),n(\"p\",[t._v(\"可选\")]),t._v(\" \"),n(\"p\",[t._v(\"items\")]),t._v(\" \"),n(\"p\",[t._v(\"List\"),n(\"BottomNavigationBarItem\")],1),t._v(\" \"),n(\"p\",[t._v(\"底部导航栏的选项，是一个List，每个选项的类型是 BottomNavigationBarItem\")]),t._v(\" \"),n(\"p\",[t._v(\"必选\")]),t._v(\" \"),n(\"p\",[t._v(\"onTap\")]),t._v(\" \"),n(\"p\",[t._v(\"ValueChanged\"),n(\"int\")],1),t._v(\" \"),n(\"p\",[t._v(\"底部导航栏选项的点击事件，返回的值是选项的 index\")]),t._v(\" \"),n(\"p\",[t._v(\"可选\")]),t._v(\" \"),n(\"p\",[t._v(\"currentIndex\")]),t._v(\" \"),n(\"p\",[t._v(\"int\")]),t._v(\" \"),n(\"p\",[t._v(\"当前选中的选项的 index\")]),t._v(\" \"),n(\"p\",[t._v(\"可选\")]),t._v(\" \"),n(\"p\",[t._v(\"type\")]),t._v(\" \"),n(\"p\",[t._v(\"BottomNavigationBarType\")]),t._v(\" \"),n(\"p\",[t._v(\"定义底部导航栏的选项如何显示，有两个值：\"),n(\"br\"),t._v(\"\\nBottomNavigationBarType.fix：当选项少于4个时，默认为这个类型，如果 fixedColor 不为空，则选项选中时的颜色就是 fixedColor，否则是 ThemeData.primaryColor，导航栏背景颜色是 ThemeData.canvasColor\"),n(\"br\"),t._v(\"\\nBottomNavigationBarType.shifting：当选项不小于4个时，默认为这个类型，所有的选项都会被渲染为白色，但是导航栏的背景色是当前选中的选项的背景色\")]),t._v(\" \"),n(\"p\",[t._v(\"可选\")]),t._v(\" \"),n(\"p\",[t._v(\"fixedColor\")]),t._v(\" \"),n(\"p\",[t._v(\"Key\")]),t._v(\" \"),n(\"p\",[t._v(\"当 BottomNavigationBarType 的 type 是 fix 时，选中的选项的颜色就是 fixdColor\")]),t._v(\" \"),n(\"p\",[t._v(\"可选\")]),t._v(\" \"),n(\"p\",[t._v(\"iconSize\")]),t._v(\" \"),n(\"p\",[t._v(\"double\")]),t._v(\" \"),n(\"p\",[t._v(\"BottomNavigationBarItem 的 icon 的大小\")]),t._v(\" \"),n(\"p\",[t._v(\"可选\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"bottomnavigationbaritem\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#bottomnavigationbaritem\"}},[t._v(\"#\")]),t._v(\" BottomNavigationBarItem\")]),t._v(\" \"),n(\"p\",[t._v(\"这里还有一个新的 Widget：BottomNavigationBarItem，我们在看一下 BottomNavigationBarItem 如何使用，它的构造函数为：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class BottomNavigationBarItem {\\n  const BottomNavigationBarItem({\\n    @required this.icon,\\n    this.title,\\n    Widget activeIcon,\\n    this.backgroundColor,\\n  })\\n  ...\\n}\\n\\n\")])])]),n(\"p\",[t._v(\"参数名字\")]),t._v(\" \"),n(\"p\",[t._v(\"参数类型\")]),t._v(\" \"),n(\"p\",[t._v(\"意义\")]),t._v(\" \"),n(\"p\",[t._v(\"必选 or 可选\")]),t._v(\" \"),n(\"p\",[t._v(\"icon\")]),t._v(\" \"),n(\"p\",[t._v(\"Widget\")]),t._v(\" \"),n(\"p\",[t._v(\"选项的 Icon\")]),t._v(\" \"),n(\"p\",[t._v(\"必选\")]),t._v(\" \"),n(\"p\",[t._v(\"title\")]),t._v(\" \"),n(\"p\",[t._v(\"Widget\")]),t._v(\" \"),n(\"p\",[t._v(\"选项的 标题\")]),t._v(\" \"),n(\"p\",[t._v(\"可选\")]),t._v(\" \"),n(\"p\",[t._v(\"activeIcon\")]),t._v(\" \"),n(\"p\",[t._v(\"Widget\")]),t._v(\" \"),n(\"p\",[t._v(\"当选项选中时显示 activeIcon，但如果 activeIcon 没有设置的话，选中的时候会显示 icon\")]),t._v(\" \"),n(\"p\",[t._v(\"可选\")]),t._v(\" \"),n(\"p\",[t._v(\"backgroundColor\")]),t._v(\" \"),n(\"p\",[t._v(\"Color\")]),t._v(\" \"),n(\"p\",[t._v(\"当 BottomNavigationBarType 的 type 是 shifting 时才有用，选中时会成为导航栏的背景色\")]),t._v(\" \"),n(\"p\",[t._v(\"可选\")]),t._v(\" \"),n(\"p\",[t._v(\"所以为 BottomNavigationBar 添加 BottomNavigationBarItem 就可以写成：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"@override\\nWidget build(BuildContext context) {\\n    return Scaffold(\\n        body: Center(\\n        ),\\n        bottomNavigationBar: BottomNavigationBar(\\n            items: [\\n                BottomNavigationBarItem(icon: Icon(Icons.school), title: Text('热映')),\\n                BottomNavigationBarItem(icon: Icon(Icons.panorama_fish_eye), title: Text('找片')),\\n                BottomNavigationBarItem(icon: Icon(Icons.people), title: Text('我的'))\\n            ],//BottomNavigationBarItem 的 icon 用的是 Icon Widget实现的，这里是随便找的图标，先实现功能，后续在改成和 豆瓣电影 的一样\\n            currentIndex: 0,//默认选中的 index\\n            fixedColor: Colors.black, //选中时颜色变为黑色\\n            type: BottomNavigationBarType.fixed,//类型为 fixed\\n            onTap: _onItemTapped,\\n        ),\\n    );\\n}\\n    \\nvoid _onItemTapped(int index) {\\n}\\n\\n\")])])]),n(\"p\",[t._v(\"写到这里，底部导航栏就已经实现了，但是显示的页面还没有实现。\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"实现内容页面\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现内容页面\"}},[t._v(\"#\")]),t._v(\" 实现内容页面\")]),t._v(\" \"),n(\"p\",[t._v(\"这里要实现内容页面，包括：热映、找片、我的，这里先用 Text 简单实现一下，并用 _widgetItems 的数组保存，接下来就要让 _widgetItems 和 当前选中的选项建立联系，这时候就需要用到 _onItemTapped 事件。\")]),t._v(\" \"),n(\"p\",[t._v(\"用 _selectedIndex 表示当前选中的是哪个选项，显示的页面就是 _widgetItems[_selectedIndex]，_selectedIndex 默认为 0，当选中的选项卡变化时，会触发 _onItemTapped 事件，然后刷新页面，实现的代码如下：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"int _selectedIndex = 0;\\n\\nfinal _widgetItems = [Text('热映'), Text('找片'), Text('我的')];\\n    \\n@override\\nWidget build(BuildContext context) {\\n    return Scaffold(\\n        body: Center(\\n            child: _widgetItems[_selectedIndex],//选中不同的选项显示不同的界面\\n        ),\\n        bottomNavigationBar: BottomNavigationBar(\\n            items: [\\n                BottomNavigationBarItem(icon: Icon(Icons.school), title: Text('热映')),\\n                BottomNavigationBarItem(icon: Icon(Icons.panorama_fish_eye), title: Text('找片')),\\n                BottomNavigationBarItem(icon: Icon(Icons.people), title: Text('我的'))\\n            ],//BottomNavigationBarItem 的 icon 用的是 Icon Widget实现的，这里是随便找的图标，先实现功能，后续在改成和 豆瓣电影 的一样\\n            currentIndex: _selectedIndex,//默认选中的 index\\n            fixedColor: Colors.black, //选中时颜色变为黑色\\n            type: BottomNavigationBarType.fixed,//类型为 fixed\\n            onTap: _onItemTapped,\\n        ),\\n    );\\n}\\n    \\nvoid _onItemTapped(int index) {\\n    setState(() {\\n      _selectedIndex = index;//刷新界面\\n    });\\n}\\n\\n\")])])]),n(\"p\",[t._v(\"运行后的效果为：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a0298ec3b8c43c?w=413&h=768&f=jpeg&s=23761\",alt:\"\"}})]),t._v(\" \"),n(\"h4\",{attrs:{id:\"将内容页面提取出来在单独的类里实现\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#将内容页面提取出来在单独的类里实现\"}},[t._v(\"#\")]),t._v(\" 将内容页面提取出来在单独的类里实现\")]),t._v(\" \"),n(\"p\",[t._v(\"前面的内容页面都是用 Text 实现，而且存储在 main.dart 里，当内容页面的内容变得越来越复杂，势必会造成 main.dart 里的代码越来越多，不好管理，所以现在要把内容页面单独提取出一个文件来实现。\")]),t._v(\" \"),n(\"ol\",[n(\"li\",[n(\"p\",[t._v(\"热映页面\")]),t._v(\" \"),n(\"p\",[t._v(\"在 lib 目录下，右击，选择 \"),n(\"code\",[t._v(\"New File\")]),t._v(\",输入 \"),n(\"code\",[t._v(\"HotWidget.dart\")]),t._v(\"，新建一个文件 HotWidget.dart，在这个文件里实现类 HotWidget\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"import 'package:flutter/material.dart';\\n\\nclass HotWidget extends StatefulWidget {\\n  @override\\n  State<StatefulWidget> createState() {\\n    // TODO: implement createState\\n    return HotWidgetState();\\n  }\\n}\\n\\nclass HotWidgetState extends State<HotWidget> {\\n  @override\\n  Widget build(BuildContext context) {\\n    // TODO: implement build\\n    return Center(\\n      child: Text('热映'),\\n    );\\n  }\\n}\\n\\n\")])])])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"找片页面\")]),t._v(\" \"),n(\"p\",[t._v(\"在 lib 目录下，新建一个文件 MoviesWidget.dart，在这个文件里实现类 MoviesWidget:\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"import 'package:flutter/material.dart';\\n\\nclass MoviesWidget extends StatefulWidget {\\n  @override\\n  State<StatefulWidget> createState() {\\n    // TODO: implement createState\\n    return MoviesWidgetState();\\n  }\\n}\\n\\nclass MoviesWidgetState extends State<MoviesWidget> {\\n  @override\\n  Widget build(BuildContext context) {\\n    // TODO: implement build\\n    return Center(\\n      child: Text('找片'),\\n    );\\n  }\\n}\\n\\n\")])])])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"我的页面\")]),t._v(\" \"),n(\"p\",[t._v(\"在 lib 目录下，新建一个文件 MineWidget.dart，在这个文件里实现类 MineWidget:\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"import 'package:flutter/material.dart';\\n\\nclass MineWidget extends StatefulWidget {\\n  @override\\n  State<StatefulWidget> createState() {\\n    // TODO: implement createState\\n    return MineWidgetState();\\n  }\\n}\\n\\nclass MineWidgetState extends State<MineWidget> {\\n  @override\\n  Widget build(BuildContext context) {\\n    // TODO: implement build\\n    return Center(\\n      child: Text('我的'),\\n    );\\n  }\\n}\\n\\n\")])])])]),t._v(\" \"),n(\"li\",[n(\"p\",[t._v(\"改造 main.dart 将页面独立分开之后，还需要改造 main.dart，首先将 _widgetItems 改造为：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"final _widgetItems = [HotWidget(), MoviesWidget(), MineWidget()];\\n\\n\")])])]),n(\"p\",[t._v(\"同时 Scaffold 的 body 改为：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"body: _widgetItems[_selectedIndex], //选中不同的选项显示不同的界面,\\n\\n\")])])])])]),t._v(\" \"),n(\"h2\",{attrs:{id:\"实现热映页面\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现热映页面\"}},[t._v(\"#\")]),t._v(\" 实现热映页面\")]),t._v(\" \"),n(\"p\",[t._v(\"因为热映页面现在是用 Text 来代替，所以现在开始实现热映页面。\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"热映页面分析\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#热映页面分析\"}},[t._v(\"#\")]),t._v(\" 热映页面分析\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/10/16a0520b629d326a?w=500&h=836&f=jpeg&s=98719\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"可以看到热映页面在垂直方向上有两个部分：\")]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"搜索栏\")]),t._v(\" \"),n(\"li\",[t._v(\"TabBar 与 TabBarView\")])]),t._v(\" \"),n(\"p\",[t._v(\"所以，这里可以用 Column 来实现。\")]),t._v(\" \"),n(\"p\",[t._v(\"在看搜索栏：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/10/16a052d0f6a788db?w=1024&h=122&f=jpeg&s=24043\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"在水平方向上有三个部分，所以可以用 Row 来实现\")]),t._v(\" \"),n(\"p\",[t._v(\"在 TabBar 里的数据流内容可以用 ListView 来实现。\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"搜索栏实现\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#搜索栏实现\"}},[t._v(\"#\")]),t._v(\" 搜索栏实现\")]),t._v(\" \"),n(\"p\",[t._v(\"搜索栏在水平方向上的3个部分，可以用 Text、Icon、TextField 这3个 Widget 来实现，你可能会这么写：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"Row(\\n    children: <Widget>[\\n      Text(\\n        '深圳',\\n        style: TextStyle(fontSize: 16),\\n      ),\\n      Icon(Icons.arrow_drop_down),\\n      TextField()\\n    ],\\n )\\n\\n\")])])]),n(\"p\",[t._v(\"但是这样写会报错：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"flutter: ══╡ EXCEPTION CAUGHT BY RENDERING LIBRARY ╞═════════════════════════════════════════════════════════\\nflutter: The following assertion was thrown during performLayout():\\nflutter: BoxConstraints forces an infinite width.\\nflutter: These invalid constraints were provided to RenderRepaintBoundary's layout() function by the\\nflutter: following function, which probably computed the invalid constraints in question:\\nflutter:   _RenderDecoration._layout.layoutLineBox (package:flutter/src/material/input_decorator.dart:819:11)\\nflutter: The offending constraints were:\\nflutter:   BoxConstraints(w=Infinity, 0.0<=h<=80.0)\\n\\n\")])])]),n(\"p\",[t._v(\"因为 Row 要求它的 非flexible的子Widget 必须要有明确的宽度，为了给 flexible的子Widget 分配大小，但是 TextField 没有明确的大小，TextField 是 match_parent 的，所以这里需要用 Expanded 来嵌套 TextField，使用方式如下：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"Row(\\n    children: <Widget>[\\n      Text(\\n        '深圳',\\n        style: TextStyle(fontSize: 16),\\n      ),\\n      Icon(Icons.arrow_drop_down),\\n      Expanded(\\n        flex: 1,\\n        child: TextField(),\\n      )\\n    ],\\n)\\n\\n\")])])]),n(\"p\",[t._v(\"运行后的效果为：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/12/16a0faede55d1c5d?w=824&h=106&f=jpeg&s=10409\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"可以看到 TextField 的样式不符合要求，所以还要在设置 TextField 的样式，使用 InputDecoration 来设置 TextField 的样式：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"TextField(\\n  textAlign: TextAlign.center,\\n  style: TextStyle(fontSize: 16),\\n  decoration: InputDecoration(\\n      hintText: '\\\\uE8b6 电影 / 电视剧 / 影人',\\n      hintStyle: TextStyle(fontFamily: 'MaterialIcons', fontSize: 16),\\n      contentPadding: EdgeInsets.only(top: 8, bottom: 8),\\n      border: OutlineInputBorder(\\n                borderSide: BorderSide.none,\\n                borderRadius: BorderRadius.all(Radius.circular(5)),\\n              ),\\n      filled: true,\\n      fillColor: Colors.black12\\n    ),\\n)\\n\\n\")])])]),n(\"p\",[t._v(\"最后搜索栏就是这样子：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/12/16a0fb87f14ec29a?w=824&h=112&f=jpeg&s=17269\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"因为 hintText 是 String 类型，为了显示搜索的 icon ，使用了 Unicode 字符，并且设置 MaterialIcons 的字体库，就可以用 Unicode 来表示 icon。要查看特定 icon 的 Unicode 字符，可以在 Icons 里找到，然后看它的值就能找到它的 Unicode 字符，例如这个搜索 icon，它是 Icons.search ，值为：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"static const IconData search = IconData(0xe8b6, fontFamily: 'MaterialIcons');\\n\\n\")])])]),n(\"p\",[t._v(\"所以搜索的 Unicode 字符为: \"),n(\"code\",[t._v(\"e8b6\")]),t._v(\"，在字符串里用 \"),n(\"code\",[t._v(\"\\\\uE8B6\")]),t._v(\" 表示。\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"tabbar-与-tabbarview-的实现\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tabbar-与-tabbarview-的实现\"}},[t._v(\"#\")]),t._v(\" TabBar 与 TabBarView 的实现\")]),t._v(\" \"),n(\"p\",[t._v(\"TabBar 与 TabBarView 用 DefaultTabController 来实现，DefaultTabController 的 children 里面包含了 TabBar 和 TabBarView，同时 DefaultTabController 为了占用剩下的空间，也需要用 Expanded 来嵌套，最后完整的代码如下：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class HotWidgetState extends State<HotWidget> {\\n  @override\\n  Widget build(BuildContext context) {\\n    // TODO: implement build\\n    return Column(\\n      mainAxisAlignment: MainAxisAlignment.start,\\n      children: <Widget>[\\n        Container(\\n          height: 80,\\n          alignment: Alignment.bottomCenter,\\n          padding: EdgeInsets.only(left: 20, right: 20),\\n          child: Row(\\n            children: <Widget>[\\n              Text(\\n                '深圳',\\n                style: TextStyle(fontSize: 16),\\n              ),\\n              Icon(Icons.search),\\n              Expanded(\\n                flex: 1,\\n                child: TextField(\\n                  textAlign: TextAlign.center,\\n                  style: TextStyle(fontSize: 16),\\n                  decoration: InputDecoration(\\n                      hintText: '\\\\uE8b6 电影 / 电视剧 / 影人',\\n                      hintStyle:\\n                          TextStyle(fontFamily: 'MaterialIcons', fontSize: 16),\\n                      contentPadding: EdgeInsets.only(top: 8, bottom: 8),\\n                      border: OutlineInputBorder(\\n                        borderSide: BorderSide.none,\\n                        borderRadius: BorderRadius.all(Radius.circular(5)),\\n                      ),\\n                      filled: true,\\n                      fillColor: Colors.black12),\\n                ),\\n              )\\n            ],\\n          ),\\n        ),\\n        Expanded(\\n          flex: 1,\\n          child: DefaultTabController(\\n              length: 2,\\n              child: Column(\\n                children: <Widget>[\\n                  Container(\\n                    constraints: BoxConstraints.expand(height: 50),\\n                    child: TabBar(\\n                        unselectedLabelColor: Colors.black12,\\n                        labelColor: Colors.black87,\\n                        indicatorColor: Colors.black87,\\n                        tabs: <Widget>[Tab(text: '正在热映'), Tab(text: '即将上映')]),\\n                  ),\\n                  Expanded(\\n                    child: Container(\\n                      child: TabBarView(\\n                        children: <Widget>[\\n                          Center(\\n                            child: Text('正在热映'),\\n                          ),\\n                          Center(\\n                            child: Text('即将上映'),\\n                          )\\n                        ],\\n                      ),\\n                    ),\\n                  )\\n                ],\\n              )),\\n        )\\n      ],\\n    );\\n  }\\n}\\n\\n\")])])]),n(\"p\",[t._v(\"运行的效果为：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/12/16a109526a0d2cf1?w=413&h=768&f=jpeg&s=29212\",alt:\"\"}})]),t._v(\" \"),n(\"h2\",{attrs:{id:\"实现找片页面\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现找片页面\"}},[t._v(\"#\")]),t._v(\" 实现找片页面\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"找片页面分析\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#找片页面分析\"}},[t._v(\"#\")]),t._v(\" 找片页面分析\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/12/16a10968a31fb413?w=444&h=768&f=jpeg&s=132349\",alt:\"\"}})]),t._v(\" \"),n(\"p\",[t._v(\"找片页面在垂直方向上也是有两个部分：\")]),t._v(\" \"),n(\"ol\",[n(\"li\",[t._v(\"搜索栏\")]),t._v(\" \"),n(\"li\",[t._v(\"TabBar 与 TabBarView\")])]),t._v(\" \"),n(\"p\",[t._v(\"找片页面按照热映页面来实现就好了。\")]),t._v(\" \"),n(\"h4\",{attrs:{id:\"页面实现\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#页面实现\"}},[t._v(\"#\")]),t._v(\" 页面实现\")]),t._v(\" \"),n(\"p\",[t._v(\"在 MoviesWidget.dart 里修改：\")]),t._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[t._v(\"class MoviesWidgetState extends State<MoviesWidget> {\\n  @override\\n  Widget build(BuildContext context) {\\n    // TODO: implement build\\n    return Column(\\n      children: <Widget>[\\n        Container(\\n          height: 80,\\n          alignment: Alignment.bottomCenter,\\n          padding: EdgeInsets.only(left: 20, right: 20),\\n          child: TextField(\\n            textAlign: TextAlign.center,\\n            style: TextStyle(fontSize: 16),\\n            decoration: InputDecoration(\\n                hintText: '\\\\uE8b6 电影 / 电视剧 / 影人',\\n                hintStyle: TextStyle(fontFamily: 'MaterialIcons', fontSize: 16),\\n                contentPadding: EdgeInsets.only(top: 8, bottom: 8),\\n                border: OutlineInputBorder(\\n                  borderSide: BorderSide.none,\\n                  borderRadius: BorderRadius.all(Radius.circular(5)),\\n                ),\\n                filled: true,\\n                fillColor: Colors.black12),\\n          ),\\n        ),\\n        Expanded(\\n          flex: 1,\\n          child: DefaultTabController(\\n              length: 2,\\n              child: Column(\\n                children: <Widget>[\\n                  Container(\\n                    constraints: BoxConstraints.expand(height: 50),\\n                    child: TabBar(\\n                        unselectedLabelColor: Colors.black12,\\n                        labelColor: Colors.black87,\\n                        indicatorColor: Colors.black87,\\n                        tabs: <Widget>[Tab(text: '电影'), Tab(text: '电视')]),\\n                  ),\\n                  Expanded(\\n                    child: Container(\\n                      child: TabBarView(\\n                        children: <Widget>[\\n                          Center(\\n                            child: Text('电影'),\\n                          ),\\n                          Center(\\n                            child: Text('电视'),\\n                          )\\n                        ],\\n                      ),\\n                    ),\\n                  )\\n                ],\\n              )),\\n        )\\n      ],\\n    );\\n  }\\n}\\n\\n\")])])]),n(\"p\",[t._v(\"运行后的效果为：\")]),t._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/12/16a109ce1df1329d?w=413&h=768&f=jpeg&s=28071\",alt:\"\"}})])])}),[],!1,null,null,null);e.default=i.exports}}]);","extractedComments":[]}