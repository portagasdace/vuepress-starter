{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{492:function(v,a,_){\"use strict\";_.r(a);var t=_(42),e=Object(t.a)({},(function(){var v=this,a=v.$createElement,_=v._self._c||a;return _(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":v.$parent.slotKey}},[_(\"h1\",{attrs:{id:\"dart-简介及基础语法\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dart-简介及基础语法\"}},[v._v(\"#\")]),v._v(\" Dart 简介及基础语法\")]),v._v(\" \"),_(\"p\",[v._v(\"因为 Flutter 是使用 Dart 语言开发的，所以在开始 Flutter 之前，有必要先了解一下 Dart。\")]),v._v(\" \"),_(\"h2\",{attrs:{id:\"dart-简介\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dart-简介\"}},[v._v(\"#\")]),v._v(\" Dart 简介\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart 是 Google 开发的计算机编程语言，可以用于 移动端、PC 端、WEB、服务器的开发，是全栈式编程语言。虽然语言都是 Dart ，但在每个平台上使用的框架不一样，例如在 Flutter 上使用的 Dart for the Flutter，在 Web 端使用的是 Dart for the web，在服务器使用的是 Server-side Dart：\")]),v._v(\" \"),_(\"p\",[v._v(\"平台\")]),v._v(\" \"),_(\"p\",[v._v(\"开发语言\")]),v._v(\" \"),_(\"p\",[v._v(\"框架\")]),v._v(\" \"),_(\"p\",[v._v(\"Flutter(Android/iOS/Linux/MacOS/Windows/Web)\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart for the Flutter\")]),v._v(\" \"),_(\"p\",[v._v(\"Web\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart for the web\")]),v._v(\" \"),_(\"p\",[v._v(\"服务器\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart\")]),v._v(\" \"),_(\"p\",[v._v(\"Server-side Dart\")]),v._v(\" \"),_(\"h2\",{attrs:{id:\"dart-的历史\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dart-的历史\"}},[v._v(\"#\")]),v._v(\" Dart 的历史\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"2011.10 ：Dart 语言发布\")]),v._v(\" \"),_(\"li\",[v._v(\"2013.10 ：Dart 1.0\")]),v._v(\" \"),_(\"li\",[v._v(\"2018.8 ：Dart 2.0\")]),v._v(\" \"),_(\"li\",[v._v(\"2018.12 ：Dart 2.1\")]),v._v(\" \"),_(\"li\",[v._v(\"2019.2.27 ：Dart 2.2\")]),v._v(\" \"),_(\"li\",[v._v(\"2019.4.21 ：Dart 2.3\")])]),v._v(\" \"),_(\"p\",[v._v(\"可能你是在听说了 Flutter 之后，才开始接触 Dart 语言，但是 Dart 语言已经存在并发展很久了，Dart 早在 2011 年就发布了，现在 Dart 的最新版本是 2.3 。\")]),v._v(\" \"),_(\"h2\",{attrs:{id:\"dart-语言优势\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dart-语言优势\"}},[v._v(\"#\")]),v._v(\" Dart 语言优势\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[v._v(\"Dart 中的所有东西都是对象，包括数字、函数等，它们都继承自 Object，并且对象的默认值都是 null（包括数字）。\")]),v._v(\" \"),_(\"li\",[v._v(\"Dart 既可以支持 JIT（动态编译），也可以支持 AOT（静态编译）。\")]),v._v(\" \"),_(\"li\",[v._v(\"Dart 是强类型语言，但是由于 Dart 可以推断类型，所以也可以支持动态类型，例如 var、dynamic。\")]),v._v(\" \"),_(\"li\",[v._v(\"Dart 有强大的异步编程能力。\")])]),v._v(\" \"),_(\"h2\",{attrs:{id:\"dart-用法\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dart-用法\"}},[v._v(\"#\")]),v._v(\" Dart 用法\")]),v._v(\" \"),_(\"p\",[v._v(\"我们有了其他语言的基础，学习 Dart 语法很快的，看下面的一段代码，显示了很多 Dart 用法：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"// 导入库\\nimport 'package:flutter/material.dart';\\n\\n/**\\n * 入口函数\\n */\\nvoid main() => runApp(MyApp());\\n\\n/**\\n * 定义一个 MyApp Widget\\n */\\nclass MyApp extends StatelessWidget {\\n\\n  var content = 'Dart 语法'; // 声明并初始化变量\\n  String _name = \\\"by 小德\\\";\\n\\n  @override\\n  Widget build(BuildContext context) {\\n\\n    print('display $content');\\n\\n    // return a Widget\\n    return MaterialApp(\\n      title: \\\"Flutter Demo\\\",\\n      theme: ThemeData(\\n        primaryColor: Colors.blue,\\n      ),\\n      home: Scaffold(\\n          appBar: AppBar(title: Text(\\\"Flutter Dart 语法\\\")),\\n          body: Text(content+_name)\\n          ),\\n    );\\n  }\\n}\\n\\n\")])])]),_(\"ul\",[_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"import\")])]),v._v(\" \"),_(\"p\",[v._v(\"导入库。\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[v._v(\"注释\")]),v._v(\" \"),_(\"p\",[v._v(\"注释，有两种：\")]),v._v(\" \"),_(\"p\",[v._v(\"语法\")]),v._v(\" \"),_(\"p\",[v._v(\"含义\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"/** .. **/\")])]),v._v(\" \"),_(\"p\",[v._v(\"多行注释\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"//\")])]),v._v(\" \"),_(\"p\",[v._v(\"单行注释\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"=>\")])]),v._v(\" \"),_(\"p\",[v._v(\"Dart 的箭头语法，即 Lambda 表达式。\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"class\")])]),v._v(\" \"),_(\"p\",[v._v(\"Dart 的类。\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"extends\")])]),v._v(\" \"),_(\"p\",[v._v(\"继承。\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"var\")])]),v._v(\" \"),_(\"p\",[v._v(\"一种声明变量而不指定其类型的方法。\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[v._v(\"以下划线 \"),_(\"code\",[v._v(\"_\")]),v._v(\" 开头的类或成员变量是私有的\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart 没有 Public、Protected、Private 的关键字，在 Dart 里，类或成员变量默认都是 Public 的，以下划线 \"),_(\"code\",[v._v(\"_\")]),v._v(\" 开头的就是私有的，例如成员变量 _name 就是私有的。\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"String\")])]),v._v(\" \"),_(\"p\",[v._v(\"在声明变量时也可以指定具体类型，String 是字符串，还有其他的数据类型：int、double等。\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"'...'\")]),v._v(\" 或 \"),_(\"code\",[v._v('\"...\"')])]),v._v(\" \"),_(\"p\",[v._v(\"字符串的使用，用单引号或双引号都行。\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"$variableName\")]),v._v(\" 或 \"),_(\"code\",[v._v(\"${expression}\")])]),v._v(\" \"),_(\"p\",[v._v(\"字符串插值：将变量的值直接插入字符串中。\")])])]),v._v(\" \"),_(\"h2\",{attrs:{id:\"变量声明\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#变量声明\"}},[v._v(\"#\")]),v._v(\" 变量声明\")]),v._v(\" \"),_(\"p\",[v._v(\"以下是 Dart 中所有变量声明的方法：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"var content = 'Dart 语法'; // Declare and initialize a variable.\\nvar switchOn = false;\\nvar current = 0;\\n\\nString name = \\\"by 小德\\\";\\nint count = 0;\\n\\ndynamic example = 'example';\\n\\nObject index = 100;\\n\\n\")])])]),_(\"p\",[v._v(\"总共有四种：\")]),v._v(\" \"),_(\"ol\",[_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"var\")])]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"var content = 'Dart 语法'; // Declare and initialize a variable.\\nvar switchOn = false;\\nvar current = 0;\\n\\n\")])])]),_(\"p\",[v._v(\"使用 \"),_(\"code\",[v._v(\"var\")]),v._v(\" 来声明变量，不需要特别指定变量的数据类型，因为 Dart 会自动推断其数据类型，所以可以使用 \"),_(\"code\",[v._v(\"var\")]),v._v(\" 来定义任何的变量。\")]),v._v(\" \"),_(\"p\",[v._v(\"问题来了，\"),_(\"code\",[v._v(\"var\")]),v._v(\" 为什么能定义所有的变量？\")]),v._v(\" \"),_(\"blockquote\",[_(\"p\",[v._v(\"因为 ，var 并不是直接存储值，而是存储的值的对象的引用，例如：var content = 'Dart 语法' 这句，是名字为 content 的 var 变量存储了值为 'Dart 语法' 的 String 对象的引用，所以 var 才能定义任何变量。\")])])]),v._v(\" \"),_(\"li\",[_(\"p\",[v._v(\"明确数据类型\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v('String name = \"by 小德\";\\nint count = 0;\\n\\n')])])]),_(\"p\",[v._v(\"就是在声明变量的时候，使用明确的数据类型。\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"dynamic\")])]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"dynamic example = 'example';\\n\\n\")])])]),_(\"p\",[v._v(\"意思是数据类型是动态可变的，也可以定义任何变量，但是和 \"),_(\"code\",[v._v(\"var\")]),v._v(\" 不同的是，\"),_(\"code\",[v._v(\"var\")]),v._v(\" 一旦赋值后，就不能改变数据类型了，例如以下用法就是错误的\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"var content = 'Dart 语法';\\ncontent = 1; //❌ 错误的使用方法，content为String，不能赋值数字类型\\n\\n\")])])]),_(\"p\",[v._v(\"但是 dynamic 就可以，dynamic 可以这么使用：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"dynamic example = 'example';\\nexample = 1;//✅  这个使用方法正确，因为 dynamic 的类型是动态可变的\\n\\n\")])])])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"Object\")])]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"Object index = 100;\\n\\n\")])])]),_(\"p\",[v._v(\"Dart 里所有东西都是对象，是因为 Dart 的所有东西都继承自 Object，因此 Object 可以定义任何变量，而且赋值后，类型也可以更改：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"Object index = 100;\\nindex = 'string';//✅ 因为  'String' 也是 Object\\n\\n\")])])])])]),v._v(\" \"),_(\"blockquote\",[_(\"p\",[v._v(\"注意：请不要滥用 dynamic，一般情况下都可以用 Object 代替 dynamic。\")])]),v._v(\" \"),_(\"p\",[v._v(\"那什么情况下可以用 \"),_(\"code\",[v._v(\"dynamic\")]),v._v(\" 呢？\")]),v._v(\" \"),_(\"blockquote\",[_(\"p\",[v._v(\"当这个变量没法用 Dart 的类型来表示时，比如 Native 和 Flutter 交互，从 Native 传来的数据。所以你会看到 PlatformChannel 里有很多地方使用到了 dynamic。\")])]),v._v(\" \"),_(\"h4\",{attrs:{id:\"常量-final-和-const\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常量-final-和-const\"}},[v._v(\"#\")]),v._v(\" 常量：\"),_(\"code\",[v._v(\"final\")]),v._v(\" 和 \"),_(\"code\",[v._v(\"const\")])]),v._v(\" \"),_(\"p\",[v._v(\"如果你不想更改变量的值，那么你可以用 final 和 const:\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"final content = 'Dart 语法'; \\nstatic const bool switchOn = false;\\n\\n\")])])]),_(\"p\",[v._v(\"使用时有以下几点：\")]),v._v(\" \"),_(\"ul\",[_(\"li\",[_(\"p\",[v._v(\"使用 \"),_(\"code\",[v._v(\"final\")]),v._v(\" 和 \"),_(\"code\",[v._v(\"const\")]),v._v(\" 的时候可以把 \"),_(\"code\",[v._v(\"var\")]),v._v(\" 省略\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"final\")]),v._v(\" 和 \"),_(\"code\",[v._v(\"const\")]),v._v(\" 变量只能赋值一次，而且只能在声明的时候就赋值\")])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"const\")]),v._v(\" 是隐式的 \"),_(\"code\",[v._v(\"final\")])])]),v._v(\" \"),_(\"li\",[_(\"p\",[v._v(\"在使用 \"),_(\"code\",[v._v(\"const\")]),v._v(\" 的时候，如果变量是类里的变量，必须加 \"),_(\"code\",[v._v(\"static\")]),v._v(\" ，是全局变量时不需要加,例如:\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"import 'package:flutter/material.dart';\\n\\nconst demoConst = 'demo'; // 这里不用加 static\\n\\nvoid main() => runApp(MyApp());\\n\\nclass MyApp extends StatelessWidget {\\n\\n    static content = 'Dart 语法'; // 这里必须加 static \\n    ...\\n}\\n\\n\")])])])])]),v._v(\" \"),_(\"p\",[v._v(\"那么 \"),_(\"code\",[v._v(\"final\")]),v._v(\" 和 \"),_(\"code\",[v._v(\"const\")]),v._v(\" 有什么区别呢？\")]),v._v(\" \"),_(\"blockquote\",[_(\"p\",[v._v(\"const 是编译时常量，在编译的时候就初始化了，但是 final 变量是当类创建的时候才初始化。\")])]),v._v(\" \"),_(\"h2\",{attrs:{id:\"dart-支持的数据类型\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dart-支持的数据类型\"}},[v._v(\"#\")]),v._v(\" Dart 支持的数据类型\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart 支持以下的数据类型：\")]),v._v(\" \"),_(\"p\",[v._v(\"含义\")]),v._v(\" \"),_(\"p\",[v._v(\"使用\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"int\")])]),v._v(\" \"),_(\"p\",[v._v(\"整数，范围为 -2^63 到 2^63 - 1.\")]),v._v(\" \"),_(\"p\",[v._v(\"int x = 1;//没有小数点就是int\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"double\")])]),v._v(\" \"),_(\"p\",[v._v(\"浮点数，64位（双精度）浮点数\")]),v._v(\" \"),_(\"p\",[v._v(\"double y = 1.1;//有小数点就是浮点数\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"num\")])]),v._v(\" \"),_(\"p\",[v._v(\"num 是数字类型，既可以表示整数，也可以表示浮点数，具体看赋的值\")]),v._v(\" \"),_(\"p\",[v._v(\"num x = 1;//num x是整数\"),_(\"br\"),v._v(\"\\nnum y = 1.1;//num y是浮点数\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"String\")])]),v._v(\" \"),_(\"p\",[v._v(\"字符串\"),_(\"br\"),v._v(\"\\nDart字符串采用UTF-16编码\"),_(\"br\"),v._v(\"\\n可以使用单引号或双引号来创建字符串\")]),v._v(\" \"),_(\"p\",[v._v(\"var s1 = 'string';\"),_(\"br\"),v._v('\\nvar s2 = \"string\";')]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"bool\")])]),v._v(\" \"),_(\"p\",[v._v(\"布尔值\")]),v._v(\" \"),_(\"p\",[v._v(\"var isTrue = true;\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"List\")])]),v._v(\" \"),_(\"p\",[v._v(\"List\"),_(\"E\",[_(\"br\"),v._v(\"\\nE 表示 List 里的数据类型\"),_(\"br\"),v._v(\"\\n用中括号来赋值\")])],1),v._v(\" \"),_(\"p\",[v._v(\"List\"),_(\"int\",[v._v(\" list = [1, 2, 3];\")])],1),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"Set\")])]),v._v(\" \"),_(\"p\",[v._v(\"Set\"),_(\"E\",[_(\"br\"),v._v(\"\\nE 表示 Set 里的数据类型\"),_(\"br\"),v._v(\"\\n用大括号来赋值\")])],1),v._v(\" \"),_(\"p\",[v._v(\"Set\"),_(\"String\",[v._v(\" halogens = {'fluorine', 'chlorine', 'bromine', 'iodine', 'astatine'};\")])],1),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"Map\")])]),v._v(\" \"),_(\"p\",[v._v(\"Map<K, V>\"),_(\"br\"),v._v(\"\\nK 是 Key 的数据类型,V是 Value 的数据类型\")]),v._v(\" \"),_(\"p\",[v._v(\"Map<String,String> gifts = {\"),_(\"br\"),v._v(\"\\n// Key: Value 格式\"),_(\"br\"),v._v(\"\\n'first': 'partridge',\"),_(\"br\"),v._v(\"\\n'second': 'turtledoves',\"),_(\"br\"),v._v(\"\\n'fifth': 'golden rings'};\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"Runes\")])]),v._v(\" \"),_(\"p\",[v._v(\"表示采用 UTF-32 的字符串，用于显示 Unicode\"),_(\"br\"),v._v(\"\\n因为Dart字符串是UTF-16，因此在Dart中表示32位的Unicode值需要Runes这个特殊语法。\")]),v._v(\" \"),_(\"p\",[v._v(\"Runes input = new Runes('\\\\u{1f600}');\"),_(\"br\"),v._v(\"\\nprint(new String.fromCharCodes(input));\"),_(\"br\"),v._v(\"\\n打印出来的是笑脸emoji：😆\")]),v._v(\" \"),_(\"h2\",{attrs:{id:\"函数\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数\"}},[v._v(\"#\")]),v._v(\" 函数\")]),v._v(\" \"),_(\"p\",[v._v(\"在 Dart 中函数也是对象，函数的类型是 \"),_(\"code\",[v._v(\"Function\")]),v._v(\"。\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"写一个函数\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#写一个函数\"}},[v._v(\"#\")]),v._v(\" 写一个函数\")]),v._v(\" \"),_(\"p\",[v._v(\"函数按照如下的格式来写：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"返回类型 函数名(函数参数){\\n    \\n}\\n\\n\")])])]),_(\"p\",[v._v(\"这里写一个名字为 say 的函数：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v('bool say(String msg , String from, int clock){\\n  print(msg+\" from \" + from + \" at \" + clock?.toString());\\n  return true;\\n}\\n\\n')])])]),_(\"h4\",{attrs:{id:\"函数的类型-function\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数的类型-function\"}},[v._v(\"#\")]),v._v(\" 函数的类型：\"),_(\"code\",[v._v(\"Function\")])]),v._v(\" \"),_(\"p\",[v._v(\"上面写了一个函数 say，写出如下的代码，判断函数 say 的类型是不是 \"),_(\"code\",[v._v(\"Function\")]),v._v(\"：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"print(say is Function);\\n\\n\")])])]),_(\"p\",[v._v(\"输出的是 true。\")]),v._v(\" \"),_(\"p\",[v._v(\"而且请注意，这里在判断函数的类型的时候，直接用的是函数的名字，也就是说函数的名字就像变量名一样可以直接拿来使用，当直接用函数名来使用时，就是一个对象，其类型是 Function，要调用这个函数的话，就需要传入参数来使用，下面是使用函数的方法：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"say('Hello Flutter'，'XiaoDe',10);\\n\\n\")])])]),_(\"h4\",{attrs:{id:\"函数的参数-必选参数和可选参数\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#函数的参数-必选参数和可选参数\"}},[v._v(\"#\")]),v._v(\" 函数的参数：必选参数和可选参数\")]),v._v(\" \"),_(\"p\",[v._v(\"函数的参数分为两类：\")]),v._v(\" \"),_(\"ol\",[_(\"li\",[v._v(\"必选参数\")]),v._v(\" \"),_(\"li\",[v._v(\"可选参数\")])]),v._v(\" \"),_(\"p\",[v._v(\"必选参数是必填的，可选参数是选填的。\")]),v._v(\" \"),_(\"p\",[v._v(\"那如何知道参数是必选的还是可选的呢？\")]),v._v(\" \"),_(\"blockquote\",[_(\"p\",[v._v(\"首先必选参数在前面，和普通的参数定义一样，后面跟可选参数，可选参数需要用 {} 或者 [] 包起来，用不同的括号，可选参数的意义与用法也不一样。\")])]),v._v(\" \"),_(\"h4\",{attrs:{id:\"必选参数\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#必选参数\"}},[v._v(\"#\")]),v._v(\" 必选参数\")]),v._v(\" \"),_(\"p\",[v._v(\"必选参数就是使用平常的方法定义的函数参数，如下面的函数：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v('bool say(String msg , String from, int clock){\\n    print(msg+\" from \" + from + \" at \" + clock?.toString());\\n    return true;\\n}\\n\\n')])])]),_(\"p\",[v._v(\"say 函数有三个参数：msg、from、clock，这三个参数都是必选参数。\")]),v._v(\" \"),_(\"blockquote\",[_(\"p\",[v._v(\"必选参数必须在可选参数的前面。\")])]),v._v(\" \"),_(\"h4\",{attrs:{id:\"可选参数\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可选参数\"}},[v._v(\"#\")]),v._v(\" 可选参数\")]),v._v(\" \"),_(\"p\",[v._v(\"可选参数也分为两类：\")]),v._v(\" \"),_(\"ol\",[_(\"li\",[_(\"strong\",[v._v(\"可选命名参数\")]),v._v(\"：使用 \"),_(\"code\",[v._v(\"{}\")]),v._v(\" 包起来的参数是可选命名参数\")]),v._v(\" \"),_(\"li\",[_(\"strong\",[v._v(\"可选位置参数\")]),v._v(\"：使用 \"),_(\"code\",[v._v(\"[]\")]),v._v(\" 包起来的参数是可选位置参数\")])]),v._v(\" \"),_(\"ul\",[_(\"li\",[_(\"p\",[v._v(\"可选命名参数：\"),_(\"code\",[v._v(\"{}\")])]),v._v(\" \"),_(\"p\",[v._v(\"用 \"),_(\"code\",[v._v(\"{}\")]),v._v(\" 包起来的参数是\"),_(\"strong\",[v._v(\"可选命名参数\")]),v._v(\"，前面讲数据类型的时候，使用 \"),_(\"code\",[v._v(\"{}\")]),v._v(\" 来赋值的数据类型是 Map，所以可选的命名参数的类型也是 Map， 因此调用函数时，可选参数的赋值必须是 \"),_(\"code\",[v._v(\"paramName: value\")]),v._v(\" 这种 \"),_(\"code\",[v._v(\"key: value\")]),v._v(\" 格式的，下面是可选命名参数的例子：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v('bool say(String msg , {String from, int clock}){\\n    print(msg+\" from \" + from + \" at \" + clock.toString());\\n    return true;\\n}\\n\\n')])])]),_(\"p\",[v._v(\"这里参数 \"),_(\"code\",[v._v(\"from\")]),v._v(\" 就是可选命名参数。\")]),v._v(\" \"),_(\"p\",[v._v(\"要调用 \"),_(\"code\",[v._v(\"say\")]),v._v(\" 函数，方法如下：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"say('Hello Flutter');//✅ 因为 from 和 clock 是可选参数，所以可以不填\\n    \\nsay('Hello Flutter',from: 'XiaoMing');//对 用命名参数格式 paramName: value 为 from 赋值\\nsay('Hello Flutter',clock: 11);//✅\\nsay('Hello Flutter',from: 'XiaoMing',clock: 11);//✅\\n\\n\")])])]),_(\"p\",[v._v(\"同时还可以给命名参数加 \"),_(\"code\",[v._v(\"@required\")]),v._v(\" ，意思是这个也是必填参数，例子如下：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v('bool say(String msg , {@required String from, int clock}){\\n    print(msg+\" from \" + from + \" at \" + clock.toString());\\n    return true;\\n    }\\n\\n')])])]),_(\"p\",[v._v(\"这时候要调用 \"),_(\"code\",[v._v(\"say\")]),v._v(\" 函数，方法如下：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"say('Hello Flutter');//❌  错误调用方式，因为 from 是必选参数，不填的话会报错\\n    \\nsay('Hello Flutter',from: 'XiaoMing');//✅ 正确调用方式\\nsay('Hello Flutter',from: 'XiaoMing',clock: 11);//✅ 这个调用方式也是正确的\\n\\n\")])])])]),v._v(\" \"),_(\"li\",[_(\"p\",[v._v(\"可选位置参数：\"),_(\"code\",[v._v(\"[]\")])]),v._v(\" \"),_(\"p\",[v._v(\"用 \"),_(\"code\",[v._v(\"[]\")]),v._v(\" 包起来的参数是\"),_(\"strong\",[v._v(\"可选位置参数\")]),v._v(\"，前面讲数据类型的时候，使用 \"),_(\"code\",[v._v(\"[]\")]),v._v(\" 来赋值的数据类型是 List，所以可选的命名参数的类型也是 List，所以赋值和参数是一一对应的，下面是可选位置参数的例子：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v('bool say(String msg , [String from , int clock]){\\n    print(msg+\" from \" + from + \" at \" + clock.toString());\\n    return true;\\n}\\n\\n')])])]),_(\"p\",[v._v(\"要给可选位置参数赋值时，必选按照顺序来赋值：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"say('Hello Flutter');//✅ 因为 from 和 clock 是可选参数，所以可以不填\\n    \\nsay('Hello Flutter','XiaoMing',1);//✅ 为可选位置参数赋值，只能一个参数一个参数对应的赋值，所以要全部赋值\\n    \\nsay('Hello Flutter','XiaoMing')//✅\\nsay('Hello Flutter',1)//❌ 因为  1 赋值给了 from,但是 from 是String，所以会报错\\n\\n\")])])])])]),v._v(\" \"),_(\"h4\",{attrs:{id:\"可选参数的默认值\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#可选参数的默认值\"}},[v._v(\"#\")]),v._v(\" 可选参数的默认值 ：\"),_(\"code\",[v._v(\"=\")])]),v._v(\" \"),_(\"p\",[v._v(\"因为参数是可选的，那么参数的值很可能没有赋值，就是 null ，用到的时候就有可能会触发 NPE，所以可以给可选参数赋默认值。\")]),v._v(\" \"),_(\"p\",[v._v(\"使用 \"),_(\"code\",[v._v(\"=\")]),v._v(\" 为可选参数赋默认值\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v('    bool say(String msg , {String from = \\'empty\\', int clock = 0}){\\n        print(msg+\" from \" + from + \" at \" + clock.toString());\\n        return true;\\n    }\\n\\n')])])]),_(\"h2\",{attrs:{id:\"箭头语法\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#箭头语法\"}},[v._v(\"#\")]),v._v(\" \"),_(\"code\",[v._v(\"=>\")]),v._v(\" ：箭头语法\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"=>\")]),v._v(\" 语法是 \"),_(\"code\",[v._v(\"{ return expr; }\")]),v._v(\" 的简写，因为 \"),_(\"code\",[v._v(\"=>\")]),v._v(\" 酷似箭头，也称箭头语法,也是 Lambda 表达式。\")]),v._v(\" \"),_(\"blockquote\",[_(\"p\",[v._v(\"=> 语句后面只能跟一行代码，而且这一行代码只能一个表达式，而不能跟语句。表达式可以是函数、值。\")])]),v._v(\" \"),_(\"p\",[v._v(\"例如，main() 函数这里:\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"void main() => runApp(MyApp());\\n\\n\")])])]),_(\"p\",[v._v(\"就等价于：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"void main(){\\n    return runApp(MyApp());//runApp() 返回的是 void\\n}\\n\\n\")])])]),_(\"h2\",{attrs:{id:\"类\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类\"}},[v._v(\"#\")]),v._v(\" 类\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart 中每个对象都是一个类的实例，所有类都继承自 Object。\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"自定一个类\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#自定一个类\"}},[v._v(\"#\")]),v._v(\" 自定一个类\")]),v._v(\" \"),_(\"p\",[v._v(\"如下，我定义一个类 Point：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"class Point {\\n  num x, y;\\n\\n  Point(num x, num y) {\\n    // There's a better way to do this, stay tuned.\\n    this.x = x;\\n    this.y = y;\\n  }\\n}\\n\\n\")])])]),_(\"h4\",{attrs:{id:\"默认构造函数的写法\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#默认构造函数的写法\"}},[v._v(\"#\")]),v._v(\" 默认构造函数的写法\")]),v._v(\" \"),_(\"p\",[v._v(\"默认的构造函数就是使用类名作为函数名的构造函数，例如上面写的类 Point 的构造函数：Point(num x,num y)\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"构造函数的语法糖\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#构造函数的语法糖\"}},[v._v(\"#\")]),v._v(\" 构造函数的语法糖\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart 里还有构造函数的语法糖，可以将构造函数改造为：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"Point(this.x, this.y);\\n\\n\")])])]),_(\"p\",[v._v(\"这样 Point 类就可以简化为：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"class Point {\\n  num x,y;\\n  Point(this.x, this.y);\\n}\\n\\n\")])])]),_(\"p\",[v._v(\"这个语法糖会简化构造函数的赋值操作。\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"widget-构造函数参数采用的是可选命名参数\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#widget-构造函数参数采用的是可选命名参数\"}},[v._v(\"#\")]),v._v(\" Widget 构造函数参数采用的是可选命名参数\")]),v._v(\" \"),_(\"p\",[v._v(\"因为 Widget 构造函数有很多参数，为了使用起来清晰，Widget 构造函数的参数采用的是可选命名参数。\")]),v._v(\" \"),_(\"p\",[v._v(\"后面会经常用到。\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"创建实例-不需要使用-new\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建实例-不需要使用-new\"}},[v._v(\"#\")]),v._v(\" 创建实例：不需要使用 new\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"Point point = Point(0,0);\\n\\n\")])])]),_(\"p\",[v._v(\"创建类实例的时候，都要写 new，其实很麻烦的，而且也没有必要，所以 Dart 在创建实例的时候不在需要使用 new 。\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"使用类的变量\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用类的变量\"}},[v._v(\"#\")]),v._v(\" 使用类的变量\")]),v._v(\" \"),_(\"p\",[v._v(\"使用点 \"),_(\"code\",[v._v(\".\")]),v._v(\" 来引用实例变量或方法：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"print(p.x);\\n\\n\")])])]),_(\"h2\",{attrs:{id:\"操作符\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#操作符\"}},[v._v(\"#\")]),v._v(\" 操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart 中定义了很多的操作符，分为以下几类：\")]),v._v(\" \"),_(\"ol\",[_(\"li\",[v._v(\"算术运算符\")]),v._v(\" \"),_(\"li\",[v._v(\"比较操作符\")]),v._v(\" \"),_(\"li\",[v._v(\"类型判断符\")]),v._v(\" \"),_(\"li\",[v._v(\"赋值操作符\")]),v._v(\" \"),_(\"li\",[v._v(\"逻辑运算符\")]),v._v(\" \"),_(\"li\",[v._v(\"按位与移位运算符\")]),v._v(\" \"),_(\"li\",[v._v(\"条件运算符\")]),v._v(\" \"),_(\"li\",[v._v(\"级联操作符\")]),v._v(\" \"),_(\"li\",[v._v(\"其他操作符\")])]),v._v(\" \"),_(\"h4\",{attrs:{id:\"_1-算术运算操作符\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-算术运算操作符\"}},[v._v(\"#\")]),v._v(\" 1. 算术运算操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"下面是 Dart 支持的常见的算术运算操作符：\")]),v._v(\" \"),_(\"p\",[v._v(\"操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"含义\")]),v._v(\" \"),_(\"p\",[v._v(\"例子\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"+\")])]),v._v(\" \"),_(\"p\",[v._v(\"加\")]),v._v(\" \"),_(\"p\",[v._v(\"var a = 2 + 3;\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"-\")])]),v._v(\" \"),_(\"p\",[v._v(\"减\")]),v._v(\" \"),_(\"p\",[v._v(\"var a = 2 - 3;\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"-exper\")])]),v._v(\" \"),_(\"p\",[v._v(\"负数\")]),v._v(\" \"),_(\"p\",[v._v(\"var a = -1;\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"*\")])]),v._v(\" \"),_(\"p\",[v._v(\"乘\")]),v._v(\" \"),_(\"p\",[v._v(\"var a = 2 * 3;\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"/\")])]),v._v(\" \"),_(\"p\",[v._v(\"除，精确除法\")]),v._v(\" \"),_(\"p\",[v._v(\"var a = 5 / 2; // a的结果为 2.5\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"~/\")])]),v._v(\" \"),_(\"p\",[v._v(\"整除\")]),v._v(\" \"),_(\"p\",[v._v(\"var a = 5 ~/ 2; // a的结果为 2\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"%\")])]),v._v(\" \"),_(\"p\",[v._v(\"取余\")]),v._v(\" \"),_(\"p\",[v._v(\"var a = 5 % 2; // a的结果为 1\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"++var\")])]),v._v(\" \"),_(\"p\",[v._v(\"var a = 1;\"),_(\"br\"),v._v(\"\\nvar b = ++a;// b 的结果为 2,a 的结果为 2\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"var++\")])]),v._v(\" \"),_(\"p\",[v._v(\"var a = 1;\"),_(\"br\"),v._v(\"\\nvar b = a++;// b 的结果为 1,a 的结果为 2\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"--var\")])]),v._v(\" \"),_(\"p\",[v._v(\"var a = 1;\"),_(\"br\"),v._v(\"\\nvar b = --a;// b 的结果为 0,a 的结果为 0\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"var--\")])]),v._v(\" \"),_(\"p\",[v._v(\"var a = 1;\"),_(\"br\"),v._v(\"\\nvar b = a--;// b 的结果为 1,a 的结果为 0\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"_2-相等和大小关系操作符\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-相等和大小关系操作符\"}},[v._v(\"#\")]),v._v(\" 2.相等和大小关系操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"下面是 Dart 支持的判断是否相等和大小关系的操作符：\")]),v._v(\" \"),_(\"p\",[v._v(\"操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"含义\")]),v._v(\" \"),_(\"p\",[v._v(\"例子\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"==\")])]),v._v(\" \"),_(\"p\",[v._v(\"是否相等\")]),v._v(\" \"),_(\"p\",[v._v(\"assert(2 == 2);\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"!=\")])]),v._v(\" \"),_(\"p\",[v._v(\"不等于\")]),v._v(\" \"),_(\"p\",[v._v(\"assert(2 != 3);\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\">\")])]),v._v(\" \"),_(\"p\",[v._v(\"大于\")]),v._v(\" \"),_(\"p\",[v._v(\"assert(3 > 2);\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"<\")])]),v._v(\" \"),_(\"p\",[v._v(\"小于\")]),v._v(\" \"),_(\"p\",[v._v(\"assert(2 < 3);\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\">=\")])]),v._v(\" \"),_(\"p\",[v._v(\"大于等于\")]),v._v(\" \"),_(\"p\",[v._v(\"assert(3 >= 3);\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"<=\")])]),v._v(\" \"),_(\"p\",[v._v(\"小于等于\")]),v._v(\" \"),_(\"p\",[v._v(\"assert(3 <= 3);\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"_3-类型判断操作符\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-类型判断操作符\"}},[v._v(\"#\")]),v._v(\" 3.类型判断操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"下面是 Dart 支持的检查运行时类型的操作符：\")]),v._v(\" \"),_(\"p\",[v._v(\"操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"含义\")]),v._v(\" \"),_(\"p\",[v._v(\"例子\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"as\")])]),v._v(\" \"),_(\"p\",[v._v(\"类型转换\")]),v._v(\" \"),_(\"p\",[v._v(\"(emp as Person).firstName = 'Bob';\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"is\")])]),v._v(\" \"),_(\"p\",[v._v(\"判断是否是某个类型,如果是的话，就返回 true\")]),v._v(\" \"),_(\"p\",[v._v(\"if (emp is Person) {\"),_(\"br\"),v._v(\"\\n// 如果 emp 是 Person 类型\"),_(\"br\"),v._v(\"\\nemp.firstName ='Bob';\"),_(\"br\"),v._v(\"\\n}\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"is!\")])]),v._v(\" \"),_(\"p\",[v._v(\"判断是否不是某个类型，如果不是的话，就返回 true\")]),v._v(\" \"),_(\"p\",[v._v(\"if (emp is! Person) {\"),_(\"br\"),v._v(\"\\n// 如果 emp 不是 Person 类型\"),_(\"br\"),v._v(\"\\n}\")]),v._v(\" \"),_(\"blockquote\",[_(\"p\",[v._v(\"上面的例子中，如果 emp 是 null 的话，as 的例子就会抛异常，is 和 isn't 的例子会返回 false.\")])]),v._v(\" \"),_(\"h4\",{attrs:{id:\"_4-赋值操作符\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-赋值操作符\"}},[v._v(\"#\")]),v._v(\" 4.赋值操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"赋值操作符是 \"),_(\"code\",[v._v(\"=\")]),v._v(\"。\")]),v._v(\" \"),_(\"p\",[v._v(\"如果只想当被赋值的变量为空的时候才赋值，可以使用\"),_(\"code\",[v._v(\"??=\")]),v._v(\",例如：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"var a,b;\\na = 1; //使用 = 赋值\\nb ??= 1; // 当 b 是空的话才赋值，否则不会赋值\\n\\n\")])])]),_(\"p\",[_(\"code\",[v._v(\"=\")]),v._v(\" 还可以和其他操作符结合起来使用，例如:\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"+=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"-=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"*=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"/=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"~/=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"%=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\">>=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"<<=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"^=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"&=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"|=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"??=\")])]),v._v(\" \"),_(\"p\",[v._v(\"这些组合起来的操作符，意思是先进行操作，然后在赋值，例如：\")]),v._v(\" \"),_(\"p\",[v._v(\"组合操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"例子\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"+=\")])]),v._v(\" \"),_(\"p\",[v._v(\"a += b ; 就等效于 a = a + b;\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"_5-逻辑运算操作符\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-逻辑运算操作符\"}},[v._v(\"#\")]),v._v(\" 5.逻辑运算操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"下面是 Dart 支持的逻辑运算操作符：\")]),v._v(\" \"),_(\"p\",[v._v(\"操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"含义\")]),v._v(\" \"),_(\"p\",[v._v(\"例子\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"!expr\")])]),v._v(\" \"),_(\"p\",[v._v(\"反转表达式（将 false 改为 true，反之亦然）\")]),v._v(\" \"),_(\"p\",[v._v(\"!(2 == 3);// 结果为 true\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"||\")])]),v._v(\" \"),_(\"p\",[v._v(\"逻辑或\")]),v._v(\" \"),_(\"p\",[v._v(\"(2 == 2) || (2 == 3);// 结果为 true\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"&&\")])]),v._v(\" \"),_(\"p\",[v._v(\"逻辑与\")]),v._v(\" \"),_(\"p\",[v._v(\"（2 == 2）&& (3 == 3);// 结果为 true\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"_6-按位与移位运算符\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-按位与移位运算符\"}},[v._v(\"#\")]),v._v(\" 6.按位与移位运算符\")]),v._v(\" \"),_(\"p\",[v._v(\"下面是 Dart 支持的按位与移位运算符：\")]),v._v(\" \"),_(\"p\",[v._v(\"操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"含义\")]),v._v(\" \"),_(\"p\",[v._v(\"例子\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"&\")])]),v._v(\" \"),_(\"p\",[v._v(\"按位与\"),_(\"br\"),v._v(\"\\n对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。\")]),v._v(\" \"),_(\"p\",[v._v(\"final value = 0x22;\"),_(\"br\"),v._v(\"\\nfinal bitmask = 0x0f;\"),_(\"br\"),v._v(\"\\nvar result = value & bitmask;//结果为 0x02\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"|\")])]),v._v(\" \"),_(\"p\",[v._v(\"按位或，对于每一个比特位，当两个操作数相应的比特位至少有一个1时，结果为1，否则为0。\")]),v._v(\" \"),_(\"p\",[v._v(\"final value = 0x22;\"),_(\"br\"),v._v(\"\\nfinal bitmask = 0x0f;\"),_(\"br\"),v._v(\"\\nvar result = value\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"^\")])]),v._v(\" \"),_(\"p\",[v._v(\"按位异或，对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。\")]),v._v(\" \"),_(\"p\",[v._v(\"final value = 0x22;\"),_(\"br\"),v._v(\"\\nfinal bitmask = 0x0f;\"),_(\"br\"),v._v(\"\\nvar result = value ^ bitmask;//结果为 0x2d\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"~expr\")])]),v._v(\" \"),_(\"p\",[v._v(\"按位非，反转操作数的比特位，即0变成1，1变成0。\")]),v._v(\" \"),_(\"p\",[v._v(\"final value = 0x22;\"),_(\"br\"),v._v(\"\\nfinal bitmask = 0x0f;\"),_(\"br\"),v._v(\"\\nvar result = value & ~bitmask;//结果为 0x20\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"<<\")])]),v._v(\" \"),_(\"p\",[v._v(\"左移\")]),v._v(\" \"),_(\"p\",[v._v(\"final value = 0x22;\"),_(\"br\"),v._v(\"\\nfinal bitmask = 0x0f;\"),_(\"br\"),v._v(\"\\nvar result = value << 4;//结果为 0x220\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\">>\")])]),v._v(\" \"),_(\"p\",[v._v(\"右移\")]),v._v(\" \"),_(\"p\",[v._v(\"final bitmask = 0x0f;\"),_(\"br\"),v._v(\"\\nvar result = value >> 4;//结果为 0x02\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"_7-条件运算符\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-条件运算符\"}},[v._v(\"#\")]),v._v(\" 7.条件运算符\")]),v._v(\" \"),_(\"p\",[v._v(\"Dart 有两个运算符，可以让您使用更简单的表达式来代替可能需要 if-else 语句的表达式：\")]),v._v(\" \"),_(\"ol\",[_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"condition ? expr1 : expr2\")])]),v._v(\" \"),_(\"p\",[v._v(\"如果 condition 是 true，返回 expr1，否则返回 expr2。\")]),v._v(\" \"),_(\"p\",[v._v(\"当你需要根据一个 boolean 表达式来赋值时，可以使用 \"),_(\"code\",[v._v(\"? :\")]),v._v(\",例如：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"var visibility = isPublic ? 'public' : 'private';\\n\\n\")])])])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"expr1 ?? expr2\")])]),v._v(\" \"),_(\"p\",[v._v(\"如果 expr1 为 null，就返回 expr2 的值，否则返回 expr1 的值。\")]),v._v(\" \"),_(\"p\",[v._v(\"如果需要根据一个 boolean 表达式是否为 null 来作为条件，可以使用 \"),_(\"code\",[v._v(\"??\")]),v._v(\"，例如：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"String playerName(String name) => name ?? 'Guest';\\n\\n\")])])])])]),v._v(\" \"),_(\"h4\",{attrs:{id:\"_8-级联操作符\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-级联操作符\"}},[v._v(\"#\")]),v._v(\" 8.级联操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"级联操作符是 \"),_(\"code\",[v._v(\"..\")]),v._v(\",允许你对同一对象进行一系列的操作。除了函数调用，您还可以访问同一对象上的字段。这通常可以为您节省创建临时变量的步骤，并允许您编写更多流畅的代码。\")]),v._v(\" \"),_(\"p\",[v._v(\"例如：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"querySelector('#confirm') // Get an object.\\n  ..text = 'Confirm' // Use its members.\\n  ..classes.add('important')\\n  ..onClick.listen((e) => window.alert('Confirmed!'));\\n\\n\")])])]),_(\"p\",[v._v(\"querySelector() 返回一个 selector 对象，后面的 \"),_(\"code\",[v._v(\"..text\")]),v._v(\"、\"),_(\"code\",[v._v(\"..classes\")]),v._v(\"、\"),_(\"code\",[v._v(\"..onClick\")]),v._v(\"就是在 selector 对象上进行的。\")]),v._v(\" \"),_(\"h4\",{attrs:{id:\"_9-其他操作符\"}},[_(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-其他操作符\"}},[v._v(\"#\")]),v._v(\" 9.其他操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"还有其他的操作符：\")]),v._v(\" \"),_(\"p\",[v._v(\"操作符\")]),v._v(\" \"),_(\"p\",[v._v(\"含义\")]),v._v(\" \"),_(\"p\",[v._v(\"例子\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"()\")])]),v._v(\" \"),_(\"p\",[v._v(\"函数调用\")]),v._v(\" \"),_(\"p\",[v._v(\"代表函数调用\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"[]\")])]),v._v(\" \"),_(\"p\",[v._v(\"访问列表\")]),v._v(\" \"),_(\"p\",[v._v(\"引用列表中指定索引处的值\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\".\")])]),v._v(\" \"),_(\"p\",[v._v(\"访问成员变量\")]),v._v(\" \"),_(\"p\",[v._v(\"访问表达式里的成员变量，例如 \"),_(\"code\",[v._v(\"foo.bar\")]),v._v(\",表示访问 \"),_(\"code\",[v._v(\"foo\")]),v._v(\" 表达式里的 \"),_(\"code\",[v._v(\"bar\")]),v._v(\" 成员变量\")]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"?.\")])]),v._v(\" \"),_(\"p\",[v._v(\"有条件的成员变量访问\")]),v._v(\" \"),_(\"p\",[v._v(\"很像 \"),_(\"code\",[v._v(\".\")]),v._v(\"，但是左边的表达式可以为 null，例如 \"),_(\"code\",[v._v(\"foo?.bar\")]),v._v(\"，如果 foo 为 null，则不会抛异常，而是返回 null，如果 foo 不为 null，则可以返回 bar\")]),v._v(\" \"),_(\"p\",[v._v(\"在说一下 Dart 里很好用但容易搞混的几个操作符：\"),_(\"code\",[v._v(\"?.\")]),v._v(\"、 \"),_(\"code\",[v._v(\"??\")]),v._v(\" 、\"),_(\"code\",[v._v(\"??=\")])]),v._v(\" \"),_(\"ol\",[_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"?.\")])]),v._v(\" \"),_(\"p\",[v._v(\"想要访问表达式的某个属性时，就可以使用这个，可以有效避免 NPE。\")]),v._v(\" \"),_(\"p\",[v._v(\"例如：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"var yourName = user?.name;\\n\\n\")])])]),_(\"p\",[v._v(\"就等效于：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"var yourName;\\nif(user == null){\\n    yourName = null;\\n}else{\\n    yourName = user.name;\\n}\\n\\n\")])])])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"??\")])]),v._v(\" \"),_(\"p\",[v._v(\"在赋值时，可以使用 \"),_(\"code\",[v._v(\"??\")]),v._v(\"，若发现为空，可以为其赋默认值。 例如:\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v('var yourName = name ?? \"Bob\";\\n\\n')])])]),_(\"p\",[v._v(\"就是在为 yourName 赋值时，若 name 有值，就使用 name 的值，若 name 为空，则使用默认值 Bob，等效于：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v('var yourName;\\nif(name == null){\\n    yourName = \"Bob\";\\n}else{\\n    yourName = name;\\n}\\n\\n')])])])]),v._v(\" \"),_(\"li\",[_(\"p\",[_(\"code\",[v._v(\"??=\")])]),v._v(\" \"),_(\"p\",[_(\"code\",[v._v(\"expr1 ??= expr2\")]),v._v(\" 等效于 \"),_(\"code\",[v._v(\"expr1 = expr1 ?? expr2\")]),v._v(\" 就是判断 expr1 是否为null，如果为null的话，就使用默认值 expr2。 例如：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"user ??= User();\\n\\n\")])])]),_(\"p\",[v._v(\"等效于：\")]),v._v(\" \"),_(\"div\",{staticClass:\"language- extra-class\"},[_(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[_(\"code\",[v._v(\"if(user == null) {\\n    user = User();\\n}\\n\\n\")])])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}