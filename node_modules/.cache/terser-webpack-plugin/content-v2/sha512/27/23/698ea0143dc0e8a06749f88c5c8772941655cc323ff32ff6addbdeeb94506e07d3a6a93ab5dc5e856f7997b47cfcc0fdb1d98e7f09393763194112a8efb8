{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{509:function(e,n,s){\"use strict\";s.r(n);var a=s(42),t=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"docker-部署\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker-部署\"}},[e._v(\"#\")]),e._v(\" Docker 部署\")]),e._v(\" \"),s(\"p\",[e._v(\"这一篇我将带大家如何使用 Docker 部署项目到线上。Docker 可理解为跑在宿主机上的非常精简、小巧、高度浓缩的虚拟机。 它可以将容器里的进程安稳的在宿主机上运行。\")]),e._v(\" \"),s(\"h2\",{attrs:{id:\"开始前的准备\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#开始前的准备\"}},[e._v(\"#\")]),e._v(\" 开始前的准备\")]),e._v(\" \"),s(\"blockquote\",[s(\"p\",[e._v(\"docker 与 docker-compose 的安装我就不给大家介绍了。作为一位开发人员，我认为这点事情难不倒大家。\")])]),e._v(\" \"),s(\"h3\",{attrs:{id:\"创建需要的文件\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建需要的文件\"}},[e._v(\"#\")]),e._v(\" 创建需要的文件\")]),e._v(\" \"),s(\"p\",[e._v(\"我们需要在项目根目录创建我们所需要的文件\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"$ touch Dockerfile\\n$ touch docker-compose.yml\\n$ setup.sh\\n\\n\")])])]),s(\"h3\",{attrs:{id:\"目录结构\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#目录结构\"}},[e._v(\"#\")]),e._v(\" 目录结构\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"egg-project\\n├── package.json\\n├── setup.sh (新建)\\n├── Dockerfile (新建)\\n├── docker-compose.yml (新建)\\n├── app\\n...\\n\\n\\n\")])])]),s(\"h3\",{attrs:{id:\"常用指令\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用指令\"}},[e._v(\"#\")]),e._v(\" 常用指令\")]),e._v(\" \"),s(\"p\",[e._v(\"在开始之前我们要学习下常用的一些指令，看下方：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ad8bbb2b70d0?w=973&h=396&f=png&s=328106\",alt:\"\"}})]),e._v(\" \"),s(\"h3\",{attrs:{id:\"部署流程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#部署流程\"}},[e._v(\"#\")]),e._v(\" 部署流程\")]),e._v(\" \"),s(\"p\",[e._v(\"这是一个项目的部署流程，这篇文章带大家做一个简单的部署。后面大家可以参照这张流程图来做一些完善。\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ad98784e2ef8?w=992&h=658&f=png&s=216608\",alt:\"\"}})]),e._v(\" \"),s(\"h2\",{attrs:{id:\"安装-jenkins\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装-jenkins\"}},[e._v(\"#\")]),e._v(\" 安装 Jenkins\")]),e._v(\" \"),s(\"p\",[e._v(\"既然我们项目部署打算使用 Docker，那么在安装 \"),s(\"code\",[e._v(\"Jenkins\")]),e._v(\" 我们也一样选择使用 Docker三剑客之一的 \"),s(\"code\",[e._v(\"docker-compose\")]),e._v(\"。docker-compose 是一个用来把 docker 自动化的东西，有了 docker-compose 你可以把所有繁复的 docker 操作全都一条命令，自动化的完成。\")]),e._v(\" \"),s(\"h3\",{attrs:{id:\"创建目录\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建目录\"}},[e._v(\"#\")]),e._v(\" 创建目录\")]),e._v(\" \"),s(\"p\",[e._v(\"首先我们需要在服务器上创建一个目录机构 ：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"/home/jenkins\\n     - docker-compose.yml\\n     - jenkins-home\\n\\n\")])])]),s(\"h3\",{attrs:{id:\"编写docker-compose-yml\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编写docker-compose-yml\"}},[e._v(\"#\")]),e._v(\" 编写docker-compose.yml\")]),e._v(\" \"),s(\"p\",[e._v(\"接下来我们来编写 \"),s(\"code\",[e._v(\"docker-compose.yml\")]),e._v(\" 安装 \"),s(\"code\",[e._v(\"Jenkins\")]),e._v(\":\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"version: '3'                                    # 指定 docker-compose.yml 文件的写法格式\\nservices:                                       # 多个容器集合\\n  docker_jenkins: \\n    user: root                                  # 为了避免一些权限问题 在这我使用了root\\n    restart: always                             # 重启方式\\n    image: jenkins/jenkins:lts                  # 指定服务所使用的镜像 在这里我选择了 LTS (长期支持)\\n    container_name: jenkins                     # 容器名称\\n    ports:                                      # 对外暴露的端口定义\\n      - '8080:8080'\\n      - '50000:50000'\\n    volumes:                                    # 卷挂载路径\\n      - /home/jenkins/jenkins_home/:/var/jenkins_home   # 这是我们一开始创建的目录挂载到容器内的jenkins_home目录\\n      - /var/run/docker.sock:/var/run/docker.sock\\n      - /usr/bin/docker:/usr/bin/docker                 # 这是为了我们可以在容器内使用docker命令\\n      - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose     # 同样的这是为了使用docker-compose命令\\n\\n\")])])]),s(\"p\",[e._v(\"我们需要进入到 jenkins 目录执行以下指令：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"$ docker-compose up -d\\n\\n\")])])]),s(\"p\",[e._v(\"到这里 \"),s(\"code\",[e._v(\"Jenkins\")]),e._v(\" 就安装成功了，使用 \"),s(\"code\",[e._v(\"docker-compose\")]),e._v(\" 是不是既方便又快捷，接下来我们来配置以下 \"),s(\"code\",[e._v(\"Jenkins\")]),e._v(\"。\")]),e._v(\" \"),s(\"h3\",{attrs:{id:\"配置\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配置\"}},[e._v(\"#\")]),e._v(\" 配置\")]),e._v(\" \"),s(\"p\",[e._v(\"不出意外你现在可以打开你的服务器地址 \"),s(\"a\",{attrs:{href:\"http://xxxxxxx\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"http://xxxxxxx\"),s(\"OutboundLink\")],1),e._v(\": 端口号 就能看到这个界面：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ad9d6f3d9b36?w=990&h=582&f=png&s=113768\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"打开服务器你所创建的 \"),s(\"code\",[e._v(\"jenkins\")]),e._v(\" 目录进入到 \"),s(\"code\",[e._v(\"jenkins-home\")]),s(\"br\"),e._v(\" \"),s(\"code\",[e._v(\"/home/jenkins/jenkins-home\")]),e._v(\"：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ada1b882e188?w=996&h=128&f=png&s=58185\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"进入 \"),s(\"code\",[e._v(\"secrets\")]),e._v(\" 目录：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"$ cat initialAdminPassword\\n\\n\")])])]),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/7/23/16c1d97fed386f9f?w=409&h=36&f=png&s=19986\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"然后把里面的文本复制出来填到管理员密码中。\")]),e._v(\" \"),s(\"p\",[e._v(\"在这里我们直接安装推荐的插件就好了：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708adae63707a40?w=976&h=484&f=png&s=122078\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"创建管理员用户：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708adb3018f0ec5?w=926&h=425&f=png&s=50809\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"进入到首页面后，我们需要安装这两个插件 ：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"NodeJS Plugin\\nPublish Over SSH\\n\\n\")])])]),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708adb751e90116?w=1043&h=541&f=png&s=164037\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"配置 NodeJS 版本：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708adbad3b752dd?w=1021&h=537&f=png&s=172021\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"滑到最下方配置：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708adc07598f426?w=1067&h=713&f=png&s=105257\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"配置 \"),s(\"code\",[e._v(\"SSH\")]),e._v(\"：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708adc463939995?w=1081&h=672&f=png&s=130183\",alt:\"\"}})]),e._v(\" \"),s(\"h2\",{attrs:{id:\"编写-docker-文件\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编写-docker-文件\"}},[e._v(\"#\")]),e._v(\" 编写 Docker 文件\")]),e._v(\" \"),s(\"h3\",{attrs:{id:\"dockerfile\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dockerfile\"}},[e._v(\"#\")]),e._v(\" Dockerfile\")]),e._v(\" \"),s(\"p\",[e._v(\"我们在开始阶段的时候学过一些常用指令，大家应该一眼就可以看得懂这些命令。 加油！！\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v('FROM node:10.0-alpine             # 镜像版本\\n\\n# 设置时区\\nRUN apk --update add tzdata \\\\\\n    && cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\\\\\n    && echo \"Asia/Shanghai\" > /etc/timezone \\\\\\n    && apk del tzdata\\n\\n# 创建app目录\\nRUN mkdir -p /usr/src/node-app/egg-santak\\n\\n# 设置工作目录\\nWORKDIR /usr/src/node-app/egg-santak\\n\\n# 拷贝package.json文件到工作目录\\n# !!重要：package.json需要单独添加。\\n# Docker在构建镜像的时候，是一层一层构建的，仅当这一层有变化时，重新构建对应的层。\\n# 如果package.json和源代码一起添加到镜像，则每次修改源码都需要重新安装npm模块，这样木有必要。\\n# 所以，正确的顺序是: 添加package.json；安装npm模块；添加源代码。\\nCOPY package.json /usr/src/node-app/egg-santak/package.json\\n\\n# 安装npm依赖(使用淘宝的镜像源)\\n# 如果使用的境外服务器，无需使用淘宝的镜像源，即改为`RUN npm i`。\\nRUN npm i --registry=https://registry.npm.taobao.org\\n\\n# 拷贝所有源代码到工作目录\\nCOPY . /usr/src/node-app/egg-santak\\n\\n# 暴露容器端口\\nEXPOSE 7001\\n\\n# 启动node应用\\nCMD npm start\\n\\n')])])]),s(\"h3\",{attrs:{id:\"创建目录-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建目录-2\"}},[e._v(\"#\")]),e._v(\" 创建目录\")]),e._v(\" \"),s(\"p\",[e._v(\"我们这个项目中使用了 \"),s(\"code\",[e._v(\"mysql\")]),e._v(\" 和 \"),s(\"code\",[e._v(\"redis\")]),e._v(\" 我们需要创建数据卷用来保证数据持久化：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708adc8d6aa7967?w=594&h=77&f=png&s=25505\",alt:\"\"}})]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"# nginx\\n$ mkdir -p nginx/conf.d nginx/logs\\n\\n# mysql\\n$ mkdir mysql\\n\\n# redis\\n$ mkdir redis\\n\\n\")])])]),s(\"p\",[e._v(\"然后进入 \"),s(\"code\",[e._v(\"nginx/conf.d\")]),e._v(\" 文件夹中 创建一个后缀为 \"),s(\"code\",[e._v(\"conf\")]),e._v(\" 的文件：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"$ cd nginx/conf.d\\n$ touch default.conf\\n$ vim default.conf\\n\\n\")])])]),s(\"p\",[e._v(\"写入以下内容：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"server {\\n  listen 80;\\n  listen [::]:80;\\n  server_tokens off;\\n\\n  root /var/www/html;\\n  index index.html index.htm;\\n\\n  # 修改为自己的域名\\n  server_name api.lovelp.xin;\\n\\n  # 访问 / 路径时执行反向代理\\n  location / {\\n    # 这里 nodejs 是 node 容器名\\n    proxy_pass http://nodejs:7001;\\n    proxy_set_header X-Real-IP $remote_addr;\\n    proxy_set_header Host $host;\\n    # 后端的Web服务器可以通过 X-Forwarded-For 获取用户真实 IP\\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\\n    # 允许客户端请求的最大单文件字节数\\n    client_max_body_size 15M;\\n    # 缓冲区代理缓冲用户端请求的最大字节数\\n    client_body_buffer_size 128k;\\n  }\\n}\\n\\n\")])])]),s(\"h3\",{attrs:{id:\"docker-compose-yml\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker-compose-yml\"}},[e._v(\"#\")]),e._v(\" docker-compose.yml\")]),e._v(\" \"),s(\"p\",[e._v(\"我们使用 \"),s(\"code\",[e._v(\"docker-compose.yml\")]),e._v(\" 来对多个 Docker 容器编排：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v('version: \\'3\\' # 指的是docker-compose的 version\\n\\nservices:\\n  example_redis:\\n    image: redis:3                  # 指定服务镜像\\n    container_name: santak_redis    # 容器名称\\n    restart: always                 # 重启方式\\n    hostname: redis\\n    command: redis-server /usr/local/etc/redis/redis.conf --requirepass 123456  --appendonly yes\\n    volumes:                        # 挂载数据卷\\n      - /root/redis/redis.conf:/usr/local/etc/redis/redis.conf\\n    ports:                          # 映射端口\\n      - \"6379:6379\"     \\n    networks:                       # 加入指定网络\\n      - app-network\\n\\n  example_nginx:\\n    image: nginx:stable-alpine      # 指定服务镜像\\n    container_name: santak_nginx    # 容器名称\\n    restart: always                 # 重启方式\\n    ports:                          # 映射端口\\n      - \"80:80\"\\n    volumes:                        # 挂载数据卷\\n      - /etc/localtime:/etc/localtime\\n      - /root/nginx/conf.d:/etc/nginx/conf.d\\n      - /root/nginx/logs:/var/log/nginx\\n    depends_on:                     # 启动顺序\\n      - nodejs\\n    networks:                       # 加入指定网络\\n      - app-network\\n\\n  example_mysql:\\n    image: mysql:5.7\\n    container_name: santak_mysql\\n    restart: always\\n    ports:                          # 映射端口\\n      - \"3306:3306\"\\n    environment:\\n      - MYSQL_ROOT_PASSWORD=root\\n      - MYSQL_USER=lovelp           # 创建lovelp用户\\n      - MYSQL_PASSWORD=mm123321     # 设置lovelp用户的密码\\n      - MYSQL_DATABASE=santak       # 创建初始数据库\\n      - TZ=Asia/Shanghai            # 设置时区\\n    volumes:                        # 挂载数据卷\\n      - /root/mysql:/var/lib/mysql  # 为了数据持久化\\n    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci\\n    networks:                       # 加入指定网络\\n      - app-network \\n\\n  nodejs:\\n    build:                          # 这里指的是我们刚刚撸的 Dockerfile 文件\\n      context: .                    \\n      dockerfile: Dockerfile\\n    image: nodejs                   # 镜像名称\\n    container_name: nodejs          # 容器名称\\n    restart: always                 # 重启方式\\n    depends_on:                     # 启动顺序\\n      - santak_redis\\n      - santak_mysql\\n    links:                          # 容器连接\\n      - santak_redis:santak_redis\\n      - santak_mysql:santak_mysql\\n    networks:                       # 加入指定网络\\n      - app-network\\n\\nvolumes:\\n  certbot-etc:\\n  certbot-var:\\n\\nnetworks:  # 实现通信\\n  app-network:\\n    driver: bridge\\n\\n')])])]),s(\"h3\",{attrs:{id:\"脚本\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#脚本\"}},[e._v(\"#\")]),e._v(\" 脚本\")]),e._v(\" \"),s(\"p\",[e._v(\"这是我们部署时所要执行的脚本任务：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"#!/usr/bin/env bash\\n#image_version=`date +%Y%m%d%H%M`;\\n\\n# 关闭容器\\ndocker-compose stop || true;\\n# 删除容器\\ndocker-compose down || true;\\n# 构建镜像\\ndocker-compose build;\\n# 启动并后台运行\\ndocker-compose up -d;\\n# 查看日志\\ndocker logs nodejs;\\n# 对空间进行自动清理\\ndocker system prune -a -f\\n\\n\\n\")])])]),s(\"h2\",{attrs:{id:\"开始部署\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#开始部署\"}},[e._v(\"#\")]),e._v(\" 开始部署\")]),e._v(\" \"),s(\"p\",[e._v(\"我们现在 \"),s(\"code\",[e._v(\"Jenkins\")]),e._v(\" 创建一个项目：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708adcdfadacec5?w=940&h=565&f=png&s=162635\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"指定 \"),s(\"code\",[e._v(\"git\")]),e._v(\" 远程仓库地址：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708add2d35d3a59?w=970&h=563&f=png&s=86701\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"指定 \"),s(\"code\",[e._v(\"Node\")]),e._v(\" 版本和之前所编写的脚本：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708add73660733a?w=991&h=652&f=png&s=101125\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"最后我们就可以愉快的 \"),s(\"code\",[e._v(\"Build Now\")]),e._v(\" 了\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708addb23efaad0?w=1020&h=501&f=png&s=198894\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"在这里我选择的是手动构建。其实 \"),s(\"code\",[e._v(\"Jenkins\")]),e._v(\" 有很多可配置项，比如自动化构建，大家可以按照上方给出的流程图去完善哦。\")]),e._v(\" \"),s(\"h2\",{attrs:{id:\"小结\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[e._v(\"#\")]),e._v(\" 小结\")]),e._v(\" \"),s(\"p\",[e._v(\"本篇内容有些多，但我们作为一名开发人员，部署项目上线是我们的必修课，还请大家不畏艰辛，好好学习。\")])])}),[],!1,null,null,null);n.default=t.exports}}]);","extractedComments":[]}