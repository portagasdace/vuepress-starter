{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[402],{756:function(e,t,a){\"use strict\";a.r(t);var s=a(42),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"vuex-状态管理的工作原理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vuex-状态管理的工作原理\"}},[e._v(\"#\")]),e._v(\" Vuex 状态管理的工作原理\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"为什么要使用-vuex\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要使用-vuex\"}},[e._v(\"#\")]),e._v(\" 为什么要使用 Vuex\")]),e._v(\" \"),a(\"p\",[e._v(\"当我们使用 Vue.js 来开发一个单页应用时，经常会遇到一些组件间共享的数据或状态，或是需要通过 props 深层传递的一些数据。在应用规模较小的时候，我们会使用 props、事件等常用的父子组件的组件间通信方法，或者是通过事件总线来进行任意两个组件的通信。但是当应用逐渐复杂后，问题就开始出现了，这样的通信方式会导致数据流异常地混乱。\")]),e._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/2/9/1617a011064cc43e?w=632&h=361&f=png&s=24741\",alt:\"\"}})]),e._v(\" \"),a(\"p\",[e._v(\"这个时候，我们就需要用到我们的状态管理工具 Vuex 了。Vuex 是一个专门为 Vue.js 框架设计的、专门用来对于 Vue.js 应用进行状态管理的库。它借鉴了 Flux、redux 的基本思想，将状态抽离到全局，形成一个 Store。因为 Vuex 内部采用了 new Vue 来将 Store 内的数据进行「响应式化」，所以 Vuex 是一款利用 Vue 内部机制的库，与 Vue 高度契合，与 Vue 搭配使用显得更加简单高效，但缺点是不能与其他的框架（如 react）配合使用。\")]),e._v(\" \"),a(\"p\",[e._v(\"本节将简单介绍 Vuex 最核心的内部机制，起个抛砖引玉的作用，想了解更多细节可以参考笔者 \"),a(\"a\",{attrs:{href:\"https://github.com/answershuto\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Github\"),a(\"OutboundLink\")],1),e._v(\" 上的另一篇文章 \"),a(\"a\",{attrs:{href:\"https://github.com/answershuto/learnVue/blob/master/docs/Vuex%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.MarkDown\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"《Vuex源码解析》\"),a(\"OutboundLink\")],1),e._v(\"或者直接阅读 \"),a(\"a\",{attrs:{href:\"https://github.com/vuejs/vuex\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Vuex源码\"),a(\"OutboundLink\")],1),e._v(\"。\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"安装\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装\"}},[e._v(\"#\")]),e._v(\" 安装\")]),e._v(\" \"),a(\"p\",[e._v(\"Vue.js 提供了一个 \"),a(\"code\",[e._v(\"Vue.use\")]),e._v(\" 的方法来安装插件，内部会调用插件提供的 \"),a(\"code\",[e._v(\"install\")]),e._v(\" 方法。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Vue.use(Vuex);\\n\\n\")])])]),a(\"p\",[e._v(\"所以我们的插件需要提供一个 \"),a(\"code\",[e._v(\"install\")]),e._v(\" 方法来安装。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"let Vue;\\n\\nexport default install (_Vue) {\\n    Vue.mixin({ beforeCreate: vuexInit });\\n    Vue = _Vue;\\n}\\n\\n\")])])]),a(\"p\",[e._v(\"我们采用 \"),a(\"code\",[e._v(\"Vue.mixin\")]),e._v(\" 方法将 \"),a(\"code\",[e._v(\"vuexInit\")]),e._v(\" 方法混淆进 \"),a(\"code\",[e._v(\"beforeCreate\")]),e._v(\" 钩子中，并用 \"),a(\"code\",[e._v(\"Vue\")]),e._v(\" 保存 Vue 对象。那么 \"),a(\"code\",[e._v(\"vuexInit\")]),e._v(\" 究竟实现了什么呢？\")]),e._v(\" \"),a(\"p\",[e._v(\"我们知道，在使用 Vuex 的时候，我们需要将 \"),a(\"code\",[e._v(\"store\")]),e._v(\" 传入到 Vue 实例中去。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"/*将store放入Vue创建时的option中*/\\nnew Vue({\\n    el: '#app',\\n    store\\n});\\n\\n\")])])]),a(\"p\",[e._v(\"但是我们却在每一个 vm 中都可以访问该 \"),a(\"code\",[e._v(\"store\")]),e._v(\"，这个就需要靠 \"),a(\"code\",[e._v(\"vuexInit\")]),e._v(\" 了。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"function vuexInit () {\\n    const options = this.$options;\\n    if (options.store) {\\n        this.$store = options.store;\\n    } else {\\n        this.$store = options.parent.$store;\\n    }\\n}\\n\\n\")])])]),a(\"p\",[e._v(\"因为之前已经用\"),a(\"code\",[e._v(\"Vue.mixin\")]),e._v(\" 方法将 \"),a(\"code\",[e._v(\"vuexInit\")]),e._v(\" 方法混淆进 \"),a(\"code\",[e._v(\"beforeCreate\")]),e._v(\" 钩子中，所以每一个 vm 实例都会调用 \"),a(\"code\",[e._v(\"vuexInit\")]),e._v(\" 方法。\")]),e._v(\" \"),a(\"p\",[e._v(\"如果是根节点（\"),a(\"code\",[e._v(\"$options\")]),e._v(\"中存在 \"),a(\"code\",[e._v(\"store\")]),e._v(\" 说明是根节点），则直接将 \"),a(\"code\",[e._v(\"options.store\")]),e._v(\" 赋值给 \"),a(\"code\",[e._v(\"this.$store\")]),e._v(\"。否则则说明不是根节点，从父节点的 \"),a(\"code\",[e._v(\"$store\")]),e._v(\" 中获取。\")]),e._v(\" \"),a(\"p\",[e._v(\"通过这步的操作，我们已经可以在任意一个 vm 中通过 \"),a(\"code\",[e._v(\"this.$store\")]),e._v(\" 来访问 \"),a(\"code\",[e._v(\"Store\")]),e._v(\" 的实例啦～\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"store\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#store\"}},[e._v(\"#\")]),e._v(\" Store\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"数据的响应式化\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据的响应式化\"}},[e._v(\"#\")]),e._v(\" 数据的响应式化\")]),e._v(\" \"),a(\"p\",[e._v(\"首先我们需要在 \"),a(\"code\",[e._v(\"Store\")]),e._v(\" 的构造函数中对 \"),a(\"code\",[e._v(\"state\")]),e._v(\" 进行「响应式化」。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"constructor () {\\n    this._vm = new Vue({\\n        data: {\\n            $$state: this.state\\n        }\\n    })\\n}\\n\\n\")])])]),a(\"p\",[e._v(\"熟悉「响应式」的同学肯定知道，这个步骤以后，\"),a(\"code\",[e._v(\"state\")]),e._v(\" 会将需要的依赖收集在 \"),a(\"code\",[e._v(\"Dep\")]),e._v(\" 中，在被修改时更新对应视图。我们来看一个小例子。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"let globalData = {\\n    d: 'hello world'\\n};\\nnew Vue({\\n    data () {\\n        return {\\n            $$state: {\\n                globalData\\n            }\\n        }\\n    }\\n});\\n\\n/* modify */\\nsetTimeout(() => {\\n    globalData.d = 'hi~';\\n}, 1000);\\n\\nVue.prototype.globalData = globalData;\\n\\n\")])])]),a(\"p\",[e._v(\"任意模板中\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"<div>{{globalData.d}}</div>\\n\\n\")])])]),a(\"p\",[e._v(\"上述代码在全局有一个 \"),a(\"code\",[e._v(\"globalData\")]),e._v(\"，它被传入一个 \"),a(\"code\",[e._v(\"Vue\")]),e._v(\" 对象的 \"),a(\"code\",[e._v(\"data\")]),e._v(\" 中，之后在任意 Vue 模板中对该变量进行展示，因为此时 \"),a(\"code\",[e._v(\"globalData\")]),e._v(\" 已经在 Vue 的 \"),a(\"code\",[e._v(\"prototype\")]),e._v(\" 上了所以直接通过 \"),a(\"code\",[e._v(\"this.prototype\")]),e._v(\" 访问，也就是在模板中的 \"),a(\"code\",[e._v(e._s(e.globalData.d))]),e._v(\"。此时，\"),a(\"code\",[e._v(\"setTimeout\")]),e._v(\" 在 1s 之后将 \"),a(\"code\",[e._v(\"globalData.d\")]),e._v(\" 进行修改，我们发现模板中的 \"),a(\"code\",[e._v(\"globalData.d\")]),e._v(\" 发生了变化。其实上述部分就是 Vuex 依赖 Vue 核心实现数据的“响应式化”。\")]),e._v(\" \"),a(\"p\",[e._v(\"讲完了 Vuex 最核心的通过 Vue 进行数据的「响应式化」，接下来我们再来介绍两个 \"),a(\"code\",[e._v(\"Store\")]),e._v(\" 的 API。\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"commit\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#commit\"}},[e._v(\"#\")]),e._v(\" commit\")]),e._v(\" \"),a(\"p\",[e._v(\"首先是 \"),a(\"code\",[e._v(\"commit\")]),e._v(\" 方法，我们知道 \"),a(\"code\",[e._v(\"commit\")]),e._v(\" 方法是用来触发 \"),a(\"code\",[e._v(\"mutation\")]),e._v(\" 的。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"commit (type, payload, _options) {\\n    const entry = this._mutations[type];\\n    entry.forEach(function commitIterator (handler) {\\n        handler(payload);\\n    });\\n}\\n\\n\")])])]),a(\"p\",[e._v(\"从 \"),a(\"code\",[e._v(\"_mutations\")]),e._v(\" 中取出对应的 mutation，循环执行其中的每一个 mutation。\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"dispatch\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dispatch\"}},[e._v(\"#\")]),e._v(\" dispatch\")]),e._v(\" \"),a(\"p\",[a(\"code\",[e._v(\"dispatch\")]),e._v(\" 同样道理，用于触发 action，可以包含异步状态。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"dispatch (type, payload) {\\n    const entry = this._actions[type];\\n\\n    return entry.length > 1\\n    ? Promise.all(entry.map(handler => handler(payload)))\\n    : entry[0](payload);\\n}\\n\\n\")])])]),a(\"p\",[e._v(\"同样的，取出 \"),a(\"code\",[e._v(\"_actions\")]),e._v(\" 中的所有对应 action，将其执行，如果有多个则用 \"),a(\"code\",[e._v(\"Promise.all\")]),e._v(\" 进行包装。\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"最后\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#最后\"}},[e._v(\"#\")]),e._v(\" 最后\")]),e._v(\" \"),a(\"p\",[e._v(\"理解 Vuex 的核心在于理解其如何与 Vue 本身结合，如何利用 Vue 的响应式机制来实现核心 Store 的「响应式化」。\")]),e._v(\" \"),a(\"p\",[e._v(\"Vuex 本身代码不多且设计优雅，非常值得一读，想阅读源码的同学请看\"),a(\"a\",{attrs:{href:\"https://github.com/vuejs/vuex\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Vuex源码\"),a(\"OutboundLink\")],1),e._v(\"。\")]),e._v(\" \"),a(\"p\",[e._v(\"注：本节代码参考\"),a(\"a\",{attrs:{href:\"https://github.com/answershuto/VueDemo/blob/master/%E3%80%8AVuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E3%80%8B.js\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"《Vuex状态管理的工作原理》\"),a(\"OutboundLink\")],1),e._v(\"。\")])])}),[],!1,null,null,null);t.default=o.exports}}]);","extractedComments":[]}