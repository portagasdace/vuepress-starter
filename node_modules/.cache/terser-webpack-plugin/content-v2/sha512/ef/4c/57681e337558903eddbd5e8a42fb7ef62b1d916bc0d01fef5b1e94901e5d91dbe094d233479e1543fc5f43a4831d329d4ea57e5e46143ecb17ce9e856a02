{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{488:function(t,e,r){\"use strict\";r.r(e);var a=r(42),l=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"flutter-底层进阶篇\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-底层进阶篇\"}},[t._v(\"#\")]),t._v(\" Flutter 底层进阶篇\")]),t._v(\" \"),r(\"p\",[t._v(\"经过前面的一系列学习，应该在广度上对 Flutter 有了比较全面的认识，但我们也需要在深度上了解 一下 Flutter.\")]),t._v(\" \"),r(\"p\",[t._v(\"所以接下来主要讲 Flutter 底层的实现，例如架构等，虽然我们更关心如何用 Flutter 写 APP，但是理解 Flutter 的架构，可以让我们在较高层面理解 Flutter 的工作方式和原理，从而知道 Flutter 可以实现哪些功能及无法实现哪些功能。\")]),t._v(\" \"),r(\"p\",[t._v(\"有关 Flutter 架构的内容，建议可以结合前面的章节一起来看，会有更深的理解。\")]),t._v(\" \"),r(\"h2\",{attrs:{id:\"flutter-架构深度解析\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-架构深度解析\"}},[t._v(\"#\")]),t._v(\" Flutter 架构深度解析\")]),t._v(\" \"),r(\"p\",[t._v(\"Flutter 框架是一个多层架构，每层构建在前一层之上，下图展示了 Flutter架构的各个部分：\")]),t._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/2/11/168dc4556a12d7b9?w=960&h=540&f=svg&s=190519\",alt:\"Flutter Architecture Diagram\"}})]),t._v(\" \"),r(\"p\",[t._v(\"总共有三层，从下到上依次为：\")]),t._v(\" \"),r(\"ol\",[r(\"li\",[r(\"p\",[t._v(\"Embedder\")]),t._v(\" \"),r(\"p\",[t._v(\"Embedder 是平台指定的语言实现，主要处理平台相关的操作，是为了 Flutter 能适配各种平台的嵌入层。Embedder 有 Android 的实现，也有 iOS 的实现，也有 Linux、MacOS、Windows 的实现。\")])]),t._v(\" \"),r(\"li\",[r(\"p\",[t._v(\"Engine\")]),t._v(\" \"),r(\"p\",[t._v(\"Engine 层由 C/C++ 实现，Flutter Engine 为 Flutter 应用提供了运行环境，是 Flutter 的核心。\")])]),t._v(\" \"),r(\"li\",[r(\"p\",[t._v(\"Framework\")]),t._v(\" \"),r(\"p\",[t._v(\"Framework 层由 Dart 实现，是 Flutter 开发的框架，开发 Flutter 的 APP ，大部分时间都是和这一层打交道。\")])])]),t._v(\" \"),r(\"h3\",{attrs:{id:\"flutter-架构-engine\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-架构-engine\"}},[t._v(\"#\")]),t._v(\" Flutter 架构 -- Engine\")]),t._v(\" \"),r(\"p\",[t._v(\"Engine 层由 C/C++ 实现，Flutter Engine 为 Flutter 应用提供了运行环境，是 Flutter 的核心。\")]),t._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/2/14/168eaaf6df4e900b?w=2690&h=450&f=png&s=135292\",alt:\"\"}})]),t._v(\" \"),r(\"p\",[t._v(\"上图是 Engine 层的截图，Engine 下面标了 C/C++，表示了 Engine 层由 C/C++ 实现，而且可以看到 Engine 层包含了很多的功能，我把它归纳如下：\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[t._v(\"渲染相关：Composition 、 Rendering 、 Frame Scheduling 、 Frame Pipelining\")]),t._v(\" \"),r(\"li\",[t._v(\"Dart 相关：Service Protocol 、 Dart Isolate Setup 、 Dart VM Managemnt\")]),t._v(\" \"),r(\"li\",[t._v(\"平台通道：Platform Channels\")]),t._v(\" \"),r(\"li\",[t._v(\"系统事件：System Events\")]),t._v(\" \"),r(\"li\",[t._v(\"资源解析：Asset Resolution\")]),t._v(\" \"),r(\"li\",[t._v(\"文字渲染：Text Layout\")])]),t._v(\" \"),r(\"p\",[t._v(\"其中的核心功能，包括动画和图形渲染，文件和网络 I/O，Platform Channels ，插件体系结构，以及 Dart 的运行时环境和编译工具链等。想要深入了解 Flutter Engine 的话，可以在 \"),r(\"a\",{attrs:{href:\"https://github.com/flutter/engine\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Github\"),r(\"OutboundLink\")],1),t._v(\" 上查看源码。\")]),t._v(\" \"),r(\"p\",[t._v(\"接下来介绍一些核心的东西。\")]),t._v(\" \"),r(\"h4\",{attrs:{id:\"渲染引擎-skia\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#渲染引擎-skia\"}},[t._v(\"#\")]),t._v(\" 渲染引擎：Skia\")]),t._v(\" \"),r(\"p\",[t._v(\"Skia 是 Flutter 的图形引擎，是 Flutter 渲染过程中的重要一环。\")]),t._v(\" \"),r(\"p\",[t._v(\"Skia 是 Google 的跨平台 2D 向量图形库，而且已经发展的很成熟：在 2005 年被 Google 收购后，已经成为 Google Chrome，Chrome OS，Android, Mozilla Firefox, Firefox OS 等众多产品的图形引擎，支持的平台包括 Windows7+,macOS 10.5+,iOS8+,Android4.1+,Ubuntu14.04+ 等，并且 Skia 发展的已经很稳定了。\")]),t._v(\" \"),r(\"p\",[t._v(\"Android 是自带 Skia，所以 Android 端 Flutter 不需要打包 Skia，所以在 Android端，Flutter 的包大小会小一些；而 iOS 不带 Skia，所以 iOS 的 Flutter 包会大一些。\")]),t._v(\" \"),r(\"h4\",{attrs:{id:\"dart-运行时环境\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dart-运行时环境\"}},[t._v(\"#\")]),t._v(\" Dart 运行时环境\")]),t._v(\" \"),r(\"p\",[t._v(\"Dart 运行时环境包括 Dart VM 及其他 Dart 运行所需要的库。\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[r(\"p\",[t._v(\"Dart VM\")]),t._v(\" \"),r(\"p\",[t._v(\"Dart VM 除了实现普通 Dart 的核心库之外，还增加了一个 \"),r(\"code\",[t._v(\"dart:ui\")]),t._v(\" 库，这个库是专门为 Flutter 定制的，提供 Skia 和 Shell 功能的低级 API。\")]),t._v(\" \"),r(\"p\",[t._v(\"而且在 Flutter Debug 模式中，Flutter Engine 使用的是 Dart VM ，而 Dart VM 支持 JIT（即时编译），从而使 Flutter 在 Debug 阶段有 Hot Reload 的功能。\")])]),t._v(\" \"),r(\"li\",[r(\"p\",[t._v(\"Dart 相关库\")]),t._v(\" \"),r(\"p\",[t._v(\"在 Release 模式下，Flutter 不会带 Dart VM，因为 Flutter 使用的是 AOT（静态编译），会编译成 Native Arm Code，所以不在需要 Dart VM，但是运行 Native Arm Code 也需要其他 Dart 相关库，例如 Garbage Collection (GC，垃圾回收) 等，这些库不包含在 Dart VM 里。\")])])]),t._v(\" \"),r(\"p\",[t._v(\"讲到这里，我有一个问题： 为什么 Dart 可以运行在不同的平台上？\")]),t._v(\" \"),r(\"blockquote\",[r(\"p\",[t._v(\"是因为 Dart 并不是直接运行在平台上，而是运行在 Flutter Engine 上，Flutter Engine 为 Dart 提供了运行环境。\")])]),t._v(\" \"),r(\"h4\",{attrs:{id:\"platform-channel\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#platform-channel\"}},[t._v(\"#\")]),t._v(\" Platform Channel\")]),t._v(\" \"),r(\"p\",[t._v(\"Platform Channel 是平台通道，用于 Flutter 与 Native 通信：\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[r(\"p\",[t._v(\"应用的 Flutter 部分通过平台通道（platform channel）将消息发送到 Native（iOS 或 Android）。\")])]),t._v(\" \"),r(\"li\",[r(\"p\",[t._v(\"Native 接收消息，然后调用 Native 的 代码处理， 然后将响应发送回 Flutter 。\")])])]),t._v(\" \"),r(\"p\",[t._v(\"Platform Channel 是一个很重要的功能，尤其是 Flutter 与 Native 混合开发的时候，后面会具体讲到怎么使用。\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"flutter-架构-embedder\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-架构-embedder\"}},[t._v(\"#\")]),t._v(\" Flutter 架构 -- Embedder\")]),t._v(\" \"),r(\"p\",[t._v(\"Embedder 是平台指定的语言实现，主要处理平台相关的操作，是为了 Flutter 能适配各种平台的嵌入层。Embedder 有 Android 的实现，也有 iOS 的实现，也有 Linux、MacOS、Windows 的实现。\")]),t._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/2/14/168e96377454197e?w=2691&h=272&f=png&s=84124\",alt:\"\"}})]),t._v(\" \"),r(\"p\",[t._v(\"上图是 Embedder 层的截图，Embedder 下面标了 Platform Specific，表示 Embedder 是基于平台实现的，包含的功能有：\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[t._v(\"Render Surface Setup ：渲染设置\")]),t._v(\" \"),r(\"li\",[t._v(\"Native Plugins ：平台的插件\")]),t._v(\" \"),r(\"li\",[t._v(\"Packaging ：包装 Flutter AOT 的产物 ：Native Arm Code，使 Native Arm Code 在平台上运行。\")]),t._v(\" \"),r(\"li\",[t._v(\"Thread Setup ：Flutter 运行线程设置\")]),t._v(\" \"),r(\"li\",[t._v(\"Event Loop Interop ：Flutter 事件循环\")])]),t._v(\" \"),r(\"p\",[t._v(\"可以看到主要都是底层的机制，而且都是和平台相关的实现，除此之外 Embedder 还有另一个很重要的功能，就是 Embedder 是 Flutter Engine 和 Platform（平台）之间交互的桥梁。\")]),t._v(\" \"),r(\"h4\",{attrs:{id:\"embedder-api-交互的桥梁\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#embedder-api-交互的桥梁\"}},[t._v(\"#\")]),t._v(\" Embedder API ：交互的桥梁\")]),t._v(\" \"),r(\"p\",[t._v(\"Flutter Engine 和 Platform（平台）靠什么交互呢？\")]),t._v(\" \"),r(\"p\",[t._v(\"就是 \"),r(\"strong\",[t._v(\"Embedder API\")]),t._v(\"。\")]),t._v(\" \"),r(\"p\",[t._v(\"在 Flutter Engine 和 Platform 中间有一层 API，就是 \"),r(\"a\",{attrs:{href:\"https://github.com/flutter/engine/tree/master/shell/platform/embedder\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Embedder API\"),r(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),r(\"p\",[t._v(\"Flutter Engine 通过这些 Embedder API 调用平台的能力，而平台通过实现这些 Embedder API，就可以在不同的平台上运行 Flutter Engine。\")]),t._v(\" \"),r(\"h4\",{attrs:{id:\"shell-embedder-api的实现\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#shell-embedder-api的实现\"}},[t._v(\"#\")]),t._v(\" Shell ：Embedder API的实现\")]),t._v(\" \"),r(\"p\",[t._v(\"实现 Embedder API 的叫做 \"),r(\"strong\",[t._v(\"Shell\")]),t._v(\"，Google 为 Flutter 实现了不同平台的 Shell，比如就有 Android Shell 和 iOS Shell ，也有 Linux Shell、MacOS Shell、Windows Shell，这些 Shell 在不同平台上，用平台指定的语言实现，并提供相关 IME（例如：屏幕）和系统应用程序声明周期事件的通信、渲染、插件、线程创建和管理、事件循环等。\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"flutter-架构-framework\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-架构-framework\"}},[t._v(\"#\")]),t._v(\" Flutter 架构 -- Framework\")]),t._v(\" \"),r(\"p\",[t._v(\"Framework 层由 Dart 实现，是 Flutter 开发的框架，开发 Flutter 的 APP ，大部分时间都是和这一层打交道。所以之后的章节大部分讲的都是 Framework 层的内容。\")]),t._v(\" \"),r(\"p\",[r(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/2/14/168eb1ddc1f9a6c0?w=2685&h=601&f=png&s=105101\",alt:\"\"}})]),t._v(\" \"),r(\"p\",[t._v(\"上图是 Framework 层的截图，Framework 下面标了 Dart，表示了 Framework 层由 Dart 语言实现，Frameworl 层也是一个多层架构，从上到下分别是：\")]),t._v(\" \"),r(\"ol\",[r(\"li\",[r(\"p\",[t._v(\"Foundation（基础库层）\")]),t._v(\" \"),r(\"p\",[t._v(\"Foundation 库即是 \"),r(\"code\",[t._v(\"dart:ui\")]),t._v(\" 库，为 Flutter 提供了基本的类和函数，包括处理与 Flutter Engine 层的通信，以及用于 Flutter 框架的最低级别服务，例如驱动输入、图形文本、布局和渲染等。\")]),t._v(\" \"),r(\"p\",[t._v(\"使用这一层的功能也能构建 Flutter APP,但是因为这一层没有封装，你只能手动计算布局坐标，手动捕捉用户输入和混合动画，用 Foundation 去写 APP 将非常复杂，成本也很大。所以需要对 Foundation 层进行封装。\")]),t._v(\" \"),r(\"p\",[t._v(\"如果想要知道 Foundation 层提供的类和函数的可以查看 [这里] (\"),r(\"a\",{attrs:{href:\"https://docs.flutter.io/flutter/foundation/foundation-library.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://docs.flutter.io/flutter/foundation/foundation-library.html\"),r(\"OutboundLink\")],1),t._v(\")。\")])]),t._v(\" \"),r(\"li\",[r(\"p\",[t._v(\"Rendering（渲染层）\")]),t._v(\" \"),r(\"p\",[t._v(\"渲染层包括 Rendering、Animation、Painting、Gestures，是 Foundation 之上的第一个抽象层，是对 Foundation 层的封装。\")]),t._v(\" \"),r(\"p\",[t._v(\"这一层主要是完成 UI 的布局和绘制，为了优化这一复杂的过程，采用了智能的算法去缓存那些昂贵的计算，使得每次的迭代量最小，可以提高渲染和绘制的性能。\")])]),t._v(\" \"),r(\"li\",[r(\"p\",[t._v(\"Widget（组件层）\")]),t._v(\" \"),r(\"p\",[t._v(\"Widget 就是 Flutter UI 的基本元素，提供了可以在 Flutter 中使用的 UI 组件，是我们实际开发中最常用的元素，所有的 Widget 可以分成以下四类：\")]),t._v(\" \"),r(\"ol\",[r(\"li\",[t._v(\"Structural Widget（布局组件），例如 Column 和 Row 等，控制布局的。\")]),t._v(\" \"),r(\"li\",[t._v(\"Visual Widget（绘制组件），例如 Text 和 Image 等,在屏幕上显示内容的。\")]),t._v(\" \"),r(\"li\",[t._v(\"Interaction Widget（交互组件），例如 GestureDetector 等，处理用户手势的。\")]),t._v(\" \"),r(\"li\",[t._v(\"Platform Widget（平台组件），例如 AndroidView 等，将平台的 View 嵌入到 Flutter 中使用的\")])]),t._v(\" \"),r(\"p\",[t._v(\"我们也可以用这些组件实现自己的组件，但是是通过组合的方式，因为在 Flutter 中，组合大于继承。\")])]),t._v(\" \"),r(\"li\",[r(\"p\",[t._v(\"Material 和 Cupertino 风格的组件\")]),t._v(\" \"),r(\"p\",[t._v(\"Flutter 为了减轻开发人员的工作量，实现了两种不同风格的组件：Material 和 Cupertino 。Material 用于 Android，Cupertino 用于 iOS。有了这些组件，开发人员不需要再做额外的工作，就可以让 Flutter 的 UI 风格适应不同的平台，让 Flutter UI 获得和 Native UI 一样的使用体验。\")])])]),t._v(\" \"),r(\"p\",[t._v(\"总之，层级越高，更易于处理，但低层级的可以提供更复杂的细粒度的控制。\")]),t._v(\" \"),r(\"p\",[t._v(\"想阅读 Framework 的源码，可以阅读 \"),r(\"a\",{attrs:{href:\"https://github.com/flutter/flutter/tree/master/packages/flutter/lib\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Github\"),r(\"OutboundLink\")],1),t._v(\" 上的源码。\")])])}),[],!1,null,null,null);e.default=l.exports}}]);","extractedComments":[]}