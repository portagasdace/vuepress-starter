{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{553:function(e,t,a){\"use strict\";a.r(t);var n=a(42),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[a(\"blockquote\",[a(\"p\",[e._v(\"迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。 ——《设计模式：可复用面向对象软件的基础》\")])]),e._v(\" \"),a(\"p\",[e._v(\"迭代器模式是设计模式中少有的\"),a(\"strong\",[e._v(\"目的性极强的模式\")]),e._v(\"。所谓“目的性极强”就是说它不操心别的，它就解决这一个问题——遍历。\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"公元前-的迭代器模式\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#公元前-的迭代器模式\"}},[e._v(\"#\")]),e._v(\" “公元前”的迭代器模式\")]),e._v(\" \"),a(\"p\",[e._v(\"遍历作为一种合理、高频的使用需求，几乎没有语言会要求它的开发者手动去实现。在JS中，本身也内置了一个比较简陋的数组迭代器的实现——Array.prototype.forEach。\")]),e._v(\" \"),a(\"p\",[e._v(\"通过调用forEach方法，我们可以轻松地遍历一个数组：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"const arr = [1, 2, 3]\\narr.forEach((item, index)=>{\\n    console.log(`索引为${index}的元素是${item}`)\\n})\\n\\n\")])])]),a(\"p\",[e._v(\"但forEach方法并不是万能的，比如下面这种场景：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n  <meta charset=\"UTF-8\">\\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\\n  <title>事件代理</title>\\n</head>\\n<body>\\n    <a href=\"#\">链接1号</a>\\n    <a href=\"#\">链接2号</a>\\n    <a href=\"#\">链接3号</a>\\n    <a href=\"#\">链接4号</a>\\n    <a href=\"#\">链接5号</a>\\n    <a href=\"#\">链接6号</a>\\n</body>\\n</html>\\n\\n')])])]),a(\"p\",[e._v(\"我想拿到所有的a标签，我可以这样做：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"const aNodes = document.getElementsByTagName('a')\\nconsole.log('aNodes are', aNodes)\\n\\n\")])])]),a(\"p\",[e._v(\"我想取其中一个a标签，可以这样做：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"const aNode = aNodes[i]\\n\\n\")])])]),a(\"p\",[e._v(\"在这个操作的映衬下，aNodes看上去多么像一个数组啊！但当你尝试用数组的原型方法去遍历它时：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"aNodes.forEach((aNode, index){\\n    console.log(aNode, index)\\n})\\n\\n\")])])]),a(\"p\",[e._v(\"你发现报错了：\")]),e._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/5/169eb9b19686fb07?w=497&h=134&f=png&s=68791\",alt:\"forEach报错\"}})]),e._v(\" \"),a(\"p\",[e._v(\"震惊，原来这个aNodes是个假数组！准确地说，它是一个\"),a(\"strong\",[e._v(\"类数组\")]),e._v(\"对象，并没有为你实现好用的forEach方法。也就是说，要想实现类数组的遍历，你得另请高明。\")]),e._v(\" \"),a(\"p\",[e._v(\"现在问题就出现了：普通数组是不是集合？是！aNodes是不是集合？是！同样是集合，同样有遍历需求，我们却要针对不同的数据结构执行不同的遍历手段，好累！再回头看看迭代器的定义是什么——遍历集合的同时，我们\"),a(\"strong\",[e._v(\"不需要关心集合的内部结构\")]),e._v(\"。而forEach只能做到允许我们不关心数组这一种集合的内部结构，看来想要一套统一的遍历方案，我们非得请出一个\"),a(\"strong\",[e._v(\"更强的通用迭代器\")]),e._v(\"不可了。\")]),e._v(\" \"),a(\"p\",[e._v(\"这个小节的标题定语里有三个字“公元前”，这个“公元前”怎么定义呢？其实它说的就是ES标准内置迭代器之前的那些日子——差不多四五年之前，彼时还没有这么多轮子，jQuery风头正盛。当时面试可不问什么Vue原理、React原理、Webpack这些，当时问的最多的是\"),a(\"strong\",[e._v(\"你读过jQuery源码吗\")]),e._v(\"？答读过，好，那咱们就有的聊了。答没有？fine，看来你只是个调包侠，回见吧——因为前端的技术点在那时还很有限，所以可考察的东西也就这么点，读jQuery源码的程序员和不读jQuery源码的程序员在面试官眼里有着质的区别。但这也从一个侧面反映出来，jQuery这个库其实是非常优秀的，至少jQuery里有太多优秀的设计模式可以拿来考考你。就包括咱们当年想用一个真·迭代器又不想自己搞的时候，也是请jQuery实现的迭代器来帮忙：\")]),e._v(\" \"),a(\"p\",[e._v(\"首先我们要在页面里引入jQuery：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('  <script src=\"https://cdn.bootcss.com/jquery/3.3.0/jquery.min.js\" type=\"text/javascript\"><\\/script>\\n\\n\\n')])])]),a(\"p\",[e._v(\"借助jQuery的each方法，我们可以用同一套遍历规则遍历不同的集合对象：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"const arr = [1, 2, 3]\\n    const aNodes = document.getElementsByTagName('a')\\n\\n    $.each(arr, function (index, item) {\\n      console.log(`数组的第${index}个元素是${item}`)\\n    })\\n\\n    $.each(aNodes, function (index, aNode) {\\n      console.log(`DOM类数组的第${index}个元素是${aNode.innerText}`)\\n    })\\n\\n\")])])]),a(\"p\",[e._v(\"输出结果完全没问题：\")]),e._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/5/169ec0943e93c3cd?w=653&h=346&f=png&s=195823\",alt:\"\"}})]),e._v(\" \"),a(\"p\",[e._v(\"当然啦，遍历jQuery自己的集合对象也不在话下：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"const jQNodes = $('a')\\n$.each(jQNodes, function (index, aNode) {\\n      console.log(`jQuery集合的第${index}个元素是${aNode.innerText}`)\\n    })\\n\\n\")])])]),a(\"p\",[e._v(\"输出结果仍然没问题：\")]),e._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/5/169ec0a8b459b051?w=587&h=229&f=png&s=140484\",alt:\"\"}})]),e._v(\" \"),a(\"p\",[e._v(\"可以看出，jQuery的迭代器为我们统一了不同类型集合的遍历方式，使我们在访问集合内每一个成员时不用去关心集合本身的内部结构以及集合与集合间的差异，这就是迭代器存在的价值~\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"es6对迭代器的实现\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#es6对迭代器的实现\"}},[e._v(\"#\")]),e._v(\" ES6对迭代器的实现\")]),e._v(\" \"),a(\"p\",[e._v(\"在“公元前”，JS原生的集合类型数据结构，只有Array（数组）和Object（对象）；而ES6中，又新增了Map和Set。四种数据结构各自有着自己特别的内部实现，但我们仍期待以同样的一套规则去遍历它们，所以ES6在推出新数据结构的同时也推出了一套\"),a(\"strong\",[e._v(\"统一的接口机制\")]),e._v(\"——迭代器（Iterator）。\")]),e._v(\" \"),a(\"p\",[e._v(\"ES6约定，任何数据结构只要具备Symbol.iterator属性（这个属性就是Iterator的具体实现，它本质上是当前数据结构默认的迭代器生成函数），就可以被遍历——准确地说，是被for...of...循环和迭代器的next方法遍历。 事实上，for...of...的背后正是对next方法的反复调用。\")]),e._v(\" \"),a(\"p\",[e._v(\"在ES6中，针对Array、Map、Set、String、TypedArray、函数的 arguments 对象、NodeList 对象这些原生的数据结构都可以通过for...of...进行遍历。原理都是一样的，此处我们拿最简单的数组进行举例，当我们用for...of...遍历数组时：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"const arr = [1, 2, 3]\\nconst len = arr.length\\nfor(item of arr) {\\n    console.log(`当前元素是${item}`)\\n}\\n\\n\")])])]),a(\"p\",[e._v(\"之所以能够按顺序一次一次地拿到数组里的每一个成员，是因为我们借助数组的Symbol.iterator生成了它对应的迭代器对象，通过反复调用迭代器对象的next方法访问了数组成员，像这样：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"const arr = [1, 2, 3]\\n// 通过调用iterator，拿到迭代器对象\\nconst iterator = arr[Symbol.iterator]()\\n\\n// 对迭代器对象执行next，就能逐个访问集合的成员\\niterator.next()\\niterator.next()\\niterator.next()\\n\\n\")])])]),a(\"p\",[e._v(\"丢进控制台，我们可以看到next每次会按顺序帮我们访问一个集合成员：\")]),e._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/5/169ec24b62991e56?w=573&h=367&f=png&s=147010\",alt:\"\"}})]),e._v(\" \"),a(\"p\",[e._v(\"而for...of...做的事情，基本等价于下面这通操作：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"// 通过调用iterator，拿到迭代器对象\\nconst iterator = arr[Symbol.iterator]()\\n\\n// 初始化一个迭代结果\\nlet now = { done: false }\\n\\n// 循环往外迭代成员\\nwhile(!now.done) {\\n    now = iterator.next()\\n    if(!now.done) {\\n        console.log(`现在遍历到了${now.value}`)\\n    }\\n}\\n\\n\")])])]),a(\"p\",[e._v(\"可以看出，for...of...其实就是iterator循环调用换了种写法。在ES6中我们之所以能够开心地用for...of...遍历各种各种的集合，全靠迭代器模式在背后给力。\")]),e._v(\" \"),a(\"p\",[e._v(\"ps：此处推荐阅读\"),a(\"a\",{attrs:{href:\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"迭代协议\"),a(\"OutboundLink\")],1),e._v(\"，相信大家读过后会对迭代器在ES6中的实现有更深的理解。\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"一起实现一个迭代器生成函数吧\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一起实现一个迭代器生成函数吧\"}},[e._v(\"#\")]),e._v(\" 一起实现一个迭代器生成函数吧!\")]),e._v(\" \"),a(\"p\",[e._v(\"ok，看过了迭代器从古至今的操作，我们一起来实现一个自定义的迭代器。\")]),e._v(\" \"),a(\"p\",[e._v(\"楼上我们说\"),a(\"strong\",[e._v(\"迭代器对象\")]),e._v(\"全凭\"),a(\"strong\",[e._v(\"迭代器生成函数\")]),e._v(\"帮我们生成。在ES6中，实现一个迭代器生成函数并不是什么难事儿，因为ES6早帮我们考虑好了全套的解决方案，内置了贴心的\"),a(\"strong\",[e._v(\"生成器\")]),e._v(\"（Generator）供我们使用：\")]),e._v(\" \"),a(\"blockquote\",[a(\"p\",[e._v(\"注：本小册不要求ES6基础，但生成器语法比较简单，推荐不了解的同学阅读阮老师的生成器教学光速入门\")])]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"// 编写一个迭代器生成函数\\nfunction *iteratorGenerator() {\\n    yield '1号选手'\\n    yield '2号选手'\\n    yield '3号选手'\\n}\\n\\nconst iterator = iteratorGenerator()\\n\\niterator.next()\\niterator.next()\\niterator.next()\\n\\n\")])])]),a(\"p\",[e._v(\"丢进控制台，不负众望：\")]),e._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/5/169ec51fb970bd1a?w=494&h=240&f=png&s=80500\",alt:\"\"}})]),e._v(\" \"),a(\"p\",[e._v(\"写一个生成器函数并没有什么难度，但在面试的过程中，面试官往往对生成器这种语法糖背后的实现逻辑更感兴趣。下面我们要做的，不仅仅是写一个迭代器对象，而是用ES5去写一个能够生成迭代器对象的迭代器生成函数（解析在注释里）：\")]),e._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"// 定义生成器函数，入参是任意集合\\nfunction iteratorGenerator(list) {\\n    // idx记录当前访问的索引\\n    var idx = 0\\n    // len记录传入集合的长度\\n    var len = list.length\\n    return {\\n        // 自定义next方法\\n        next: function() {\\n            // 如果索引还没有超出集合长度，done为false\\n            var done = idx >= len\\n            // 如果done为false，则可以继续取值\\n            var value = !done ? list[idx++] : undefined\\n            \\n            // 将当前值与遍历是否完毕（done）返回\\n            return {\\n                done: done,\\n                value: value\\n            }\\n        }\\n    }\\n}\\n\\nvar iterator = iteratorGenerator(['1号选手', '2号选手', '3号选手'])\\niterator.next()\\niterator.next()\\niterator.next()\\n\\n\")])])]),a(\"p\",[e._v(\"此处为了记录每次遍历的位置，我们实现了一个闭包，借助自由变量来做我们的迭代过程中的“游标”。\"),a(\"br\"),e._v(\"\\n运行一下我们自定义的迭代器，结果符合预期：\")]),e._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/5/169ec6136f7795d2?w=495&h=323&f=png&s=101156\",alt:\"iterator自定义\"}})]),e._v(\" \"),a(\"h2\",{attrs:{id:\"小结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[e._v(\"#\")]),e._v(\" 小结\")]),e._v(\" \"),a(\"p\",[e._v(\"迭代器模式比较特别，它非常重要，重要到语言和框架都争着抢着帮我们实现。但也正因为如此，大家业务开发中需要手动写迭代器的场景几乎没有，所以很少有同学会去刻意留意迭代器模式、思考它背后的实现机制。通过阅读本节，希望大家可以领略迭代器模式的妙处（为什么会有，为什么要用）和迭代器模式的实现思路（方便面试）。至此，我们的设计模式之旅就告一段落了~\")]),e._v(\" \"),a(\"p\",[e._v(\"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）\")])])}),[],!1,null,null,null);t.default=r.exports}}]);","extractedComments":[]}