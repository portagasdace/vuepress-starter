{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{392:function(n,t,s){\"use strict\";s.r(t);var a=s(42),r=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[s(\"p\",[n._v(\"我们现在要开始做题啦！\")]),n._v(\" \"),s(\"p\",[n._v(\"万里长征第一步，仍然是数组。\"),s(\"br\"),n._v(\"\\n单纯针对数组来考察的题目，总体来说，都不算太难——数组题目要想往难了出，基本都要结合排序、二分和动态规划这些相对复杂的算法思想才行。\")]),n._v(\" \"),s(\"p\",[n._v(\"咱们本节要解决的正是这一类“不算太难”的数组题目——并不是只有难题才拥有成为真题的入场券，一道好题不一定会难，它只要能够反映问题就可以了。\"),s(\"br\"),n._v(\"\\n本节所涉及的题目在面试中普遍具有较高的出镜率、同时兼具一定的综合性，对培养大家的通用解题能力大有裨益 。\"),s(\"br\"),n._v(\"\\n相信这节你会学得很开心，在轻松中收获自己的第一份算法解题锦囊。\")]),n._v(\" \"),s(\"h2\",{attrs:{id:\"map-的妙用-两数求和问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#map-的妙用-两数求和问题\"}},[n._v(\"#\")]),n._v(\" Map 的妙用——两数求和问题\")]),n._v(\" \"),s(\"blockquote\",[s(\"p\",[n._v(\"真题描述： 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\"),s(\"br\"),n._v(\"\\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\")])]),n._v(\" \"),s(\"blockquote\",[s(\"p\",[n._v(\"示例: 给定 nums = [2, 7, 11, 15], target = 9\"),s(\"br\"),n._v(\"\\n因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]\")])]),n._v(\" \"),s(\"h3\",{attrs:{id:\"思路分析\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#思路分析\"}},[n._v(\"#\")]),n._v(\" 思路分析：\")]),n._v(\" \"),s(\"h4\",{attrs:{id:\"一个-淳朴-的解法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一个-淳朴-的解法\"}},[n._v(\"#\")]),n._v(\" 一个“淳朴”的解法\")]),n._v(\" \"),s(\"p\",[n._v(\"这道题相信很多同学看一眼就很快能得出一个最基本的思路：两层循环来遍历同一个数组；第一层循环遍历的值记为 a，第二层循环时遍历的值记为 b；若 \"),s(\"code\",[n._v(\"a+b = 目标值\")]),n._v(\"，那么 a 和 b 对应的数组下标就是我们想要的答案。\")]),n._v(\" \"),s(\"h4\",{attrs:{id:\"对-淳朴-解法的反思\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对-淳朴-解法的反思\"}},[n._v(\"#\")]),n._v(\" 对“淳朴”解法的反思\")]),n._v(\" \"),s(\"p\",[n._v(\"大家以后做算法题的时候，要有这样的一种本能：当发现自己的代码里有两层循环时，先反思一下，能不能用空间换时间，把它优化成一层循环。\")]),n._v(\" \"),s(\"p\",[n._v(\"因为两层循环很多情况下都意味着 O(n^2) 的复杂度，这个复杂度非常容易导致你的算法超时。即便没有超时，在明明有一层遍历解法的情况下，你写了两层遍历，面试官对你的印象分会大打折扣。\")]),n._v(\" \"),s(\"h4\",{attrs:{id:\"空间换时间-map-来帮忙\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#空间换时间-map-来帮忙\"}},[n._v(\"#\")]),n._v(\" 空间换时间，Map 来帮忙\")]),n._v(\" \"),s(\"p\",[n._v(\"拿我们这道题来说，其实二层遍历是完全不必要的。\"),s(\"br\"),n._v(\"\\n大家记住一个结论：几乎所有的求和问题，都可以转化为\"),s(\"strong\",[n._v(\"求差问题\")]),n._v(\"。 这道题就是一个典型的例子，通过把求和问题转化为求差问题，事情会变得更加简单。\")]),n._v(\" \"),s(\"p\",[n._v(\"我们可以在遍历数组的过程中，增加一个 Map 来记录已经遍历过的数字及其对应的索引值。然后每遍历到一个新数字的时候，都回到 Map 里去查询 targetNum 与该数的\"),s(\"strong\",[n._v(\"差值\")]),n._v(\"是否已经在前面的数字中出现过了。若出现过，那么答案已然显现，我们就不必再往下走了。\")]),n._v(\" \"),s(\"p\",[n._v(\"我们以 \"),s(\"code\",[n._v(\"nums = [2, 7, 11, 15]\")]),n._v(\" 这个数组为例，来模拟一下这个思路：\"),s(\"br\"),n._v(\"\\n第一次遍历到 2，此时 Map 为空：\")]),n._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/4/16/171815ed07055b8d?w=792&h=472&f=png&s=16503\",alt:\"\"}})]),n._v(\" \"),s(\"p\",[n._v(\"以 2 为 key，索引 0 为 value 作存储，继续往下走；遇到了 7：\")]),n._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/4/16/171815d7f14b9ce0?w=736&h=416&f=png&s=16273\",alt:\"\"}})]),n._v(\" \"),s(\"p\",[n._v(\"计算 targetNum 和 7 的差值为2，去 Map 中检索 2 这个 key，发现是之前出现过的值：\")]),n._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/4/16/171815cf9cc83f3f?w=696&h=460&f=png&s=20589\",alt:\"\"}})]),n._v(\" \"),s(\"p\",[n._v(\"那么 2 和 7 的索引组合就是这道题的答案啦。\"),s(\"br\"),n._v(\"\\n键值对存储我们可以用 ES6 里的 Map 来做，如果图省事，直接用对象字面量来定义也没什么问题。\")]),n._v(\" \"),s(\"h4\",{attrs:{id:\"编码实现\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编码实现\"}},[n._v(\"#\")]),n._v(\" 编码实现\")]),n._v(\" \"),s(\"div\",{staticClass:\"language-js extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[n._v(\"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\")]),n._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[n._v(\"const\")]),n._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function-variable function\"}},[n._v(\"twoSum\")]),n._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[n._v(\"=\")]),n._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[n._v(\"function\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token parameter\"}},[n._v(\"nums\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\",\")]),n._v(\" target\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\")\")]),n._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"{\")]),n._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[n._v(\"// 这里我用对象来模拟 map 的能力\")]),n._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[n._v(\"const\")]),n._v(\" diffs \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[n._v(\"=\")]),n._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"{\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"}\")]),n._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[n._v(\"// 缓存数组长度\")]),n._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[n._v(\"const\")]),n._v(\" len \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[n._v(\"=\")]),n._v(\" nums\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\".\")]),n._v(\"length\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[n._v(\"// 遍历数组\")]),n._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[n._v(\"for\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[n._v(\"let\")]),n._v(\" i\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[n._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[n._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\";\")]),n._v(\"i\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[n._v(\"<\")]),n._v(\"len\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\";\")]),n._v(\"i\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[n._v(\"++\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\")\")]),n._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"{\")]),n._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[n._v(\"// 判断当前值对应的 target 差值是否存在（是否已遍历过）\")]),n._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[n._v(\"if\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"(\")]),n._v(\"diffs\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"[\")]),n._v(\"target\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[n._v(\"-\")]),n._v(\"nums\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"[\")]),n._v(\"i\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[n._v(\"!==\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[n._v(\"undefined\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\")\")]),n._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"{\")]),n._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[n._v(\"// 若有对应差值，那么答案get！\")]),n._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[n._v(\"return\")]),n._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"[\")]),n._v(\"diffs\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"[\")]),n._v(\"target \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[n._v(\"-\")]),n._v(\" nums\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"[\")]),n._v(\"i\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\",\")]),n._v(\" i\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"]\")]),n._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"}\")]),n._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[n._v(\"// 若没有对应差值，则记录当前值\")]),n._v(\"\\n        diffs\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"[\")]),n._v(\"nums\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"[\")]),n._v(\"i\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"]\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[n._v(\"=\")]),n._v(\"i\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"}\")]),n._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[n._v(\";\")]),n._v(\"\\n\\n\")])])]),s(\"p\",[n._v(\"tips：这道题也可以用 ES6 中的 Map 来做，你试试呢？\")]),n._v(\" \"),s(\"h2\",{attrs:{id:\"强大的双指针法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#强大的双指针法\"}},[n._v(\"#\")]),n._v(\" 强大的双指针法\")]),n._v(\" \"),s(\"h3\",{attrs:{id:\"合并两个有序数组\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#合并两个有序数组\"}},[n._v(\"#\")]),n._v(\" 合并两个有序数组\")]),n._v(\" \"),s(\"blockquote\",[s(\"p\",[n._v(\"真题描述：给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。\"),s(\"br\"),n._v(\"\\n说明: 初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。 你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。\")])]),n._v(\" \"),s(\"blockquote\",[s(\"p\",[n._v(\"示例: 输入:\"),s(\"br\"),n._v(\"\\nnums1 = [1,2,3,0,0,0], m = 3\"),s(\"br\"),n._v(\"\\nnums2 = [2,5,6], n = 3\"),s(\"br\"),n._v(\"\\n输出: [1,2,2,3,5,6]\")])]),n._v(\" \"),s(\"h3\",{attrs:{id:\"思路分析-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#思路分析-2\"}},[n._v(\"#\")]),n._v(\" 思路分析\")]),n._v(\" \"),s(\"h4\",{attrs:{id:\"标准解法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#标准解法\"}},[n._v(\"#\")]),n._v(\" 标准解法\")]),n._v(\" \"),s(\"p\",[n._v(\"这道题没有太多的弯弯绕绕，标准解法就是双指针法。首先我们定义两个指针，各指向两个数组生效部分的尾部：\")]),n._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/3/15/170ddde2f653cce0?w=954&h=634&f=png&s=22043\",alt:\"\"}})]),n._v(\" \"),s(\"p\",[s(\"strong\",[n._v(\"每次只对指针所指的元素进行比较\")]),n._v(\"。取其中较大的元素，把它从 nums1 的末尾往前面填补：\")]),n._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/3/15/170de023737bd4d0?w=1020&h=660&f=png&s=26875\",alt:\"\"}})]),n._v(\" \"),s(\"p\",[n._v(\"这里有一点需要解释一下：\"),s(\"br\"),n._v(\"\\n为什么是从后往前填补？因为是要把所有的值合并到 nums1 里，所以说我们这里可以把 nums1 看做是一个“容器”。但是这个容器，它不是空的，而是前面几个坑有内容的。如果我们从前往后填补，就没法直接往对应的坑位赋值了（会产生值覆盖）。\"),s(\"br\"),n._v(\"\\n从后往前填补，我们填的都是没有内容的坑，这样会省掉很多麻烦。\")]),n._v(\" \"),s(\"p\",[n._v(\"由于 nums1 的有效部分和 nums2 并不一定是一样长的。我们还需要考虑其中一个提前到头的这种情况：\")]),n._v(\" \"),s(\"ol\",[s(\"li\",[n._v(\"如果提前遍历完的是 nums1 的有效部分，剩下的是 nums2。那么这时意味着 nums1 的头部空出来了，直接把 nums2 整个补到 nums1 前面去即可。\")]),n._v(\" \"),s(\"li\",[n._v(\"如果提前遍历完的是 nums2，剩下的是 nums1。由于容器本身就是 nums1，所以此时不必做任何额外的操作。\")])]),n._v(\" \"),s(\"h4\",{attrs:{id:\"编码实现-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编码实现-2\"}},[n._v(\"#\")]),n._v(\" 编码实现：\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"/**\\n * @param {number[]} nums1\\n * @param {number} m\\n * @param {number[]} nums2\\n * @param {number} n\\n * @return {void} Do not return anything, modify nums1 in-place instead.\\n */\\nconst merge = function(nums1, m, nums2, n) {\\n    // 初始化两个指针的指向，初始化 nums1 尾部索引k\\n    let i = m - 1, j = n - 1, k = m + n - 1\\n    // 当两个数组都没遍历完时，指针同步移动\\n    while(i >= 0 && j >= 0) {\\n        // 取较大的值，从末尾往前填补\\n        if(nums1[i] >= nums2[j]) {\\n            nums1[k] = nums1[i] \\n            i-- \\n            k--\\n        } else {\\n            nums1[k] = nums2[j] \\n            j-- \\n            k--\\n        }\\n    }\\n    \\n    // nums2 留下的情况，特殊处理一下 \\n    while(j>=0) {\\n        nums1[k] = nums2[j]  \\n        k-- \\n        j--\\n    }\\n};\\n\\n\")])])]),s(\"p\",[n._v(\"找点乐子：\"),s(\"br\"),n._v(\"\\n上面我们给出的，是面试官最喜欢看到的一种解法，这种解法适用于各种语言。\"),s(\"br\"),n._v(\"\\n但是就 JS 而言，我们还可以“另辟蹊径”，仔细想想，你有什么妙招？\")]),n._v(\" \"),s(\"h3\",{attrs:{id:\"三数求和问题\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三数求和问题\"}},[n._v(\"#\")]),n._v(\" 三数求和问题\")]),n._v(\" \"),s(\"p\",[n._v(\"双指针法能处理的问题多到你想不到。不信来瞅瞅两数求和它儿子——三数求和问题！\"),s(\"br\"),n._v(\"\\n俗话说，青出于蓝而胜于蓝，三数求和虽然和两数求和只差了一个字，但是思路却完全不同。\")]),n._v(\" \"),s(\"blockquote\",[s(\"p\",[n._v(\"真题描述：给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。\"),s(\"br\"),n._v(\"\\n注意：答案中不可以包含重复的三元组。\")])]),n._v(\" \"),s(\"blockquote\",[s(\"p\",[n._v(\"示例： 给定数组 nums = [-1, 0, 1, 2, -1, -4]， 满足要求的三元组集合为： [ [-1, 0, 1], [-1, -1, 2] ]\")])]),n._v(\" \"),s(\"h4\",{attrs:{id:\"思路分析-3\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#思路分析-3\"}},[n._v(\"#\")]),n._v(\" 思路分析\")]),n._v(\" \"),s(\"p\",[n._v(\"三数之和延续两数之和的思路，我们可以\"),s(\"strong\",[n._v(\"把求和问题变成求差问题\")]),n._v(\"——固定其中一个数，在剩下的数中寻找是否有两个数和这个固定数相加是等于0的。\")]),n._v(\" \"),s(\"p\",[n._v(\"虽然乍一看似乎还是需要三层循环才能解决的样子，不过现在我们有了双指针法，定位效率将会被大大提升，从此告别过度循环~\")]),n._v(\" \"),s(\"p\",[n._v(\"（这里大家相信已经能察觉出来双指针法的使用场景了，一方面，它可以做到空间换时间；另一方面，它也可以帮我们降低问题的复杂度。）\")]),n._v(\" \"),s(\"p\",[n._v(\"双指针法用在涉及求和、比大小类的数组题目里时，大前提往往是：该数组必须有序。否则双指针根本无法帮助我们缩小定位的范围，压根没有意义。因此这道题的第一步是将数组排序：\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\" nums = nums.sort((a,b)=>{\\n    return a-b\\n})\\n\\n\")])])]),s(\"p\",[n._v(\"然后，对数组进行遍历，每次遍历到哪个数字，就固定哪个数字。然后把左指针指向该数字后面一个坑里的数字，把右指针指向数组末尾，让左右指针从起点开始，向中间前进：\")]),n._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/3/15/170de65ecf8b277f?w=1046&h=406&f=png&s=25797\",alt:\"\"}})]),n._v(\" \"),s(\"p\",[n._v(\"每次指针移动一次位置，就计算一下两个指针指向数字之和加上固定的那个数之后，是否等于0。如果是，那么我们就得到了一个目标组合；否则，分两种情况来看：\")]),n._v(\" \"),s(\"ul\",[s(\"li\",[n._v(\"相加之和大于0，说明右侧的数偏大了，右指针左移\")]),n._v(\" \"),s(\"li\",[n._v(\"相加之和小于0，说明左侧的数偏小了，左指针右移\")])]),n._v(\" \"),s(\"p\",[n._v(\"tips：这个数组在题目中要求了“不重复的三元组”，因此我们还需要做一个重复元素的跳过处理。这一点在编码实现环节大家会注意到。\")]),n._v(\" \"),s(\"h4\",{attrs:{id:\"编码实现-3\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编码实现-3\"}},[n._v(\"#\")]),n._v(\" 编码实现\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"/**\\n * @param {number[]} nums\\n * @return {number[][]}\\n */\\nconst threeSum = function(nums) {\\n    // 用于存放结果数组\\n    let res = [] \\n    // 目标值为0\\n    let sum = 0\\n    // 给 nums 排序\\n    nums = nums.sort((a,b)=>{\\n        return a-b\\n    })\\n    // 缓存数组长度\\n    const len = nums.length\\n    // 注意我们遍历到倒数第三个数就足够了，因为左右指针会遍历后面两个数\\n    for(let i=0;i<len-2;i++) {\\n        // 左指针 j\\n        let j=i+1 \\n        // 右指针k\\n        let k=len-1   \\n        // 如果遇到重复的数字，则跳过\\n        if(i>0&&nums[i]===nums[i-1]) {\\n            continue\\n        }\\n        while(j<k) {\\n            // 三数之和小于0，左指针前进\\n            if(nums[i]+nums[j]+nums[k]<0){\\n                j++\\n               // 处理左指针元素重复的情况\\n               while(j<k&&nums[j]===nums[j-1]) {\\n                    j++\\n                }\\n            } else if(nums[i]+nums[j]+nums[k]>0){\\n                // 三数之和大于0，右指针后退\\n                k--\\n               \\n               // 处理右指针元素重复的情况\\n               while(j<k&&nums[k]===nums[k+1]) {\\n                    k--\\n                }\\n            } else {\\n                // 得到目标数字组合，推入结果数组\\n                res.push([nums[i],nums[j],nums[k]])\\n                \\n                // 左右指针一起前进\\n                j++  \\n                k--\\n               \\n                // 若左指针元素重复，跳过\\n                while(j<k&&nums[j]===nums[j-1]) {\\n                    j++\\n                }  \\n               \\n               // 若右指针元素重复，跳过\\n               while(j<k&&nums[k]===nums[k+1]) {\\n                    k--\\n                }\\n            }\\n        }\\n    }\\n    \\n    // 返回结果数组\\n    return res\\n};\\n\\n\")])])]),s(\"h3\",{attrs:{id:\"双指针法中的-对撞指针-法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#双指针法中的-对撞指针-法\"}},[n._v(\"#\")]),n._v(\" 双指针法中的“对撞指针”法\")]),n._v(\" \"),s(\"p\",[n._v(\"在上面这道题中，左右指针一起从两边往中间位置相互迫近，这样的特殊双指针形态，被称为“对撞指针”。\")]),n._v(\" \"),s(\"p\",[n._v(\"什么时候你需要联想到对撞指针？\"),s(\"br\"),n._v(\"\\n这里我给大家两个关键字——“有序”和“数组”。\"),s(\"br\"),n._v(\"\\n没错，见到这两个关键字，立刻把双指针法调度进你的大脑内存。普通双指针走不通，立刻想对撞指针！\")]),n._v(\" \"),s(\"p\",[n._v(\"即便数组题目中并没有直接给出“有序”这个关键条件，我们在发觉普通思路走不下去的时候，也应该及时地尝试手动对其进行排序试试看有没有新的切入点——没有条件，创造条件也要上。\")]),n._v(\" \"),s(\"p\",[n._v(\"对撞指针可以帮助我们缩小问题的范围，这一点在“三数求和”问题中体现得淋漓尽致：因为数组有序，所以我们可以用两个指针“画地为牢”圈出一个范围，这个范围以外的值不是太大就是太小、直接被排除在我们的判断逻辑之外，这样我们就可以把时间花在真正有意义的计算和对比上。如此一来，不仅节省了计算的时间，更降低了问题本身的复杂度，我们做题的速度也会大大加快。\")]),n._v(\" \"),s(\"p\",[n._v(\"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）\")])])}),[],!1,null,null,null);t.default=r.exports}}]);","extractedComments":[]}