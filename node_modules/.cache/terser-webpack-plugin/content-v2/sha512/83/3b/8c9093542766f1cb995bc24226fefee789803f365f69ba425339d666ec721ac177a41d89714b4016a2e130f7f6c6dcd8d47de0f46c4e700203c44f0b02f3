{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{457:function(t,e,i){\"use strict\";i.r(e);var v=i(42),n=Object(v.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[i(\"h1\",{attrs:{id:\"flutter-布局-widget-层叠布局\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-布局-widget-层叠布局\"}},[t._v(\"#\")]),t._v(\" Flutter 布局 Widget —— 层叠布局\")]),t._v(\" \"),i(\"p\",[t._v(\"Flutter 的层叠布局是 \"),i(\"a\",{attrs:{href:\"https://docs.flutter.io/flutter/widgets/Stack-class.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Stack\"),i(\"OutboundLink\")],1),t._v(\"，层叠布局允许 子Widget 堆叠（按照代码中声明的顺序）,同时 子Widget 可以根据到父容器四个边的位置来确定本身的位置。\")]),t._v(\" \"),i(\"h1\",{attrs:{id:\"stack\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stack\"}},[t._v(\"#\")]),t._v(\" Stack\")]),t._v(\" \"),i(\"p\",[t._v(\"Stack 是层叠布局，其 子Widget 会按照添加顺序确定显示层级，后面添加的会覆盖在前面添加的 Widget 上面。\")]),t._v(\" \"),i(\"h2\",{attrs:{id:\"代码所在位置\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置\"}},[t._v(\"#\")]),t._v(\" 代码所在位置\")]),t._v(\" \"),i(\"p\",[t._v(\"flutter_widget_demo/lib/stack/StackWidget.dart\")]),t._v(\" \"),i(\"h2\",{attrs:{id:\"stack-的快速上手\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stack-的快速上手\"}},[t._v(\"#\")]),t._v(\" Stack 的快速上手\")]),t._v(\" \"),i(\"p\",[t._v(\"给 Stack 的 子Widget 添加内容：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"Stack(\\n  children: <Widget>[\\n    Image.asset(\\n      \\\"images/flutter.png\\\",\\n       width: 200,\\n       fit: BoxFit.cover,\\n    ),\\n    Text('Hello Flutter',style: TextStyle(fontSize: 50.0),),\\n  ],\\n)\\n\\n\")])])]),i(\"p\",[t._v(\"Stack 在一个页面使用的完整 Demo 为：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v('import \\'package:flutter/material.dart\\';\\n\\nvoid main() => runApp(StackWidget());\\n\\nclass StackWidget extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: \"Flutter Demo\",\\n      theme: ThemeData(\\n        primaryColor: Colors.blue,\\n      ),\\n      home: Scaffold(\\n        appBar: AppBar(title: Text(\"Flutter布局Widget -- 层叠布局\")),\\n        body: Stack(\\n          children: <Widget>[\\n            Image.asset(\\n              \"images/flutter.png\",\\n              width: 200,\\n              fit: BoxFit.cover,\\n            ),\\n            Text(\\'Hello Flutter\\',style: TextStyle(fontSize: 50.0),),\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\n')])])]),i(\"p\",[t._v(\"运行效果为：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/5/15/16ab7df85a034d9c?w=874&h=446&f=jpeg&s=69996\",alt:\"\"}})]),t._v(\" \"),i(\"h2\",{attrs:{id:\"stack-的构造函数及参数说明\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stack-的构造函数及参数说明\"}},[t._v(\"#\")]),t._v(\" Stack 的构造函数及参数说明\")]),t._v(\" \"),i(\"p\",[t._v(\"Stack 的构造函数为：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"class Stack extends MultiChildRenderObjectWidget {\\n  Stack({\\n    Key key,\\n    this.alignment = AlignmentDirectional.topStart,\\n    this.textDirection,\\n    this.fit = StackFit.loose,\\n    this.overflow = Overflow.clip,\\n    List<Widget> children = const <Widget>[],\\n  }) : super(key: key, children: children);\\n  ...\\n}\\n\\n\")])])]),i(\"p\",[t._v(\"参数名字\")]),t._v(\" \"),i(\"p\",[t._v(\"参数类型\")]),t._v(\" \"),i(\"p\",[t._v(\"意义\")]),t._v(\" \"),i(\"p\",[t._v(\"必选 or 可选\")]),t._v(\" \"),i(\"p\",[t._v(\"key\")]),t._v(\" \"),i(\"p\",[t._v(\"Key\")]),t._v(\" \"),i(\"p\",[t._v(\"Widget 的标识\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"alignment\")]),t._v(\" \"),i(\"p\",[t._v(\"AlignmentDirectional\")]),t._v(\" \"),i(\"p\",[t._v(\"决定如何对齐 non-positioned子Widget 和 部分positioned子Widget，默认值为 AlignmentDirectional.topStart\"),i(\"br\"),t._v(\"\\n部分positioned子Widget，在某一个轴上没有定义的，这个轴就使用 alignment 的值，比如 left、right 为横轴，left 和 right 都没有定义，就是横轴没有定义，只要这两个一个有值，这个轴就算有值；top、bottom 为纵轴，同理。\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"textDirection\")]),t._v(\" \"),i(\"p\",[t._v(\"TextDirection\")]),t._v(\" \"),i(\"p\",[t._v(\"用于确定 alignment 的对齐方向\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"fit\")]),t._v(\" \"),i(\"p\",[t._v(\"StackFit\")]),t._v(\" \"),i(\"p\",[t._v(\"此参数用于决定 non-positioned子Widget 如何去适应Stack的大小\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"overflow\")]),t._v(\" \"),i(\"p\",[t._v(\"Overflow\")]),t._v(\" \"),i(\"p\",[t._v(\"决定如何显示超出 Stack显示空间的 子widget\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"children\")]),t._v(\" \"),i(\"p\",[t._v(\"List< Widget>\")]),t._v(\" \"),i(\"p\",[t._v(\"Stack布局 里排列的内容\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"ul\",[i(\"li\",[i(\"p\",[t._v(\"alignment：对齐方式\")]),t._v(\" \"),i(\"p\",[t._v(\"alignment 的类型是 AlignmentDirectional：\")]),t._v(\" \"),i(\"blockquote\",[i(\"p\",[t._v(\"注意这里 start 和 end 指的是 textDirection 给定的方向\")])]),t._v(\" \"),i(\"p\",[t._v(\"AlignmentDirectional 的值\")]),t._v(\" \"),i(\"p\",[t._v(\"含义\")]),t._v(\" \"),i(\"p\",[t._v(\"AlignmentDirectional.topStart\")]),t._v(\" \"),i(\"p\",[t._v(\"上边 start 对齐\")]),t._v(\" \"),i(\"p\",[t._v(\"AlignmentDirectional.topCenter\")]),t._v(\" \"),i(\"p\",[t._v(\"上边 居中 对齐\")]),t._v(\" \"),i(\"p\",[t._v(\"AlignmentDirectional.topEnd\")]),t._v(\" \"),i(\"p\",[t._v(\"上边 end 对齐\")]),t._v(\" \"),i(\"p\",[t._v(\"AlignmentDirectional.centerStart\")]),t._v(\" \"),i(\"p\",[t._v(\"中间 start 对齐\")]),t._v(\" \"),i(\"p\",[t._v(\"AlignmentDirectional.center\")]),t._v(\" \"),i(\"p\",[t._v(\"中间 对齐\")]),t._v(\" \"),i(\"p\",[t._v(\"AlignmentDirectional.centerEnd\")]),t._v(\" \"),i(\"p\",[t._v(\"中间 end 对齐\")]),t._v(\" \"),i(\"p\",[t._v(\"AlignmentDirectional.bottomStart\")]),t._v(\" \"),i(\"p\",[t._v(\"下边 start 对齐\")]),t._v(\" \"),i(\"p\",[t._v(\"AlignmentDirectional.bottomCenter\")]),t._v(\" \"),i(\"p\",[t._v(\"下边 居中 对齐\")]),t._v(\" \"),i(\"p\",[t._v(\"AlignmentDirectional.bottomEnd\")]),t._v(\" \"),i(\"p\",[t._v(\"下边 end 对齐\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a00297b8b0b17f?w=428&h=768&f=png&s=56750\",alt:\"\"}})])]),t._v(\" \"),i(\"li\",[i(\"p\",[t._v(\"fit：non-positioned子Widget 如何去适应Stack的大小\")]),t._v(\" \"),i(\"p\",[t._v(\"fit 的类型是 StackFit：\")]),t._v(\" \"),i(\"p\",[t._v(\"StackFit 的值\")]),t._v(\" \"),i(\"p\",[t._v(\"含义\")]),t._v(\" \"),i(\"p\",[t._v(\"StackFit.loose\")]),t._v(\" \"),i(\"p\",[t._v(\"使用 子Widget 自身的大小\")]),t._v(\" \"),i(\"p\",[t._v(\"StackFit.expand\")]),t._v(\" \"),i(\"p\",[t._v(\"子Widget 扩伸到Stack的大小\")]),t._v(\" \"),i(\"p\",[t._v(\"StackFit.passthrough\")]),t._v(\" \"),i(\"p\",[t._v(\"Stack的父Widget 的约束无修改的传递给 Stack的子Widget\")])]),t._v(\" \"),i(\"li\",[i(\"p\",[t._v(\"overflow：如何显示超出 Stack显示空间的 子widget\")]),t._v(\" \"),i(\"p\",[t._v(\"overflow 的类型为 Overflow：\")]),t._v(\" \"),i(\"p\",[t._v(\"Overflow 的值\")]),t._v(\" \"),i(\"p\",[t._v(\"含义\")]),t._v(\" \"),i(\"p\",[t._v(\"Overflow.visible\")]),t._v(\" \"),i(\"p\",[t._v(\"超出部分仍能看见\")]),t._v(\" \"),i(\"p\",[t._v(\"Overflow.clip\")]),t._v(\" \"),i(\"p\",[t._v(\"超出部分会被剪裁\")])])]),t._v(\" \"),i(\"h2\",{attrs:{id:\"stack-的-子widget\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#stack-的-子widget\"}},[t._v(\"#\")]),t._v(\" Stack 的 子Widget\")]),t._v(\" \"),i(\"p\",[t._v(\"为了确定 子Widget 到父容器四个角的位置,Stack 将 子Widget 分为两类：\")]),t._v(\" \"),i(\"ol\",[i(\"li\",[i(\"p\",[t._v(\"positioned 子Widget\")]),t._v(\" \"),i(\"p\",[t._v(\"positioned 子Widget 是指被 \"),i(\"code\",[t._v(\"Positioned\")]),t._v(\" 嵌套起来的 Widget，\"),i(\"code\",[t._v(\"Positioned\")]),t._v(\" 可以控制 子Widget 到父容器四个边的距离。\")])]),t._v(\" \"),i(\"li\",[i(\"p\",[t._v(\"non-positioned 子Widget\")]),t._v(\" \"),i(\"p\",[t._v(\"non-positioned子Widget 就是不用 \"),i(\"code\",[t._v(\"Positioned\")]),t._v(\" 嵌套起来的 Widget,non-positioned子Widget 使用 Stack 设置的 alignment 来确定自己在父容器里的位置。\")])])]),t._v(\" \"),i(\"h3\",{attrs:{id:\"_1-positioned\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-positioned\"}},[t._v(\"#\")]),t._v(\" 1. Positioned\")]),t._v(\" \"),i(\"h4\",{attrs:{id:\"positioned-的快速上手\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#positioned-的快速上手\"}},[t._v(\"#\")]),t._v(\" Positioned 的快速上手\")]),t._v(\" \"),i(\"p\",[t._v(\"Positioned 在 Stack 里使用的代码 Demo 如下：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v('import \\'package:flutter/material.dart\\';\\n\\nvoid main() => runApp(StackWidget());\\n\\nclass StackWidget extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: \"Flutter Demo\",\\n      theme: ThemeData(\\n        primaryColor: Colors.blue,\\n      ),\\n      home: Scaffold(\\n        appBar: AppBar(title: Text(\"Flutter布局Widget -- 层叠布局\")),\\n        body: Stack(\\n          fit: StackFit.expand,\\n          children: <Widget>[\\n            Positioned(\\n              left: 50,\\n              top: 100,\\n              child: Image.asset(\\n                \"images/flutter.png\",\\n                width: 200,\\n                fit: BoxFit.cover,\\n              ),\\n            ),\\n            Text(\\'Hello Flutter\\'),\\n          ],\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\n')])])]),i(\"p\",[t._v(\"运行效果为：\")]),t._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/17/16a2a1ab07cb564b?w=858&h=644&f=jpeg&s=64679\",alt:\"\"}})]),t._v(\" \"),i(\"h4\",{attrs:{id:\"positioned-的构造函数及参数说明\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#positioned-的构造函数及参数说明\"}},[t._v(\"#\")]),t._v(\" Positioned 的构造函数及参数说明\")]),t._v(\" \"),i(\"p\",[t._v(\"Positioned 的构造函数为：\")]),t._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[t._v(\"class Positioned extends ParentDataWidget<Stack> {\\n  const Positioned({\\n    Key key,\\n    this.left,\\n    this.top,\\n    this.right,\\n    this.bottom,\\n    this.width,\\n    this.height,\\n    @required Widget child,\\n  }) : assert(left == null || right == null || width == null),\\n       assert(top == null || bottom == null || height == null),\\n       super(key: key, child: child);\\n    ...\\n}\\n\\n\")])])]),i(\"p\",[t._v(\"参数名字\")]),t._v(\" \"),i(\"p\",[t._v(\"参数类型\")]),t._v(\" \"),i(\"p\",[t._v(\"意义\")]),t._v(\" \"),i(\"p\",[t._v(\"必选 or 可选\")]),t._v(\" \"),i(\"p\",[t._v(\"key\")]),t._v(\" \"),i(\"p\",[t._v(\"Key\")]),t._v(\" \"),i(\"p\",[t._v(\"Widget 的标识\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"left\")]),t._v(\" \"),i(\"p\",[t._v(\"double\")]),t._v(\" \"),i(\"p\",[t._v(\"离 Stack 左边的距离\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"top\")]),t._v(\" \"),i(\"p\",[t._v(\"double\")]),t._v(\" \"),i(\"p\",[t._v(\"离 Stack 上边的距离\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"right\")]),t._v(\" \"),i(\"p\",[t._v(\"double\")]),t._v(\" \"),i(\"p\",[t._v(\"离 Stack 右边的距离\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"bottom\")]),t._v(\" \"),i(\"p\",[t._v(\"double\")]),t._v(\" \"),i(\"p\",[t._v(\"离 Stack 底边的距离\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"width\")]),t._v(\" \"),i(\"p\",[t._v(\"double\")]),t._v(\" \"),i(\"p\",[t._v(\"指定 Widget 的宽度\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"height\")]),t._v(\" \"),i(\"p\",[t._v(\"double\")]),t._v(\" \"),i(\"p\",[t._v(\"指定 Widget 的高度\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"children\")]),t._v(\" \"),i(\"p\",[t._v(\"List\")]),t._v(\" \"),i(\"p\",[t._v(\"Stack布局 里排列的内容\")]),t._v(\" \"),i(\"p\",[t._v(\"可选\")]),t._v(\" \"),i(\"p\",[t._v(\"注意，此处的 width、height 是用于配合 left、top 、right、 bottom 来定位 Widget 的。举个例子，在水平方向上，你只能指定 left、right、width 三个属性中的两个，如指定 left 和 width 后，right 会自动算出 (left+width)，如果同时指定三个属性则会报错，垂直方向同理。\")])])}),[],!1,null,null,null);e.default=n.exports}}]);","extractedComments":[]}