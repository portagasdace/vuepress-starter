{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{563:function(t,e,a){\"use strict\";a.r(e);var n=a(42),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"前置知识-es7-中的装饰器\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#前置知识-es7-中的装饰器\"}},[t._v(\"#\")]),t._v(\" 前置知识：ES7 中的装饰器\")]),t._v(\" \"),a(\"p\",[t._v(\"小册在知识储备上不要求所有同学掌握 ES6+ 语法，所以先带大家一起过一遍装饰器的基本操作~\")]),t._v(\" \"),a(\"p\",[t._v(\"在 ES7 中，我们可以像写 python 一样通过一个@语法糖轻松地给一个类装上装饰器：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"// 装饰器函数，它的第一个参数是目标类\\nfunction classDecorator(target) {\\n    target.hasDecorator = true\\n  \\treturn target\\n}\\n\\n// 将装饰器“安装”到Button类上\\n@classDecorator\\nclass Button {\\n    // Button类的相关逻辑\\n}\\n\\n// 验证装饰器是否生效\\nconsole.log('Button 是否被装饰了：', Button.hasDecorator)\\n\\n\")])])]),a(\"p\",[t._v(\"也可以用同样的语法糖去装饰类里面的方法：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"// 具体的参数意义，在下个小节，这里大家先感知一下操作\\nfunction funcDecorator(target, name, descriptor) {\\n    let originalMethod = descriptor.value\\n    descriptor.value = function() {\\n    console.log('我是Func的装饰器逻辑')\\n    return originalMethod.apply(this, arguments)\\n  }\\n  return descriptor\\n}\\n\\nclass Button {\\n    @funcDecorator\\n    onClick() { \\n        console.log('我是Func的原有逻辑')\\n    }\\n}\\n\\n// 验证装饰器是否生效\\nconst button = new Button()\\nbutton.onClick()\\n\\n\")])])]),a(\"p\",[t._v(\"注：以上代码直接放进浏览器/Node 中运行会报错，因为浏览器和 Node 目前都不支持装饰器语法，需要大家安装 \"),a(\"a\",{attrs:{href:\"https://babeljs.io/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"Babel\"),a(\"OutboundLink\")],1),t._v(\" 进行转码：\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"安装 Babel 及装饰器相关的 Babel 插件\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm install babel-preset-env babel-plugin-transform-decorators-legacy --save-dev\\n\\n\")])])]),a(\"p\",[t._v(\"注：在没有任何配置选项的情况下，babel-preset-env 与 babel-preset-latest（或者 babel-preset-es2015，babel-preset-es2016 和 babel-preset-es2017 一起）的行为完全相同。\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"编写配置文件.babelrc：\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('{\\n  \"presets\": [\"env\"],\\n  \"plugins\": [\"transform-decorators-legacy\"]\\n}\\n\\n')])])]),a(\"p\",[t._v(\"最后别忘了下载全局的 Babel 命令行工具用于转码：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"npm install babel-cli -g\\n\\n\")])])]),a(\"p\",[t._v(\"执行完这波操作，我们首先是对目标文件进行转码，比如说你的目标文件叫做 \"),a(\"code\",[t._v(\"test.js\")]),t._v(\"，想要把它转码后的结果输出到 \"),a(\"code\",[t._v(\"babel_test.js\")]),t._v(\"，就可以这么写:\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"babel test.js --out-file babel_test.js\\n\\n\")])])]),a(\"blockquote\",[a(\"p\",[t._v(\"运行babel_test.js\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"babel_test.js\\n\\n\")])])]),a(\"p\",[t._v(\"就可以看到你的装饰器是否生效啦~\")]),t._v(\" \"),a(\"p\",[t._v(\"OK，知道了装饰器长啥样，我们一起看看装饰器的实现细节：\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"装饰器语法糖背后的故事\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#装饰器语法糖背后的故事\"}},[t._v(\"#\")]),t._v(\" 装饰器语法糖背后的故事\")]),t._v(\" \"),a(\"p\",[t._v(\"所谓语法糖，往往意味着“美好的表象”。正如 class 语法糖背后是大家早已十分熟悉的 ES5 构造函数一样，装饰器语法糖背后也是我们的老朋友，不信我们一起来看看\"),a(\"code\",[t._v(\"@decorator\")]),t._v(\"都帮我们做了些什么：\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"part1-函数传参-调用\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#part1-函数传参-调用\"}},[t._v(\"#\")]),t._v(\" Part1：函数传参&调用\")]),t._v(\" \"),a(\"p\",[t._v(\"上一节我们使用 ES6 实现装饰器模式时曾经将按钮实例传给了 Decorator，以便于后续 Decorator 可以对它进行逻辑的拓展。这也正是装饰器的最最基本操作——定义装饰器函数，将被装饰者“交给”装饰器。这也正是装饰器语法糖首先帮我们做掉的工作 —— 函数传参&调用。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"类装饰器的参数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类装饰器的参数\"}},[t._v(\"#\")]),t._v(\" 类装饰器的参数\")]),t._v(\" \"),a(\"p\",[t._v(\"当我们给一个类添加装饰器时：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"function classDecorator(target) {\\n    target.hasDecorator = true\\n  \\treturn target\\n}\\n\\n// 将装饰器“安装”到Button类上\\n@classDecorator\\nclass Button {\\n    // Button类的相关逻辑\\n}\\n\\n\")])])]),a(\"p\",[t._v(\"此处的 target 就是被装饰的类本身。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"方法装饰器的参数\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#方法装饰器的参数\"}},[t._v(\"#\")]),t._v(\" 方法装饰器的参数\")]),t._v(\" \"),a(\"p\",[t._v(\"而当我们给一个方法添加装饰器时：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"function funcDecorator(target, name, descriptor) {\\n    let originalMethod = descriptor.value\\n    descriptor.value = function() {\\n    console.log('我是Func的装饰器逻辑')\\n    return originalMethod.apply(this, arguments)\\n  }\\n  return descriptor\\n}\\n\\nclass Button {\\n    @funcDecorator\\n    onClick() { \\n        console.log('我是Func的原有逻辑')\\n    }\\n}   \\n\\n\")])])]),a(\"p\",[t._v(\"此处的 target 变成了\"),a(\"code\",[t._v(\"Button.prototype\")]),t._v(\"，即类的原型对象。这是因为 onClick 方法总是要依附其实例存在的，修饰 onClik 其实是修饰它的实例。但我们的装饰器函数执行的时候，Button 实例还\"),a(\"strong\",[t._v(\"并不存在\")]),t._v(\"。为了确保实例生成后可以顺利调用被装饰好的方法，装饰器只能去修饰 Button 类的原型对象。\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"装饰器函数调用的时机\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#装饰器函数调用的时机\"}},[t._v(\"#\")]),t._v(\" 装饰器函数调用的时机\")]),t._v(\" \"),a(\"p\",[t._v(\"装饰器函数执行的时候，Button 实例还并不存在。这是因为实例是在我们的代码\"),a(\"strong\",[t._v(\"运行时\")]),t._v(\"动态生成的，而装饰器函数则是在\"),a(\"strong\",[t._v(\"编译阶段\")]),t._v(\"就执行了。所以说装饰器函数真正能触及到的，就只有类这个层面上的对象。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"part2-将-属性描述对象-交到你手里\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#part2-将-属性描述对象-交到你手里\"}},[t._v(\"#\")]),t._v(\" Part2：将“属性描述对象”交到你手里\")]),t._v(\" \"),a(\"p\",[t._v(\"在编写类装饰器时，我们一般获取一个target参数就足够了。但在编写方法装饰器时，我们往往需要至少三个参数：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"function funcDecorator(target, name, descriptor) {\\n    let originalMethod = descriptor.value\\n    descriptor.value = function() {\\n    console.log('我是Func的装饰器逻辑')\\n    return originalMethod.apply(this, arguments)\\n  }\\n  return descriptor\\n}\\n\\n\")])])]),a(\"p\",[t._v(\"第一个参数的意义，前文已经解释过。第二个参 数name，是我们修饰的目标属性属性名，也没啥好讲的。关键就在这个 descriptor 身上，它也是我们使用频率最高的一个参数，它的真面目就是“属性描述对象”（attributes object）。这个名字大家可能不熟悉，但\"),a(\"code\",[t._v(\"Object.defineProperty\")]),t._v(\"方法我想大家多少都用过，它的调用方式是这样的：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"Object.defineProperty(obj, prop, descriptor)\\n\\n\")])])]),a(\"p\",[t._v(\"此处的descriptor和装饰器函数里的 descriptor 是一个东西，它是 JavaScript 提供的一个内部数据结构、一个对象，专门用来描述对象的属性。它由各种各样的属性描述符组成，这些描述符又分为数据描述符和存取描述符：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"数据描述符：包括 value（存放属性值，默认为默认为 undefined）、writable（表示属性值是否可改变，默认为true）、enumerable（表示属性是否可枚举，默认为 true）、configurable（属性是否可配置，默认为true）。\")]),t._v(\" \"),a(\"li\",[t._v(\"存取描述符：包括 \"),a(\"code\",[t._v(\"get\")]),t._v(\" 方法（访问属性时调用的方法，默认为 undefined），\"),a(\"code\",[t._v(\"set\")]),t._v(\"（设置属性时调用的方法，默认为 undefined ）\")])]),t._v(\" \"),a(\"p\",[t._v(\"很明显，拿到了 descriptor，就相当于拿到了目标方法的控制权。通过修改 descriptor，我们就可以对目标方法为所欲为的逻辑进行拓展了~\")]),t._v(\" \"),a(\"p\",[t._v(\"在上文的示例中，我们通过 descriptor 获取到了原函数的函数体（originalMethod），把原函数推迟到了新逻辑（console）的后面去执行。这种做法和我们上一节在ES5中实现装饰器模式时做的事情一狗一样，所以说装饰器就是这么回事儿，换汤不换药~\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"生产实践\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#生产实践\"}},[t._v(\"#\")]),t._v(\" 生产实践\")]),t._v(\" \"),a(\"p\",[t._v(\"装饰器在前端世界的应用十分广泛，即便是在 ES7 未诞生的那些个蛮荒年代，也没能阻挡我们用装饰器开挂的热情。要说优秀的生产实践，可以说是两天两夜也说不完。但有一些实践，我相信大家可能都用过，或者说至少见过、听说过，只是当时并不清楚这个是装饰器模式。此处为了强化大家脑袋里已有的经验与设计模式知识之间的关联，更为了趁热打铁、将装饰器模式常见的用法给大家加固一下，我们一起来看几个不错的生产实践案例：\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"react中的装饰器-hoc\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#react中的装饰器-hoc\"}},[t._v(\"#\")]),t._v(\" React中的装饰器：HOC\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。\")])]),t._v(\" \"),a(\"p\",[t._v(\"HOC (Higher Order Component) 即高阶组件。它是装饰器模式在 React 中的实践，同时也是 React 应用中非常重要的一部分。通过编写高阶组件，我们可以充分复用现有逻辑，提高编码效率和代码的健壮性。\")]),t._v(\" \"),a(\"p\",[t._v(\"我们现在编写一个高阶组件，它的作用是把传入的组件\"),a(\"strong\",[t._v(\"丢进一个有红色边框的容器里\")]),t._v(\"（拓展其样式）。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import React, { Component } from 'react'\\n\\nconst BorderHoc = WrappedComponent => class extends Component {\\n  render() {\\n    return <div style={{ border: 'solid 1px red' }}>\\n      <WrappedComponent />\\n    </div>\\n  }\\n}\\nexport default borderHoc\\n\\n\")])])]),a(\"p\",[t._v(\"用它来装饰目标组件\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import React, { Component } from 'react'\\nimport BorderHoc from './BorderHoc'\\n\\n// 用BorderHoc装饰目标组件\\n@BorderHoc \\nclass TargetComponent extends React.Component {\\n  render() {\\n    // 目标组件具体的业务逻辑\\n  }\\n}\\n\\n// export出去的其实是一个被包裹后的组件\\nexport default TargetComponent\\n\\n\")])])]),a(\"p\",[t._v(\"可以看出，高阶组件从实现层面来看其实就是上文我们提到的类装饰器。在高阶组件的辅助下，我们不必因为一个小小的拓展而大费周折地编写新组件或者把一个新逻辑重写 N 多次，只需要轻轻 @ 一下装饰器即可。\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"使用装饰器改写-redux-connect\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用装饰器改写-redux-connect\"}},[t._v(\"#\")]),t._v(\" 使用装饰器改写 Redux connect\")]),t._v(\" \"),a(\"p\",[t._v(\"Redux 是热门的状态管理工具。在 React 中，当我们想要引入 Redux 时，通常需要调用 connect 方法来把状态和组件绑在一起：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import React, { Component } from 'react'\\nimport { connect } from 'react-redux'\\nimport { bindActionCreators } from 'redux'\\nimport action from './action.js'\\n\\nclass App extends Component {\\n  render() {\\n    // App的业务逻辑\\n  }\\n}\\n\\nfunction mapStateToProps(state) {\\n  // 假设App的状态对应状态树上的app节点\\n  return state.app\\n}\\n\\nfunction mapDispatchToProps(dispatch) {\\n  // 这段看不懂也没关系，下面会有解释。重点理解connect的调用即可\\n  return bindActionCreators(action, dispatch)\\n}\\n\\n// 把App组件与Redux绑在一起\\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\\n\\n\")])])]),a(\"p\",[t._v(\"这里给没用过 redux 的同学解释一下 connect 的两个入参：\"),a(\"code\",[t._v(\"mapStateToProps\")]),t._v(\" 是一个函数，它可以建立组件和状态之间的映射关系；\"),a(\"code\",[t._v(\"mapDispatchToProps\")]),t._v(\"也是一个函数，它用于建立组件和\"),a(\"code\",[t._v(\"store.dispatch\")]),t._v(\"的关系，使组件具备通过 dispatch 来派发状态的能力。\")]),t._v(\" \"),a(\"p\",[t._v(\"总而言之，我们调用 connect 可以返回一个\"),a(\"strong\",[t._v(\"具有装饰作用的函数\")]),t._v(\"，这个函数可以接收一 个React 组件作为参数，使这个目标组件和 Redux 结合、具备 Redux 提供的数据和能力。既然有装饰作用，既然是\"),a(\"strong\",[t._v(\"能力的拓展\")]),t._v(\"，那么就一定能用装饰器来改写：\"),a(\"br\"),t._v(\"\\n把 connect 抽出来：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import { connect } from 'react-redux'\\nimport { bindActionCreators } from 'redux'\\nimport action from './action.js'\\n\\nfunction mapStateToProps(state) {\\n  return state.app\\n}\\n\\nfunction mapDispatchToProps(dispatch) {\\n  return bindActionCreators(action, dispatch)\\n}\\n\\n// 将connect调用后的结果作为一个装饰器导出\\nexport default connect(mapStateToProps, mapDispatchToProps)\\n\\n\")])])]),a(\"p\",[t._v(\"在组件文件里引入connect：\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import React, { Component } from 'react'\\nimport connect from './connect.js'   \\n\\n@connect\\nexport default class App extends Component {\\n  render() {\\n    // App的业务逻辑\\n  }\\n}\\n\\n\")])])]),a(\"p\",[t._v(\"这样一来，我们的代码结构是不是清晰了很多？可维护性、可读性都上升了一个level，令人赏心悦目~\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"Tips： 回忆一下上面一个小节的讲解，对号入座看一看，connect装饰器从实现和调用方式上来看，是不是同时也是一个高阶组件呢？\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"优质的源码阅读材料-core-decorators\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#优质的源码阅读材料-core-decorators\"}},[t._v(\"#\")]),t._v(\" 优质的源码阅读材料——core-decorators\")]),t._v(\" \"),a(\"p\",[t._v(\"前面都在教大家怎么写装饰器模式，这里来聊聊怎么\"),a(\"strong\",[t._v(\"用好\")]),t._v(\"装饰器模式。\")]),t._v(\" \"),a(\"p\",[t._v(\"装饰器模式的优势在于其极强的灵活性和可复用性——它本质上是一个函数，而且往往不依赖于任何逻辑而存在。这一点提醒了我们，当我们需要用到某个反复出现的拓展逻辑时，比起自己闷头搞，不如去看一看团队（社区）里有没有现成的实现，如果有，那么贯彻“拿来主义”，直接@就可以了。所以说装饰器模式是个好同志，它可以帮我们省掉大量复制粘贴的时间。\")]),t._v(\" \"),a(\"p\",[t._v(\"这里就要给大家推荐一个非常赞的装饰模式库 —— \"),a(\"a\",{attrs:{href:\"https://github.com/jayphelps/core-decorators\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"core-decorators\"),a(\"OutboundLink\")],1),t._v(\"。core-decorators 帮我们实现好了一些使用频率较高的装饰器，比如\"),a(\"code\",[t._v(\"@readonly\")]),t._v(\"(使目标属性只读)、\"),a(\"code\",[t._v(\"@deprecate\")]),t._v(\"(在控制台输出警告，提示用户某个指定的方法已被废除)等等等等。这里强烈建议大家把 core-decorators 作为自己的源码阅读材料，你能收获的或许比你想象中更多~\")]),t._v(\" \"),a(\"p\",[t._v(\"（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）\")])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}