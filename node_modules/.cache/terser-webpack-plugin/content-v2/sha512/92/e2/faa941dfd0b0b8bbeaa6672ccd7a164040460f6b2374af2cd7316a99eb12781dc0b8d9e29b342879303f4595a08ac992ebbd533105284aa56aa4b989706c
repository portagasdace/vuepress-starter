{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[342],{701:function(t,n,e){\"use strict\";e.r(n);var a=e(42),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h2\",{attrs:{id:\"导读\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#导读\"}},[t._v(\"#\")]),t._v(\" 导读\")]),t._v(\" \"),e(\"p\",[t._v(\"本节标题：「装修阶段」- 使用高阶组件优化数据同构\")]),t._v(\" \"),e(\"p\",[t._v(\"本节主旨：替代简陋版的数据同构，使用高阶组件进行优化，逻辑复用，开发更轻快\")]),t._v(\" \"),e(\"p\",[t._v(\"本节配套代码：\")]),t._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://github.com/Bigerfe/koa-react-ssr/tree/better/packages/my-react-ssr-dataisobetter\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://github.com/Bigerfe/koa-react-ssr/tree/better/packages/my-react-ssr-dataisobetter\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"h1\",{attrs:{id:\"正文\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#正文\"}},[t._v(\"#\")]),t._v(\" 正文\")]),t._v(\" \"),e(\"p\",[t._v(\"在之前的小节中我们已经完成了数据同构，如果用来进行实际项目开发的话也能满足，但是有些时候用起来不够舒服，因为还存在一些不足和一些可以优化的空间。\")]),t._v(\" \"),e(\"p\",[t._v(\"当然这也是可以理解的，我们之前的阶段是建造阶段，为的是满足需求而已，现在是装修优化阶段，所以是时候把这些瑕疵给干掉了。\")]),t._v(\" \"),e(\"p\",[t._v(\"到底有哪些地方需要优化呢？下面一步一步来看。\")]),t._v(\" \"),e(\"h1\",{attrs:{id:\"组件内-state-初始化存在重复逻辑\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#组件内-state-初始化存在重复逻辑\"}},[t._v(\"#\")]),t._v(\" 组件内 \"),e(\"code\",[t._v(\"state\")]),t._v(\" 初始化存在重复逻辑\")]),t._v(\" \"),e(\"p\",[t._v(\"下面这段代码是\"),e(\"code\",[t._v(\"list\")]),t._v(\"页面组件构造函数内的数据获取逻辑，通过\"),e(\"code\",[t._v(\"__SERVER__\")]),t._v(\"这个全局变量来判断是否是服务端渲染还是客户端渲染，最后给到\"),e(\"code\",[t._v(\"state\")]),t._v(\"初始值。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"//...\\n\\n constructor(props) {\\n        super(props);   \\n\\n        let initialData = null;//初始化数据\\n        if(__SERVER__){\\n            //如果是在服务端执行\\n            initialData = props.staticContext.initialData||{};\\n        }else{\\n            //客户端渲染\\n            initialData = props.initialData || {};\\n        }\\n        this.state=initialData;\\n    }\\n\\n//...\\n\\n\\n\")])])]),e(\"p\",[t._v(\"一个正常的项目，都会有多个页面，那么上面的逻辑会出现每一个页面内，而且都是重复的代码。\")]),t._v(\" \"),e(\"h1\",{attrs:{id:\"组件componentdidmount存在重复代码\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#组件componentdidmount存在重复代码\"}},[t._v(\"#\")]),t._v(\" 组件\"),e(\"code\",[t._v(\"componentDidMount\")]),t._v(\"存在重复代码\")]),t._v(\" \"),e(\"p\",[t._v(\"下面代码实现了当没有初始化数据的时候会在客户端进行异步数据获取，然后更新渲染。\")]),t._v(\" \"),e(\"p\",[t._v(\"另外还会设置当前页面的 \"),e(\"code\",[t._v(\"title\")]),t._v(\"。\")]),t._v(\" \"),e(\"p\",[t._v(\"逻辑上好像没什么毛病，但是这段代码也会同时出现在h很多页面内。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"  componentDidMount() {\\n        if (!this.state.fetchData) {\\n            //如果没有数据，则进行数据请求\\n            Index.getInitialProps().then(res => {\\n                this.setState({\\n                    fetchData: res.fetchData || [],\\n                    page:res.page\\n                });\\n                //设置 title\\n                document.title = res.page.tdk.title;\\n            })\\n        }\\n\\n        if (this.state.page && this.state.page.tdk) {\\n            //设置 title\\n            document.title = this.state.page.tdk.title;\\n        }\\n    }\\n\\n\\n\")])])]),e(\"h1\",{attrs:{id:\"直出的页面无法更新数据\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#直出的页面无法更新数据\"}},[t._v(\"#\")]),t._v(\" 直出的页面无法更新数据\")]),t._v(\" \"),e(\"p\",[t._v(\"如何理解这个问题？\")]),t._v(\" \"),e(\"p\",[t._v(\"这个问题隐藏的比较深，如果不仔细观察可能会被忽略。\")]),t._v(\" \"),e(\"p\",[t._v(\"我就详细的描述的下。\")]),t._v(\" \"),e(\"p\",[t._v(\"首次进入一个页面\"),e(\"code\",[t._v(\"/A\")]),t._v(\"，\"),e(\"code\",[t._v(\"/A\")]),t._v(\"页面肯定是服务端渲染的，浏览器接管页面后会进行继续渲染，完成页面事件和交互处理。\")]),t._v(\" \"),e(\"p\",[t._v(\"但是当在浏览器端进行路由切换，再回到这个页面\"),e(\"code\",[t._v(\"/A\")]),t._v(\"时，数据仍然是服务端直出的数据。\")]),t._v(\" \"),e(\"p\",[t._v(\"无论你切换路由的方式是\"),e(\"code\",[t._v(\"PUSH\")]),t._v(\"还是\"),e(\"code\",[t._v(\"POP\")]),t._v(\"，\"),e(\"code\",[t._v(\"/A\")]),t._v(\"页面的数据永远不会更新。\")]),t._v(\" \"),e(\"p\",[t._v(\"本骨架现在是通过组件的属性带入直出的数据。\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"props.initialData\")])]),t._v(\" \"),e(\"p\",[t._v(\"目前我们只实现了通过该属性进行数据的获取，但是缺少路由切换时的更新机制,所以每次切换到\"),e(\"code\",[t._v(\"/A\")]),t._v(\"页面，数据永远都是当初直出的数据。\")]),t._v(\" \"),e(\"h1\",{attrs:{id:\"解决问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#解决问题\"}},[t._v(\"#\")]),t._v(\" 解决问题\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"代码重复问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码重复问题\"}},[t._v(\"#\")]),t._v(\" 代码重复问题\")]),t._v(\" \"),e(\"p\",[t._v(\"前两个代码重复代码的问题应该是比较好解决，可以使用\"),e(\"code\",[t._v(\"高阶组件\")]),t._v(\"来解决，同时还可以统一页面组件内获取数据的属性字段。\")]),t._v(\" \"),e(\"p\",[t._v(\"比如在服务端或者前端环境都使用 \"),e(\"code\",[t._v(\"props.initailData\")]),t._v(\" 来获取数据,其他逻辑均可以封装在高阶组件内。\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"高阶组件代码参考\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"export default (SourceComponent) => {\\n    return class HoComponent extends React.Component {\\n        constructor(props) {\\n            super(props);\\n\\n            this.state = {\\n                initialData: {},\\n                getProps: false//浏览器端是否需要请求数据\\n            }\\n        }\\n        //用于服务端调用\\n        static async getInitialProps(props) {\\n            return SourceComponent.getInitialProps ? await SourceComponent.getInitialProps(props) : {};\\n        }\\n\\n\\n        async componentDidMount() {\\n\\n            if(!this.state.initialData || !this.state.initialData.fetchData){\\n                HoComponent.getInitialProps().then(res=>{\\n                    //...渲染数据\\n                })\\n            }\\n        }\\n\\n        render() {\\n            const props = {\\n                initialData: {},\\n                ...this.props\\n            };\\n\\n            if (__SERVER__) {\\n                //服务端渲染\\n                props.initialData = this.props.staticContext.initialData || {};\\n            } else {\\n               //客户端渲染 props.initialData=this.props.initialData;\\n            }\\n\\n\\n            return <SourceComponent  {...props}></SourceComponent>\\n        }\\n    }\\n}\\n\\n\\n\")])])]),e(\"p\",[e(\"code\",[t._v(\"在页面组件中的使用\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"\\n//组件\\nclass Index extends React.Component {\\n    constructor(props) {\\n        super(props);\\n    }\\n\\n    static async  getInitialProps() {\\n        return {\\n            fetchData: //...,\\n            page:{\\n                tdk:{\\n                   // ...\\n                }\\n            }\\n        };\\n    }\\n\\n    render() {\\n        //渲染数据\\n        const {fetchData,page} = this.props.initialData;\\n        const { code, data } = fetchData||{};\\n        \\n        return <div>\\n        //....\\n        </div>\\n    }\\n}\\n\\nexport default PageContainer(Index); \\n\\n\")])])]),e(\"p\",[t._v(\"从上面的代码可以看出，页面组件干净了很多，我们只需要关心数据获取和渲染部分即可。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"直出组件数据不更新问题\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#直出组件数据不更新问题\"}},[t._v(\"#\")]),t._v(\" 直出组件数据不更新问题\")]),t._v(\" \"),e(\"p\",[t._v(\"问题原因我们已经分析过。\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"props.history.action=PUSH 跳转 不会更新\")]),t._v(\" \"),e(\"li\",[t._v(\"props.history.action=POP 后退 or 前进 不会更新\")])]),t._v(\" \"),e(\"p\",[t._v(\"所以解决办法也很明确，判断\"),e(\"code\",[t._v(\"action\")]),t._v(\"的值即可。\")]),t._v(\" \"),e(\"p\",[t._v(\"真的那么简单吗？\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"if(props.history.action==='PUSH' || props.history.action==='POP')\\nupdate();\\n\\n\")])])]),e(\"p\",[t._v(\"我们一步一步分析.\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"action = PUSH\")]),t._v(\" 这个操作没问题，\"),e(\"code\",[t._v(\"action=POP\")]),t._v(\"就有问题，因为第一次进入页面的时候\"),e(\"code\",[t._v(\"action\")]),t._v(\"的值也是\"),e(\"code\",[t._v(\"POP\")]),t._v(\"。\")]),t._v(\" \"),e(\"p\",[t._v(\"看来很多问题并不是我们想象中那么简单，我们该如何处理\"),e(\"code\",[t._v(\"POP\")]),t._v(\"呢？\")]),t._v(\" \"),e(\"p\",[e(\"strong\",[t._v(\"不过我们离答案已经很近了。非常近了。\")])]),t._v(\" \"),e(\"p\",[t._v(\"上面都是在分析问题，现在直接说结果吧。\")]),t._v(\" \"),e(\"p\",[t._v(\"当第一次进入页面的时候\"),e(\"code\",[t._v(\"action\")]),t._v(\"值为\"),e(\"code\",[t._v(\"POP\")]),t._v(\",但是不会触发\"),e(\"code\",[t._v(\"popstate\")]),t._v(\"事件，触发事件的时候都属于是客户端渲染。\")]),t._v(\" \"),e(\"p\",[t._v(\"我们可以在\"),e(\"code\",[t._v(\"popstate\")]),t._v(\"事件内进行数据更新,当\"),e(\"code\",[t._v(\"action=PUSH\")]),t._v(\"时更新数据，其他情况使用默认数据。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"//伪代码\\n\\nconst popStateCallback = ()=> {\\n    // 使用popStateFn保存函数防止addEventListener重复注册\\n   update();\\n};\\n\\n\\nasync componentDidMount() {\\n  //注册事件，用于在页面回退的时候触发\\n    window.addEventListener('popstate', popStateCallback);\\n    \\n    if(this.props.history.action === 'PUSH'){\\n        update();\\n    }\\n}\\n\\n\\n\")])])]),e(\"p\",[t._v(\"下面来看下这个高阶组件的完整代码,可结合注释进行理解。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"\\nlet _this = null;//保存当前渲染的组件实例\\n\\nconst popStateCallback = ()=> {\\n    // 使用popStateFn保存函数防止addEventListener重复注册\\n    if (_this && _this.getInitialProps) {\\n        _this.getInitialProps();\\n    }\\n};\\n//高阶函数\\nexport default (SourceComponent)=>{\\n    return class HoComponent extends React.Component {\\n        constructor(props) {\\n            super(props);\\n\\n            this.state={\\n                initialData:{},\\n                canClientFetch:false//浏览器端是否需要请求数据的状态\\n            }\\n        }\\n        //用于服务端进行数据预取\\n        static async getInitialProps(props){\\n            return SourceComponent.getInitialProps ? await SourceComponent.getInitialProps(props):{};\\n        }\\n\\n        //用于封装处理\\n        async getInitialProps(){\\n            // ssr首次进入页面以及,切换路由时才调用组件的getInitialProps方法\\n            const props = this.props;\\n            const res =  SourceComponent.getInitialProps ? await SourceComponent.getInitialProps(props) : {};\\n            this.setState({\\n                initialData: res,\\n                canClientFetch: true\\n            });\\n\\n            let { tdk } = res.page;\\n            if (tdk) {\\n                document.title = tdk.title;\\n            }\\n        }\\n        //组件挂载完成事件\\n        async componentDidMount() {\\n            \\n            _this = this; // 保证_this指向当前渲染的页面组件\\n            //注册事件，用于在页面回退的时候触发\\n            window.addEventListener('popstate', popStateCallback);\\n\\n            const canClientFetch = this.props.history && this.props.history.action === 'PUSH';//路由跳转的时候可以异步请求数据\\n            if (canClientFetch) {\\n                await this.getInitialProps();\\n            }\\n        }\\n\\n        render() {\\n            // 只有在首次进入页面需要将window.__INITIAL_DATA__作为props，路由切换时不需要\\n\\n            const props = {\\n                initialData:{},\\n               ...this.props\\n            };\\n\\n\\n            if(__SERVER__){\\n                //服务端渲染时\\n                props.initialData = this.props.staticContext.initialData||{};                \\n            }else{\\n                //客户端渲染\\n                if (this.state.canClientFetch) {\\n                \\n                    //获取异步请求数据\\n                    props.initialData = this.state.initialData||{};\\n                } else {\\n                    //首次加载使用页面数据\\n                    props.initialData = window.__INITIAL_DATA__;\\n                    window.__INITIAL_DATA__={};//使用过后清除数据,否则其他页面会使用\\n                }\\n            }\\n         \\n            return <SourceComponent  {...props}></SourceComponent>\\n        }\\n    }\\n}\\n\\n\\n\")])])]),e(\"h1\",{attrs:{id:\"干掉对路由的入侵\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#干掉对路由的入侵\"}},[t._v(\"#\")]),t._v(\" 干掉对路由的入侵\")]),t._v(\" \"),e(\"p\",[t._v(\"上面已经介绍过本骨架目前的同构渲染初始化数据是通过为路由增加属性，从而为路由对应的组件带入数据。\")]),t._v(\" \"),e(\"p\",[t._v(\"具体代码如下，通过\"),e(\"code\",[t._v(\"matchRoute\")]),t._v(\"方法查找路由，然后为路由设置\"),e(\"code\",[t._v(\"initialData\")]),t._v(\"属性，并赋值初始化数据。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"\\nfunction clientRender() {\\n\\n        let initialData = JSON.parse(document.getElementById('ssrTextInitData').value);\\n\\n        //查找路由\\n        let matchResult = matchRoute(document.location.pathname, routeList);\\n        let { targetRoute } = matchResult;\\n        if (targetRoute) {\\n                //设置组件初始化数据\\n                targetRoute.initialData = initialData;\\n        }\\n\\n        //渲染index\\n        ReactDom.hydrate(<BrowserRouter>\\n                <App routeList={routeList} />\\n        </BrowserRouter>\\n                , document.getElementById('root'))\\n\\n}\\n\\n\\n\")])])]),e(\"p\",[t._v(\"然后在\"),e(\"code\",[t._v(\"App\")]),t._v(\"组件内遍历\"),e(\"code\",[t._v(\"route\")]),t._v(\"时会进行逻辑判断，如果路由存在\"),e(\"code\",[t._v(\"item.initialData\")]),t._v(\"属性，则渲染时将\"),e(\"code\",[t._v(\"initialData\")]),t._v(\"作为组件的属性，同时带入数据,这样页面组件就可以通过使用\"),e(\"code\",[t._v(\"props.initialData\")]),t._v(\"属性来获取页面上的数据了。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v('function App({routeList}) {\\n    return (\\n            <Layout> \\n               <Switch>\\n                {\\n                    routeList.map(item=>{\\n                        return item.initialData ? <Route key={item.path} exact={item.exact} path={item.path}  render={(props)=>{\\n                            return <item.component {...props} initialData={item.initialData}></item.component>\\n                        }}></Route> : <Route key={item.path} {...item}></Route>\\n                    })\\n                }\\n                <Route to=\"*\" component={Page404}></Route>\\n            </Switch>\\n            </Layout>\\n    );\\n}\\n\\n')])])]),e(\"p\",[t._v(\"这种数据和路由关联的方式没有问题，但是会对路由产生修改，侵入路由，并不推荐这样处理。\")]),t._v(\" \"),e(\"p\",[t._v(\"其实在上面的高级组件中我们已经解决了，就是将页面直出的数据作为全局变量。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"function clientRender(routeList) {\\n\\n        let initialData = JSON.parse(document.getElementById('ssrTextInitData').value);\\n        window.__INITIAL_DATA__ = initialData;\\n        \\n        //...\\n}\\n\\n\")])])]),e(\"p\",[t._v(\"那么下面这段用于在渲染前设置路由参数，并带入初始数据的代码就不需要了,简化了代码，降低了耦合。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"//....\\n//查找路由\\n    let matchResult = matchRoute(document.location.pathname, routeList);\\n    let { targetRoute } = matchResult;\\n    if (targetRoute) {\\n        //设置组件初始化数据\\n        - targetRoute.initialData = initialData;\\n    }\\n\\n\")])])]),e(\"p\",[t._v(\"我们的\"),e(\"code\",[t._v(\"App\")]),t._v(\"组件也更清晰了\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"\\nfunction App({routeList}) {\\n    return (\\n            <Layout> \\n               <Switch>\\n                {\\n                    routeList.map(item=>{\\n                        - return item.initialData ? <Route key={item.path} exact={item.exact} path={item.path}  render={(props)=>{\\n                            props.initialData = item.initialData;\\n                            return <item.component {...props} />\\n                        }}></Route> : <Route key={item.path} {...item}></Route>\\n                        \\n                        + return <Route key={item.path} {...item} />\\n                    })\\n                }\\n            </Switch>\\n            </Layout>\\n    );\\n}\\n\\n\")])])]),e(\"h1\",{attrs:{id:\"小结\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[t._v(\"#\")]),t._v(\" 小结\")]),t._v(\" \"),e(\"p\",[t._v(\"本节咱们主要是对已有的数据同构进行优化，通过使用高阶组件将重复的逻辑进行提取，让页面组件变得更加简洁，开发者只需要关注数据和渲染即可。\")]),t._v(\" \"),e(\"p\",[t._v(\"然后解决了一个隐含的数据更新问题，直出到页面的数据会被注入组件，客户端路由切换时数据也不会更新。\")]),t._v(\" \"),e(\"p\",[t._v(\"我们采用的\"),e(\"code\",[t._v(\"history action\")]),t._v(\"结合\"),e(\"code\",[t._v(\"popstate\")]),t._v(\"事件结合处理，确定了客户端进行异步数据请求的时机。同时也清除了客户端渲染前对路由和组件的入侵，降低了耦合。\")]),t._v(\" \"),e(\"p\",[t._v(\"本节完整代码已上传\")]),t._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://github.com/Bigerfe/koa-react-ssr/tree/better/packages/my-react-ssr-dataisobetter\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://github.com/Bigerfe/koa-react-ssr/tree/better/packages/my-react-ssr-dataisobetter\"),e(\"OutboundLink\")],1)]),t._v(\" \"),e(\"p\",[t._v(\"感谢你的阅读。\")]),t._v(\" \"),e(\"p\",[t._v(\"如果有问题欢迎留言，也欢迎在留言区留下你的想法和思考。\")])])}),[],!1,null,null,null);n.default=s.exports}}]);","extractedComments":[]}