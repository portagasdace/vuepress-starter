{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{444:function(e,t,n){\"use strict\";n.r(t);var a=n(42),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"flutter-基础-widget-输入框和表单\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-基础-widget-输入框和表单\"}},[e._v(\"#\")]),e._v(\" Flutter 基础 Widget —— 输入框和表单\")]),e._v(\" \"),n(\"p\",[e._v(\"本节讲 Flutter 输入框及表单的使用。\")]),e._v(\" \"),n(\"h1\",{attrs:{id:\"输入框\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#输入框\"}},[e._v(\"#\")]),e._v(\" 输入框\")]),e._v(\" \"),n(\"p\",[e._v(\"在 Flutter 中，输入框的 Widget 为：\")]),e._v(\" \"),n(\"p\",[n(\"a\",{attrs:{href:\"https://docs.flutter.io/flutter/material/TextField-class.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"TextField\"),n(\"OutboundLink\")],1)]),e._v(\" \"),n(\"h2\",{attrs:{id:\"textfield\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#textfield\"}},[e._v(\"#\")]),e._v(\" \"),n(\"a\",{attrs:{href:\"https://docs.flutter.io/flutter/material/TextField-class.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"TextField\"),n(\"OutboundLink\")],1)]),e._v(\" \"),n(\"p\",[e._v(\"TextField 是文本输入框。\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"代码所在位置\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置\"}},[e._v(\"#\")]),e._v(\" 代码所在位置\")]),e._v(\" \"),n(\"p\",[e._v(\"flutter_widget_demo/lib/textfield/TextFieldWidget.dart\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"textfiled-的快速上手\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#textfiled-的快速上手\"}},[e._v(\"#\")]),e._v(\" TextFiled 的快速上手\")]),e._v(\" \"),n(\"p\",[e._v(\"TextFile 的最简单使用方式就是使用无参构造函数写一个 TextFiled 对象：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"TextField();\\n\\n\")])])]),n(\"p\",[e._v(\"TextField 写到一个页面的完整 Demo 代码如下：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('import \\'package:flutter/material.dart\\';\\n\\nvoid main() => runApp(TextFieldWidget());\\n\\nclass TextFieldWidget extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: \"Flutter Demo\",\\n      theme: ThemeData(\\n        primaryColor: Colors.blue,\\n      ),\\n      home: Scaffold(\\n          appBar: AppBar(title: Text(\"Flutter UI基础Widget -- 文本\")),\\n          body: TextField()),\\n    );\\n  }\\n}\\n\\n')])])]),n(\"p\",[e._v(\"运行效果为：\")]),e._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/9/16961758744cb5c0?w=842&h=334&f=jpeg&s=43546\",alt:\"\"}})]),e._v(\" \"),n(\"p\",[e._v(\"可以在文本框里输入文字。\")]),e._v(\" \"),n(\"h4\",{attrs:{id:\"获取-textfield-的内容\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#获取-textfield-的内容\"}},[e._v(\"#\")]),e._v(\" 获取 TextField 的内容\")]),e._v(\" \"),n(\"p\",[e._v(\"因为是输入框，所以需要获取输入的内容，TextField 获取输入内容有两种方式：\")]),e._v(\" \"),n(\"ol\",[n(\"li\",[e._v(\"onChanged\")]),e._v(\" \"),n(\"li\",[e._v(\"TextEditingController\")])]),e._v(\" \"),n(\"h4\",{attrs:{id:\"onchanged\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#onchanged\"}},[e._v(\"#\")]),e._v(\" onChanged\")]),e._v(\" \"),n(\"p\",[e._v(\"当用户输入，TextField 的内容发生变化，TextField 就会调用它的 onChanged 回调。 因此 onChanged 可以实时查看 TextField 的内容变化。\")]),e._v(\" \"),n(\"p\",[e._v(\"使用代码如下：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"TextField(\\n    onChanged: (String data) {\\n      //实时获取\\n      print(data);\\n    },\\n  )\\n\\n\")])])]),n(\"h4\",{attrs:{id:\"texteditingcontroller\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#texteditingcontroller\"}},[e._v(\"#\")]),e._v(\" TextEditingController\")]),e._v(\" \"),n(\"p\",[e._v(\"TextEditingController 是 TextField 的控制类，可以控制 TextField 的编辑，是 TextField 的 controller 属性，我们可以为 TextField 赋值自己创建的 TextEditingController 对象来控制 TextField。 使用代码如下：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"\\nclass TextFieldWidget extends StatelessWidget {\\n  final TextEditingController _controller = TextEditingController();\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return \\n        ...\\n        TextField(\\n            controller: _controller,\\n        ),\\n        ...\\n    );\\n  }\\n}\\n\\n\")])])]),n(\"p\",[e._v(\"然后使用 \"),n(\"code\",[e._v(\"_controller.text\")]),e._v(\" 来访问 TextField 里的内容。\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"textfield-的构造函数及参数说明\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#textfield-的构造函数及参数说明\"}},[e._v(\"#\")]),e._v(\" TextField 的构造函数及参数说明\")]),e._v(\" \"),n(\"p\",[e._v(\"TextField 的构造函数为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"class TextField extends StatefulWidget {\\n \\n  const TextField({\\n    Key key,\\n    this.controller,\\n    this.focusNode,\\n    this.decoration = const InputDecoration(),\\n    TextInputType keyboardType,\\n    this.textInputAction,\\n    this.textCapitalization = TextCapitalization.none,\\n    this.style,\\n    this.textAlign = TextAlign.start,\\n    this.textDirection,\\n    this.autofocus = false,\\n    this.obscureText = false,\\n    this.autocorrect = true,\\n    this.maxLines = 1,\\n    this.maxLength,\\n    this.maxLengthEnforced = true,\\n    this.onChanged,\\n    this.onEditingComplete,\\n    this.onSubmitted,\\n    this.inputFormatters,\\n    this.enabled,\\n    this.cursorWidth = 2.0,\\n    this.cursorRadius,\\n    this.cursorColor,\\n    this.keyboardAppearance,\\n    this.scrollPadding = const EdgeInsets.all(20.0),\\n    this.dragStartBehavior = DragStartBehavior.down,\\n    this.enableInteractiveSelection,\\n    this.onTap,\\n    this.buildCounter,\\n  }) : assert(textAlign != null),\\n       assert(autofocus != null),\\n       assert(obscureText != null),\\n       assert(autocorrect != null),\\n       assert(maxLengthEnforced != null),\\n       assert(scrollPadding != null),\\n       assert(dragStartBehavior != null),\\n       assert(maxLines == null || maxLines > 0),\\n       assert(maxLength == null || maxLength == TextField.noMaxLength || maxLength > 0),\\n       keyboardType = keyboardType ?? (maxLines == 1 ? TextInputType.text : TextInputType.multiline),\\n       super(key: key);\\n\\n}\\n\\n\")])])]),n(\"p\",[e._v(\"参数名字\")]),e._v(\" \"),n(\"p\",[e._v(\"参数类型\")]),e._v(\" \"),n(\"p\",[e._v(\"意义\")]),e._v(\" \"),n(\"p\",[e._v(\"必选 or 可选\")]),e._v(\" \"),n(\"p\",[e._v(\"key\")]),e._v(\" \"),n(\"p\",[e._v(\"Key\")]),e._v(\" \"),n(\"p\",[e._v(\"Widget 的标识\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"controller\")]),e._v(\" \"),n(\"p\",[e._v(\"TextEditingController\")]),e._v(\" \"),n(\"p\",[e._v(\"控制 TextField 的编辑，如果没有设置，会有默认值\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"focusNode\")]),e._v(\" \"),n(\"p\",[e._v(\"FocusNode\")]),e._v(\" \"),n(\"p\",[e._v(\"用于控制TextField是否占有当前键盘的输入焦点\"),n(\"br\"),e._v(\"\\n它是我们和键盘交互的一个handle\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"decoration\")]),e._v(\" \"),n(\"p\",[e._v(\"InputDecoration\")]),e._v(\" \"),n(\"p\",[e._v(\"用于控制TextField的外观显示，如提示文本、背景颜色、边框等\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"textAlign\")]),e._v(\" \"),n(\"p\",[e._v(\"TextAlign\")]),e._v(\" \"),n(\"p\",[e._v(\"文本的对齐方式\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"textDirection\")]),e._v(\" \"),n(\"p\",[e._v(\"TextDirection\")]),e._v(\" \"),n(\"p\",[e._v(\"文字方向\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"keyboardType\")]),e._v(\" \"),n(\"p\",[e._v(\"TextInputType\")]),e._v(\" \"),n(\"p\",[e._v(\"用于设置该输入框默认的键盘输入类型\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"textInputAction\")]),e._v(\" \"),n(\"p\",[e._v(\"TextInputAction\")]),e._v(\" \"),n(\"p\",[e._v(\"键盘动作按钮图标(即回车键位图标)\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"textCapitalization\")]),e._v(\" \"),n(\"p\",[e._v(\"TextCapitalization\")]),e._v(\" \"),n(\"p\",[e._v(\"定义文本的大写格式\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"style\")]),e._v(\" \"),n(\"p\",[e._v(\"TextStyle\")]),e._v(\" \"),n(\"p\",[e._v(\"文本样式\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"textAlign\")]),e._v(\" \"),n(\"p\",[e._v(\"TextAlign\")]),e._v(\" \"),n(\"p\",[e._v(\"文本的对齐方式\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"textDirection\")]),e._v(\" \"),n(\"p\",[e._v(\"TextDirection\")]),e._v(\" \"),n(\"p\",[e._v(\"文字方向\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"autofocus\")]),e._v(\" \"),n(\"p\",[e._v(\"bool\")]),e._v(\" \"),n(\"p\",[e._v(\"是否自动获取焦点\"),n(\"br\"),e._v(\"\\n默认为false\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"obscureText\")]),e._v(\" \"),n(\"p\",[e._v(\"bool\")]),e._v(\" \"),n(\"p\",[e._v(\"是否隐藏正在编辑的文本，如用于输入密码的场景等，文本内容会用“•”替换\"),n(\"br\"),e._v(\"\\n默认为false\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"autocorrect\")]),e._v(\" \"),n(\"p\",[e._v(\"bool\")]),e._v(\" \"),n(\"p\",[e._v(\"默认为true\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"maxLines\")]),e._v(\" \"),n(\"p\",[e._v(\"int\")]),e._v(\" \"),n(\"p\",[e._v(\"显示的最大行数\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"maxLength\")]),e._v(\" \"),n(\"p\",[e._v(\"int\")]),e._v(\" \"),n(\"p\",[e._v(\"输入框中允许的最大字符数\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"maxLengthEnforced\")]),e._v(\" \"),n(\"p\",[e._v(\"bool\")]),e._v(\" \"),n(\"p\",[e._v(\"是否强制限制最大字符数，默认为true\"),n(\"br\"),e._v(\"\\ntrue：强制限制最大字符数\"),n(\"br\"),e._v(\"\\nfalse：不限制最大字符数，即使设置了maxLength也不生效\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"onChange\")]),e._v(\" \"),n(\"p\",[e._v(\"ValueChanged\")]),e._v(\" \"),n(\"p\",[e._v(\"输入框内容改变时的回调函数；注：内容改变事件也可以通过controller来监听\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"onEditingComplete\")]),e._v(\" \"),n(\"p\",[e._v(\"VoidCallback\")]),e._v(\" \"),n(\"p\",[e._v(\"输入框输入完成时触发，但是onEditingComplete没有参数，不会返回内容\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"onSubmitted\")]),e._v(\" \"),n(\"p\",[e._v(\"ValueChanged\")]),e._v(\" \"),n(\"p\",[e._v(\"输入框输入完成时触发，但是onSubmitted有参数，会返回内容\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"inputFormatters\")]),e._v(\" \"),n(\"p\",[e._v(\"List< TextInputFormatter>\")]),e._v(\" \"),n(\"p\",[e._v(\"用于指定输入格式；当用户输入内容改变时，会根据指定的格式来校验。\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"enabled\")]),e._v(\" \"),n(\"p\",[e._v(\"bool\")]),e._v(\" \"),n(\"p\",[e._v(\"输入框是否禁用\"),n(\"br\"),e._v(\"\\n如果为false，则输入框会被禁用，禁用状态不接收输入和事件，同时显示禁用态样式（在其decoration中定义）。\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"cursorWidth\")]),e._v(\" \"),n(\"p\",[e._v(\"double\")]),e._v(\" \"),n(\"p\",[e._v(\"自定义输入框光标宽度\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"cursorRadius\")]),e._v(\" \"),n(\"p\",[e._v(\"Radius\")]),e._v(\" \"),n(\"p\",[e._v(\"自定义输入框光标圆角\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"cursorColor\")]),e._v(\" \"),n(\"p\",[e._v(\"Color\")]),e._v(\" \"),n(\"p\",[e._v(\"自定义输入框光标颜色\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"keyboardAppearance\")]),e._v(\" \"),n(\"p\",[e._v(\"Brightness\")]),e._v(\" \"),n(\"p\",[e._v(\"设置键盘的亮度模式\"),n(\"br\"),e._v(\"\\n只能在iOS上使用，有两种：Brightness.dart和Brightness.light\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"scrollPadding\")]),e._v(\" \"),n(\"p\",[e._v(\"EdgeInsets\")]),e._v(\" \"),n(\"p\",[e._v(\"文本框滑动时的间距\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"dragStartBehavior\")]),e._v(\" \"),n(\"p\",[e._v(\"DragStartBehavior\")]),e._v(\" \"),n(\"p\",[e._v(\"设置确定当用户启动拖动时拖动正式开始的时间\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"enableInteractiveSelection\")]),e._v(\" \"),n(\"p\",[e._v(\"bool\")]),e._v(\" \"),n(\"p\",[e._v(\"是否启用交互式选择\"),n(\"br\"),e._v(\"\\ntrue：长按将会选中文字，并且弹出 cut/copy/paste 的菜单\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"onTap\")]),e._v(\" \"),n(\"p\",[e._v(\"GestureTapCallback\")]),e._v(\" \"),n(\"p\",[e._v(\"TextField的点击事件\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"buildCounter\")]),e._v(\" \"),n(\"p\",[e._v(\"InputCounterWidgetBuilder\")]),e._v(\" \"),n(\"p\",[e._v(\"生成自定义 InputDecorator.counter 小部件的回调\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[n(\"p\",[e._v(\"keyboardType：类型为TextInputType，用于设置该输入框默认的键盘输入类型。\")]),e._v(\" \"),n(\"p\",[e._v(\"TextInputType的值\")]),e._v(\" \"),n(\"p\",[e._v(\"含义\")]),e._v(\" \"),n(\"p\",[e._v(\"TextInputType.text\")]),e._v(\" \"),n(\"p\",[e._v(\"文本输入键盘\")]),e._v(\" \"),n(\"p\",[e._v(\"TextInputType.multiline\")]),e._v(\" \"),n(\"p\",[e._v(\"多行文本，需和maxLines配合使用(设为null或大于1)\")]),e._v(\" \"),n(\"p\",[e._v(\"TextInputType.number\")]),e._v(\" \"),n(\"p\",[e._v(\"数字；会弹出数字键盘\")]),e._v(\" \"),n(\"p\",[e._v(\"TextInputType.phone\")]),e._v(\" \"),n(\"p\",[e._v('优化后的电话号码输入键盘；会弹出数字键盘并显示\"* #\"')]),e._v(\" \"),n(\"p\",[e._v(\"TextInputType.datetime\")]),e._v(\" \"),n(\"p\",[e._v(\"优化后的日期输入键盘；Android上会显示“: -”\")]),e._v(\" \"),n(\"p\",[e._v(\"TextInputType.emailAddress\")]),e._v(\" \"),n(\"p\",[e._v(\"优化后的电子邮件地址；会显示“@ .”\")]),e._v(\" \"),n(\"p\",[e._v(\"TextInputType.url\")]),e._v(\" \"),n(\"p\",[e._v(\"优化后的url输入键盘； 会显示“/ .”\")])]),e._v(\" \"),n(\"li\",[n(\"p\",[e._v(\"textInputAction：类型为TextInputAction，键盘动作按钮图标(即回车键位图标)。\")]),e._v(\" \"),n(\"p\",[e._v(\"就是键盘右下角的那一个块图标。\")]),e._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/3/9/1696212b0d8fe836?w=1016&h=1740&f=jpeg&s=171489\",alt:\"\"}})])]),e._v(\" \"),n(\"li\",[n(\"p\",[e._v(\"textCapitalization：类型为TextCapitalization，定义文本的大写格式。\")]),e._v(\" \"),n(\"p\",[e._v(\"TextCapitalization的值\")]),e._v(\" \"),n(\"p\",[e._v(\"含义\")]),e._v(\" \"),n(\"p\",[e._v(\"TextCapitalization.none\")]),e._v(\" \"),n(\"p\",[e._v(\"全部小写\")]),e._v(\" \"),n(\"p\",[e._v(\"TextCapitalization.words\")]),e._v(\" \"),n(\"p\",[e._v(\"每个单词的首字母大写\")]),e._v(\" \"),n(\"p\",[e._v(\"TextCapitalization.sentences\")]),e._v(\" \"),n(\"p\",[e._v(\"每个句子的首字母大写\")]),e._v(\" \"),n(\"p\",[e._v(\"TextCapitalization.characters\")]),e._v(\" \"),n(\"p\",[e._v(\"每个字每大写\")])])]),e._v(\" \"),n(\"h1\",{attrs:{id:\"表单\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#表单\"}},[e._v(\"#\")]),e._v(\" 表单\")]),e._v(\" \"),n(\"p\",[e._v(\"表单是用来对输入的信息进行校验的，在 Flutter 中，表单的 Widget 为：\")]),e._v(\" \"),n(\"p\",[n(\"a\",{attrs:{href:\"https://docs.flutter.io/flutter/widgets/Form-class.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Form\"),n(\"OutboundLink\")],1)]),e._v(\" \"),n(\"h2\",{attrs:{id:\"form\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#form\"}},[e._v(\"#\")]),e._v(\" \"),n(\"a\",{attrs:{href:\"https://docs.flutter.io/flutter/widgets/Form-class.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Form\"),n(\"OutboundLink\")],1)]),e._v(\" \"),n(\"p\",[e._v(\"Form 是将多个表单元素组合起来的一个容器，可以将多个表单元素合并起来一起校验。\")]),e._v(\" \"),n(\"p\",[e._v(\"表单元素的 Widget 是 FormField 及其子类，最常用的是以下两个：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"DropdownButtonFormField\")]),e._v(\" \"),n(\"li\",[e._v(\"TextFormField\")])]),e._v(\" \"),n(\"p\",[e._v(\"使用方法就是：\")]),e._v(\" \"),n(\"ol\",[n(\"li\",[e._v(\"创建 Form，并为其添加 GlobalKey。\")]),e._v(\" \"),n(\"li\",[e._v(\"在 Form 里添加表单元素，并给表单元素添加校验逻辑。\")]),e._v(\" \"),n(\"li\",[e._v(\"添加一个按钮去提交并验证表单，提交并验证表单需要用到 Form 的 FormState 方法，Form 是 StatefulWidget，FormState 是 Form 的状态。\")])]),e._v(\" \"),n(\"h3\",{attrs:{id:\"代码所在位置-2\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置-2\"}},[e._v(\"#\")]),e._v(\" 代码所在位置\")]),e._v(\" \"),n(\"p\",[e._v(\"flutter_widget_demo/lib/textfield/FormWidget.dart\")]),e._v(\" \"),n(\"h3\",{attrs:{id:\"表单的快速使用\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#表单的快速使用\"}},[e._v(\"#\")]),e._v(\" 表单的快速使用\")]),e._v(\" \"),n(\"p\",[e._v(\"这里举一个用户注册的例子，在表单里选择性别，填入用户名和密码，用户名要大于 5 个字符，密码要大于 8 个字符，才能注册成功。\")]),e._v(\" \"),n(\"ol\",[n(\"li\",[n(\"p\",[e._v(\"创建 Form，并为其添加 GlobalKey：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v('import \\'package:flutter/material.dart\\';\\n\\nvoid main() => runApp(FormWidget());\\n\\nclass FormWidget extends StatefulWidget {\\n  @override\\n  State<StatefulWidget> createState() {\\n    // TODO: implement createState\\n    return FormWidgetState();\\n  }\\n}\\n\\nclass FormWidgetState extends State<FormWidget> {\\n  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: \"Flutter Demo\",\\n      theme: ThemeData(\\n        primaryColor: Colors.blue,\\n      ),\\n      home: Scaffold(\\n          appBar: AppBar(title: Text(\"Flutter UI基础Widget -- Form\")),\\n          body: Form(\\n            key: _formKey,\\n            child: ...\\n          )),\\n    );\\n  }\\n}\\n\\n\\n')])])])]),e._v(\" \"),n(\"li\",[n(\"p\",[e._v(\"在 Form 里添加表单元素，并给表单元素添加校验逻辑。 这里添加的表单元素，我使用到了 DropdownButtonFormField 和 TextFormField：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Form(\\n    key: _formKey,\\n    child: Column(\\n      children: <Widget>[\\n        DropdownButtonFormField<String>(\\n          value: _userGender,\\n          items: ['男', '女']\\n              .map((label) => DropdownMenuItem(\\n                    child: Text(label),\\n                    value: label,\\n                  ))\\n              .toList(),\\n          onChanged: (value){\\n            setState(() {\\n              _userGender = value;\\n            });\\n          },\\n          onSaved: (value){\\n            _userGender = value;\\n          },\\n        ),\\n        TextFormField(\\n          decoration: InputDecoration(hintText: '用户名'),\\n          validator: (value) { // 校验\\n            if (value?.length <= 5) {\\n              return '用户名必须大于 5 个字符';\\n            }\\n          },\\n          onSaved: (value) {\\n            _userName = value;\\n          },\\n        ),\\n        TextFormField(\\n          decoration: InputDecoration(hintText: '密码'),\\n          obscureText: true,\\n          validator: (value) {\\n            if (value?.length <= 8) {// 校验\\n              return '密码必须大于 8 个字符';\\n            }\\n          },\\n          onSaved: (value) {\\n            _userPassword = value;\\n          },\\n        )\\n      ],\\n    ),\\n  )),\\n\\n\")])])])])]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"validator\")])]),e._v(\" \"),n(\"p\",[e._v(\"表单元素的验证逻辑是 validator 函数：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"validator: (value) { // 校验\\n    if (value?.length <= 8) {\\n      return '用户名必须大于 5 个字符';\\n    }\\n  }\\n\\n\")])])]),n(\"p\",[e._v(\"validator 的使用方法是，当表单元素的 value 值，当校验不符合时，就返回一个 String ，这个 String 是错误提示，如果校验成功，就什么也不做。\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"obscureText obscureText 设为 Ture，会隐藏当前输入的文字，用 \"),n(\"code\",[e._v(\"*\")]),e._v(\" 代理。\")])]),e._v(\" \"),n(\"ol\",{attrs:{start:\"3\"}},[n(\"li\",[n(\"p\",[e._v(\"添加一个按钮去提交并验证表单\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"Form(\\n    child: Column(\\n        ...\\n        RaisedButton(\\n          child: Text('注册'),\\n          onPressed: () {\\n            if (_formKey.currentState.validate()) {\\n              _formKey.currentState.save();\\n              print(_userGender);\\n              print(_userName);\\n              print(_userPassword);\\n            }\\n          },\\n        )\\n)),\\n\\n\")])])]),n(\"p\",[e._v(\"提交并验证表单需要用到 Form 的 FormState 方法，Form 是 StatefulWidget，FormState 是 Form 的状态。\")]),e._v(\" \"),n(\"p\",[e._v(\"FormState 为 Form 的 State 类，可以通过 Form.of() 或 GlobalKey 获得。我们可以通过它来对 Form 的子孙 FormField 进行统一操作。我们看看其常用的三个方法：\")]),e._v(\" \"),n(\"ul\",[n(\"li\",[e._v(\"FormState.validate()：调用此方法后，会调用 Form 子孙FormField 的 validate 回调，如果有一个校验失败，则返回 false，所有校验失败项都会返回用户返回的错误提示。\")]),e._v(\" \"),n(\"li\",[e._v(\"FormState.save()：调用此方法后，会调用 Form 子孙FormField 的 save 回调，用于保存表单内容\")]),e._v(\" \"),n(\"li\",[e._v(\"FormState.reset()：调用此方法后，会将 子孙FormField 的内容清空。\")])])])]),e._v(\" \"),n(\"p\",[e._v(\"完整代码为：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"import 'package:flutter/material.dart';\\n\\nvoid main() => runApp(FormWidget());\\n\\nclass FormWidget extends StatefulWidget {\\n  @override\\n  State<StatefulWidget> createState() {\\n    // TODO: implement createState\\n    return FormWidgetState();\\n  }\\n}\\n\\nclass FormWidgetState extends State<FormWidget> {\\n  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();\\n\\n  String _userGender = '男';\\n  String _userName;\\n  String _userPassword;\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: \\\"Flutter Demo\\\",\\n      theme: ThemeData(\\n        primaryColor: Colors.blue,\\n      ),\\n      home: Scaffold(\\n          appBar: AppBar(title: Text(\\\"Flutter UI基础Widget -- Form\\\")),\\n          body: Form(\\n            key: _formKey,\\n            child: Column(\\n              children: <Widget>[\\n                DropdownButtonFormField<String>(\\n                  value: _userGender,\\n                  items: ['男', '女']\\n                      .map((label) => DropdownMenuItem(\\n                            child: Text(label),\\n                            value: label,\\n                          ))\\n                      .toList(),\\n                  onChanged: (value){\\n                    setState(() {\\n                      _userGender = value;\\n                    });\\n                  },\\n                  onSaved: (value){\\n                    _userGender = value;\\n                  },\\n                ),\\n                TextFormField(\\n                  decoration: InputDecoration(hintText: '用户名'),\\n                  validator: (value) { //\\n                    if (value?.length <= 5) {\\n                      return '用户名必须大于 5 个字符';\\n                    }\\n                  },\\n                  onSaved: (value) {\\n                    _userName = value;\\n                  },\\n                ),\\n                TextFormField(\\n                  decoration: InputDecoration(hintText: '密码'),\\n                  obscureText: true,\\n                  validator: (value) {\\n                    if (value?.length <= 8) {\\n                      return '密码必须大于 8 个字符';\\n                    }\\n                  },\\n                  onSaved: (value) {\\n                    _userPassword = value;\\n                  },\\n                ),\\n                RaisedButton(\\n                  child: Text('注册'),\\n                  onPressed: () {\\n                    if (_formKey.currentState.validate()) {\\n                      _formKey.currentState.save();\\n                      print(_userGender);\\n                      print(_userName);\\n                      print(_userPassword);\\n                    }\\n                  },\\n                )\\n              ],\\n            ),\\n          )),\\n    );\\n  }\\n}\\n\\n\")])])]),n(\"h3\",{attrs:{id:\"form-的构造函数及参数说明\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#form-的构造函数及参数说明\"}},[e._v(\"#\")]),e._v(\" Form 的构造函数及参数说明\")]),e._v(\" \"),n(\"p\",[e._v(\"在看一下 Form 的构造函数：\")]),e._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[e._v(\"class Form extends StatefulWidget {\\n\\n  const Form({\\n    Key key,\\n    @required this.child,\\n    this.autovalidate = false,\\n    this.onWillPop,\\n    this.onChanged,\\n  }) : assert(child != null),\\n       super(key: key);\\n    ...   \\n}\\n\\n\")])])]),n(\"p\",[e._v(\"参数名字\")]),e._v(\" \"),n(\"p\",[e._v(\"参数类型\")]),e._v(\" \"),n(\"p\",[e._v(\"意义\")]),e._v(\" \"),n(\"p\",[e._v(\"必选 or 可选\")]),e._v(\" \"),n(\"p\",[e._v(\"key\")]),e._v(\" \"),n(\"p\",[e._v(\"Key\")]),e._v(\" \"),n(\"p\",[e._v(\"Widget 的标识\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"child\")]),e._v(\" \"),n(\"p\",[e._v(\"Widget\")]),e._v(\" \"),n(\"p\",[e._v(\"Form 的子 Widget\")]),e._v(\" \"),n(\"p\",[e._v(\"必选\")]),e._v(\" \"),n(\"p\",[e._v(\"autovalidate\")]),e._v(\" \"),n(\"p\",[e._v(\"bool\")]),e._v(\" \"),n(\"p\",[e._v(\"是否自动验证，默认为 false\"),n(\"br\"),e._v(\"\\ntrue：每次输入有变动都会验证\"),n(\"br\"),e._v(\"\\nfalse：只有调用 FormFieldState.validate 才会验证\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"onWillPop\")]),e._v(\" \"),n(\"p\",[e._v(\"WillPopCallback\")]),e._v(\" \"),n(\"p\",[e._v(\"决定 Form 所在的路由是否可以直接返回（如点击返回按钮），这个回调会返回一个 Future 对象，如果 Future 的最终结果是 false，则当前路由不会返回；如果为 true，则会返回到上一个路由。此属性通常用于拦截返回按钮。\")]),e._v(\" \"),n(\"p\",[e._v(\"可选\")]),e._v(\" \"),n(\"p\",[e._v(\"onChanged\")]),e._v(\" \"),n(\"p\",[e._v(\"VoidCallback\")]),e._v(\" \"),n(\"p\",[e._v(\"Form 的任意一个 子FormField 内容发生变化时会触发此回调\")]),e._v(\" \"),n(\"p\",[e._v(\"必选\")])])}),[],!1,null,null,null);t.default=v.exports}}]);","extractedComments":[]}