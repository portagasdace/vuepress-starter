{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[216],{570:function(e,_,s){\"use strict\";s.r(_);var n=s(42),t=Object(n.a)({},(function(){var e=this,_=e.$createElement,s=e._self._c||_;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"explain-详解-下\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#explain-详解-下\"}},[e._v(\"#\")]),e._v(\" Explain 详解（下）\")]),e._v(\" \"),s(\"p\",[e._v(\"标签： MySQL 是怎样运行的\")]),e._v(\" \"),s(\"hr\"),e._v(\" \"),s(\"h2\",{attrs:{id:\"执行计划输出中各列详解\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#执行计划输出中各列详解\"}},[e._v(\"#\")]),e._v(\" 执行计划输出中各列详解\")]),e._v(\" \"),s(\"p\",[e._v(\"本章紧接着上一节的内容，继续唠叨\"),s(\"code\",[e._v(\"EXPLAIN\")]),e._v(\"语句输出的各个列的意思。\")]),e._v(\" \"),s(\"h3\",{attrs:{id:\"extra\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#extra\"}},[e._v(\"#\")]),e._v(\" Extra\")]),e._v(\" \"),s(\"p\",[e._v(\"顾名思义，\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列是用来说明一些额外信息的，我们可以通过这些额外信息来更准确的理解\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"到底将如何执行给定的查询语句。\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"提供的额外信息有好几十个，我们就不一个一个介绍了（都介绍了感觉我们的文章就跟文档差不多了～），所以我们只挑一些平时常见的或者比较重要的额外信息介绍给大家哈。\")]),e._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"No tables used\")])]),e._v(\" \"),s(\"p\",[e._v(\"当查询语句的没有\"),s(\"code\",[e._v(\"FROM\")]),e._v(\"子句时将会提示该额外信息，比如：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT 1;\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\\n|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | No tables used |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\\n1 row in set, 1 warning (0.00 sec)\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Impossible WHERE\")])]),e._v(\" \"),s(\"p\",[e._v(\"查询语句的\"),s(\"code\",[e._v(\"WHERE\")]),e._v(\"子句永远为\"),s(\"code\",[e._v(\"FALSE\")]),e._v(\"时将会提示该额外信息，比方说：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 WHERE 1 != 1;\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+\\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra            |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+\\n|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | Impossible WHERE |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------------+\\n1 row in set, 1 warning (0.01 sec)\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"No matching min/max row\")])]),e._v(\" \"),s(\"p\",[e._v(\"当查询列表处有\"),s(\"code\",[e._v(\"MIN\")]),e._v(\"或者\"),s(\"code\",[e._v(\"MAX\")]),e._v(\"聚集函数，但是并没有符合\"),s(\"code\",[e._v(\"WHERE\")]),e._v(\"子句中的搜索条件的记录时，将会提示该额外信息，比方说：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT MIN(key1) FROM s1 WHERE key1 = 'abcdefg';\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------------------+\\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                   |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------------------+\\n|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | No matching min/max row |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------------------+\\n1 row in set, 1 warning (0.00 sec)\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Using index\")])]),e._v(\" \"),s(\"p\",[e._v(\"当我们的查询列表以及搜索条件中只包含属于某个索引的列，也就是在可以使用索引覆盖的情况下，在\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列将会提示该额外信息。比方说下边这个查询中只需要用到\"),s(\"code\",[e._v(\"idx_key1\")]),e._v(\"而不需要回表操作：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT key1 FROM s1 WHERE key1 = 'a';\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\\n| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref   | rows | filtered | Extra       |\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\\n|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | const |    8 |   100.00 | Using index |\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\\n1 row in set, 1 warning (0.00 sec)\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Using index condition\")])]),e._v(\" \"),s(\"p\",[e._v(\"有些搜索条件中虽然出现了索引列，但却不能使用到索引，比如下边这个查询：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"SELECT * FROM s1 WHERE key1 > 'z' AND key1 LIKE '%a';\\n\")])])]),s(\"p\",[e._v(\"其中的\"),s(\"code\",[e._v(\"key1 > 'z'\")]),e._v(\"可以使用到索引，但是\"),s(\"code\",[e._v(\"key1 LIKE '%a'\")]),e._v(\"却无法使用到索引，在以前版本的\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"中，是按照下边步骤来执行这个查询的：\")]),e._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[e._v(\"先根据\"),s(\"code\",[e._v(\"key1 > 'z'\")]),e._v(\"这个条件，从二级索引\"),s(\"code\",[e._v(\"idx_key1\")]),e._v(\"中获取到对应的二级索引记录。\")])]),e._v(\" \"),s(\"li\",[s(\"p\",[e._v(\"根据上一步骤得到的二级索引记录中的主键值进行回表，找到完整的用户记录再检测该记录是否符合\"),s(\"code\",[e._v(\"key1 LIKE '%a'\")]),e._v(\"这个条件，将符合条件的记录加入到最后的结果集。\")])])]),e._v(\" \"),s(\"p\",[e._v(\"但是虽然\"),s(\"code\",[e._v(\"key1 LIKE '%a'\")]),e._v(\"不能组成范围区间参与\"),s(\"code\",[e._v(\"range\")]),e._v(\"访问方法的执行，但这个条件毕竟只涉及到了\"),s(\"code\",[e._v(\"key1\")]),e._v(\"列，所以设计\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"的大叔把上边的步骤改进了一下：\")]),e._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[e._v(\"先根据\"),s(\"code\",[e._v(\"key1 > 'z'\")]),e._v(\"这个条件，定位到二级索引\"),s(\"code\",[e._v(\"idx_key1\")]),e._v(\"中对应的二级索引记录。\")])]),e._v(\" \"),s(\"li\",[s(\"p\",[e._v(\"对于指定的二级索引记录，先不着急回表，而是先检测一下该记录是否满足\"),s(\"code\",[e._v(\"key1 LIKE '%a'\")]),e._v(\"这个条件，如果这个条件不满足，则该二级索引记录压根儿就没必要回表。\")])]),e._v(\" \"),s(\"li\",[s(\"p\",[e._v(\"对于满足\"),s(\"code\",[e._v(\"key1 LIKE '%a'\")]),e._v(\"这个条件的二级索引记录执行回表操作。\")])])]),e._v(\" \"),s(\"p\",[e._v(\"我们说回表操作其实是一个随机\"),s(\"code\",[e._v(\"IO\")]),e._v(\"，比较耗时，所以上述修改虽然只改进了一点点，但是可以省去好多回表操作的成本。设计\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"的大叔们把他们的这个改进称之为\"),s(\"code\",[e._v(\"索引条件下推\")]),e._v(\"（英文名：\"),s(\"code\",[e._v(\"Index Condition Pushdown\")]),e._v(\"）。\")]),e._v(\" \"),s(\"p\",[e._v(\"如果在查询语句的执行过程中将要使用\"),s(\"code\",[e._v(\"索引条件下推\")]),e._v(\"这个特性，在\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列中将会显示\"),s(\"code\",[e._v(\"Using index condition\")]),e._v(\"，比如这样：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 WHERE key1 > 'z' AND key1 LIKE '%b';\\n  +----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+\\n  | id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra                 |\\n  +----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+\\n  |  1 | SIMPLE      | s1    | NULL       | range | idx_key1      | idx_key1 | 303     | NULL |  266 |   100.00 | Using index condition |\\n  +----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-----------------------+\\n  1 row in set, 1 warning (0.01 sec)\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Using where\")])]),e._v(\" \"),s(\"p\",[e._v(\"当我们使用全表扫描来执行对某个表的查询，并且该语句的\"),s(\"code\",[e._v(\"WHERE\")]),e._v(\"子句中有针对该表的搜索条件时，在\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列中会提示上述额外信息。比如下边这个查询：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 WHERE common_field = 'a';\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+\\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+\\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |    10.00 | Using where |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+\\n1 row in set, 1 warning (0.01 sec)\\n\")])])]),s(\"p\",[e._v(\"当使用索引访问来执行对某个表的查询，并且该语句的\"),s(\"code\",[e._v(\"WHERE\")]),e._v(\"子句中有除了该索引包含的列之外的其他搜索条件时，在\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列中也会提示上述额外信息。比如下边这个查询虽然使用\"),s(\"code\",[e._v(\"idx_key1\")]),e._v(\"索引执行查询，但是搜索条件中除了包含\"),s(\"code\",[e._v(\"key1\")]),e._v(\"的搜索条件\"),s(\"code\",[e._v(\"key1 = 'a'\")]),e._v(\"，还有包含\"),s(\"code\",[e._v(\"common_field\")]),e._v(\"的搜索条件，所以\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列会显示\"),s(\"code\",[e._v(\"Using where\")]),e._v(\"的提示：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 WHERE key1 = 'a' AND common_field = 'a';\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\\n| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref   | rows | filtered | Extra       |\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\\n|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | const |    8 |    10.00 | Using where |\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------+------+----------+-------------+\\n1 row in set, 1 warning (0.00 sec)\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Using join buffer (Block Nested Loop)\")])]),e._v(\" \"),s(\"p\",[e._v(\"在连接查询执行过程中，当被驱动表不能有效的利用索引加快访问速度，\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"一般会为其分配一块名叫\"),s(\"code\",[e._v(\"join buffer\")]),e._v(\"的内存块来加快查询速度，也就是我们所讲的\"),s(\"code\",[e._v(\"基于块的嵌套循环算法\")]),e._v(\"，比如下边这个查询语句：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 INNER JOIN s2 ON s1.common_field = s2.common_field;\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | NULL                                               |\\n|  1 | SIMPLE      | s2    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9954 |    10.00 | Using where; Using join buffer (Block Nested Loop) |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+\\n2 rows in set, 1 warning (0.03 sec)\\n\")])])]),s(\"p\",[e._v(\"可以在对\"),s(\"code\",[e._v(\"s2\")]),e._v(\"表的执行计划的\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列显示了两个提示：\")]),e._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Using join buffer (Block Nested Loop)\")]),e._v(\"：这是因为对表\"),s(\"code\",[e._v(\"s2\")]),e._v(\"的访问不能有效利用索引，只好退而求其次，使用\"),s(\"code\",[e._v(\"join buffer\")]),e._v(\"来减少对\"),s(\"code\",[e._v(\"s2\")]),e._v(\"表的访问次数，从而提高性能。\")])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Using where\")]),e._v(\"：可以看到查询语句中有一个\"),s(\"code\",[e._v(\"s1.common_field = s2.common_field\")]),e._v(\"条件，因为\"),s(\"code\",[e._v(\"s1\")]),e._v(\"是驱动表，\"),s(\"code\",[e._v(\"s2\")]),e._v(\"是被驱动表，所以在访问\"),s(\"code\",[e._v(\"s2\")]),e._v(\"表时，\"),s(\"code\",[e._v(\"s1.common_field\")]),e._v(\"的值已经确定下来了，所以实际上查询\"),s(\"code\",[e._v(\"s2\")]),e._v(\"表的条件就是\"),s(\"code\",[e._v(\"s2.common_field = 一个常数\")]),e._v(\"，所以提示了\"),s(\"code\",[e._v(\"Using where\")]),e._v(\"额外信息。\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Not exists\")])]),e._v(\" \"),s(\"p\",[e._v(\"当我们使用左（外）连接时，如果\"),s(\"code\",[e._v(\"WHERE\")]),e._v(\"子句中包含要求被驱动表的某个列等于\"),s(\"code\",[e._v(\"NULL\")]),e._v(\"值的搜索条件，而且那个列又是不允许存储\"),s(\"code\",[e._v(\"NULL\")]),e._v(\"值的，那么在该表的执行计划的\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列就会提示\"),s(\"code\",[e._v(\"Not exists\")]),e._v(\"额外信息，比如这样：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 LEFT JOIN s2 ON s1.key1 = s2.key1 WHERE s2.id IS NULL;\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------------------+\\n| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref               | rows | filtered | Extra                   |\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------------------+\\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL     | NULL    | NULL              | 9688 |   100.00 | NULL                    |\\n|  1 | SIMPLE      | s2    | NULL       | ref  | idx_key1      | idx_key1 | 303     | xiaohaizi.s1.key1 |    1 |    10.00 | Using where; Not exists |\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------------------+\\n2 rows in set, 1 warning (0.00 sec)\\n\")])])]),s(\"p\",[e._v(\"上述查询中\"),s(\"code\",[e._v(\"s1\")]),e._v(\"表是驱动表，\"),s(\"code\",[e._v(\"s2\")]),e._v(\"表是被驱动表，\"),s(\"code\",[e._v(\"s2.id\")]),e._v(\"列是不允许存储\"),s(\"code\",[e._v(\"NULL\")]),e._v(\"值的，而\"),s(\"code\",[e._v(\"WHERE\")]),e._v(\"子句中又包含\"),s(\"code\",[e._v(\"s2.id IS NULL\")]),e._v(\"的搜索条件，这意味着必定是驱动表的记录在被驱动表中找不到匹配\"),s(\"code\",[e._v(\"ON\")]),e._v(\"子句条件的记录才会把该驱动表的记录加入到最终的结果集，所以对于某条驱动表中的记录来说，如果能在被驱动表中找到1条符合\"),s(\"code\",[e._v(\"ON\")]),e._v(\"子句条件的记录，那么该驱动表的记录就不会被加入到最终的结果集，也就是说我们\"),s(\"span\",{staticStyle:{color:\"red\"}},[e._v(\"没有必要到被驱动表中找到全部符合ON子句条件的记录\")]),e._v(\"，这样可以稍微节省一点性能。\")]),e._v(\" \"),s(\"div\",{staticClass:\"language-! extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"小贴士：\\n\\n右（外）连接可以被转换为左（外）连接，所以就不提右（外）连接的情况了。\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Using intersect(...)\")]),e._v(\"、\"),s(\"code\",[e._v(\"Using union(...)\")]),e._v(\"和\"),s(\"code\",[e._v(\"Using sort_union(...)\")])]),e._v(\" \"),s(\"p\",[e._v(\"如果执行计划的\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列出现了\"),s(\"code\",[e._v(\"Using intersect(...)\")]),e._v(\"提示，说明准备使用\"),s(\"code\",[e._v(\"Intersect\")]),e._v(\"索引合并的方式执行查询，括号中的\"),s(\"code\",[e._v(\"...\")]),e._v(\"表示需要进行索引合并的索引名称；如果出现了\"),s(\"code\",[e._v(\"Using union(...)\")]),e._v(\"提示，说明准备使用\"),s(\"code\",[e._v(\"Union\")]),e._v(\"索引合并的方式执行查询；出现了\"),s(\"code\",[e._v(\"Using sort_union(...)\")]),e._v(\"提示，说明准备使用\"),s(\"code\",[e._v(\"Sort-Union\")]),e._v(\"索引合并的方式执行查询。比如这个查询的执行计划：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 WHERE key1 = 'a' AND key3 = 'a';\\n+----+-------------+-------+------------+-------------+-------------------+-------------------+---------+------+------+----------+-------------------------------------------------+\\n| id | select_type | table | partitions | type        | possible_keys     | key               | key_len | ref  | rows | filtered | Extra                                           |\\n+----+-------------+-------+------------+-------------+-------------------+-------------------+---------+------+------+----------+-------------------------------------------------+\\n|  1 | SIMPLE      | s1    | NULL       | index_merge | idx_key1,idx_key3 | idx_key3,idx_key1 | 303,303 | NULL |    1 |   100.00 | Using intersect(idx_key3,idx_key1); Using where |\\n+----+-------------+-------+------------+-------------+-------------------+-------------------+---------+------+------+----------+-------------------------------------------------+\\n1 row in set, 1 warning (0.01 sec)\\n\")])])]),s(\"p\",[e._v(\"其中\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列就显示了\"),s(\"code\",[e._v(\"Using intersect(idx_key3,idx_key1)\")]),e._v(\"，表明\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"即将使用\"),s(\"code\",[e._v(\"idx_key3\")]),e._v(\"和\"),s(\"code\",[e._v(\"idx_key1\")]),e._v(\"这两个索引进行\"),s(\"code\",[e._v(\"Intersect\")]),e._v(\"索引合并的方式执行查询。\")]),e._v(\" \"),s(\"div\",{staticClass:\"language-! extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"小贴士：\\n\\n剩下两种类型的索引合并的Extra列信息就不一一举例子了，自己写个查询瞅瞅呗～\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Zero limit\")])]),e._v(\" \"),s(\"p\",[e._v(\"当我们的\"),s(\"code\",[e._v(\"LIMIT\")]),e._v(\"子句的参数为\"),s(\"code\",[e._v(\"0\")]),e._v(\"时，表示压根儿不打算从表中读出任何记录，将会提示该额外信息，比如这样：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 LIMIT 0;\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------+\\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra      |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------+\\n|  1 | SIMPLE      | NULL  | NULL       | NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | Zero limit |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+------------+\\n1 row in set, 1 warning (0.00 sec)\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Using filesort\")])]),e._v(\" \"),s(\"p\",[e._v(\"有一些情况下对结果集中的记录进行排序是可以使用到索引的，比如下边这个查询：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 ORDER BY key1 LIMIT 10;\\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------+\\n| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra |\\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------+\\n|  1 | SIMPLE      | s1    | NULL       | index | NULL          | idx_key1 | 303     | NULL |   10 |   100.00 | NULL  |\\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------+\\n1 row in set, 1 warning (0.03 sec)\\n\")])])]),s(\"p\",[e._v(\"这个查询语句可以利用\"),s(\"code\",[e._v(\"idx_key1\")]),e._v(\"索引直接取出\"),s(\"code\",[e._v(\"key1\")]),e._v(\"列的10条记录，然后再进行回表操作就好了。但是很多情况下排序操作无法使用到索引，只能在内存中（记录较少的时候）或者磁盘中（记录较多的时候）进行排序，设计\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"的大叔把这种在内存中或者磁盘上进行排序的方式统称为文件排序（英文名：\"),s(\"code\",[e._v(\"filesort\")]),e._v(\"）。如果某个查询需要使用文件排序的方式执行查询，就会在执行计划的\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列中显示\"),s(\"code\",[e._v(\"Using filesort\")]),e._v(\"提示，比如这样：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 ORDER BY common_field LIMIT 10;\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra          |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | Using filesort |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),s(\"p\",[e._v(\"需要注意的是，如果查询中需要使用\"),s(\"code\",[e._v(\"filesort\")]),e._v(\"的方式进行排序的记录非常多，那么这个过程是很耗费性能的，我们最好想办法将使用\"),s(\"code\",[e._v(\"文件排序\")]),e._v(\"的执行方式改为使用索引进行排序。\")])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Using temporary\")])]),e._v(\" \"),s(\"p\",[e._v(\"在许多查询的执行过程中，\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"可能会借助临时表来完成一些功能，比如去重、排序之类的，比如我们在执行许多包含\"),s(\"code\",[e._v(\"DISTINCT\")]),e._v(\"、\"),s(\"code\",[e._v(\"GROUP BY\")]),e._v(\"、\"),s(\"code\",[e._v(\"UNION\")]),e._v(\"等子句的查询过程中，如果不能有效利用索引来完成查询，\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"很有可能寻求通过建立内部的临时表来执行查询。如果查询中使用到了内部的临时表，在执行计划的\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列将会显示\"),s(\"code\",[e._v(\"Using temporary\")]),e._v(\"提示，比方说这样：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT DISTINCT common_field FROM s1;\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra           |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | Using temporary |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),s(\"p\",[e._v(\"再比如：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT common_field, COUNT(*) AS amount FROM s1 GROUP BY common_field;\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+\\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                           |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+\\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | Using temporary; Using filesort |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+---------------------------------+\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),s(\"p\",[e._v(\"不知道大家注意到没有，上述执行计划的\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列不仅仅包含\"),s(\"code\",[e._v(\"Using temporary\")]),e._v(\"提示，还包含\"),s(\"code\",[e._v(\"Using filesort\")]),e._v(\"提示，可是我们的查询语句中明明没有写\"),s(\"code\",[e._v(\"ORDER BY\")]),e._v(\"子句呀？这是因为\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"会在包含\"),s(\"code\",[e._v(\"GROUP BY\")]),e._v(\"子句的查询中默认添加上\"),s(\"code\",[e._v(\"ORDER BY\")]),e._v(\"子句，也就是说上述查询其实和下边这个查询等价：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"EXPLAIN SELECT common_field, COUNT(*) AS amount FROM s1 GROUP BY common_field ORDER BY common_field;\\n\")])])]),s(\"p\",[e._v(\"如果我们并不想为包含\"),s(\"code\",[e._v(\"GROUP BY\")]),e._v(\"子句的查询进行排序，需要我们显式的写上\"),s(\"code\",[e._v(\"ORDER BY NULL\")]),e._v(\"，就像这样：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT common_field, COUNT(*) AS amount FROM s1 GROUP BY common_field ORDER BY NULL;\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\\n| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra           |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\\n|  1 | SIMPLE      | s1    | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 9688 |   100.00 | Using temporary |\\n+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),s(\"p\",[e._v(\"这回执行计划中就没有\"),s(\"code\",[e._v(\"Using filesort\")]),e._v(\"的提示了，也就意味着执行查询时可以省去对记录进行文件排序的成本了。\")]),e._v(\" \"),s(\"p\",[e._v(\"另外，执行计划中出现\"),s(\"code\",[e._v(\"Using temporary\")]),e._v(\"并不是一个好的征兆，因为建立与维护临时表要付出很大成本的，所以我们最好能使用索引来替代掉使用临时表，比方说下边这个包含\"),s(\"code\",[e._v(\"GROUP BY\")]),e._v(\"子句的查询就不需要使用临时表：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT key1, COUNT(*) AS amount FROM s1 GROUP BY key1;\\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+\\n| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra       |\\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+\\n|  1 | SIMPLE      | s1    | NULL       | index | idx_key1      | idx_key1 | 303     | NULL | 9688 |   100.00 | Using index |\\n+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+-------------+\\n1 row in set, 1 warning (0.00 sec)\\n\")])])]),s(\"p\",[e._v(\"从\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"的\"),s(\"code\",[e._v(\"Using index\")]),e._v(\"的提示里我们可以看出，上述查询只需要扫描\"),s(\"code\",[e._v(\"idx_key1\")]),e._v(\"索引就可以搞定了，不再需要临时表了。\")])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"Start temporary, End temporary\")])]),e._v(\" \"),s(\"p\",[e._v(\"我们前边唠叨子查询的时候说过，查询优化器会优先尝试将\"),s(\"code\",[e._v(\"IN\")]),e._v(\"子查询转换成\"),s(\"code\",[e._v(\"semi-join\")]),e._v(\"，而\"),s(\"code\",[e._v(\"semi-join\")]),e._v(\"又有好多种执行策略，当执行策略为\"),s(\"code\",[e._v(\"DuplicateWeedout\")]),e._v(\"时，也就是通过建立临时表来实现为外层查询中的记录进行去重操作时，驱动表查询执行计划的\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列将显示\"),s(\"code\",[e._v(\"Start temporary\")]),e._v(\"提示，被驱动表查询执行计划的\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列将显示\"),s(\"code\",[e._v(\"End temporary\")]),e._v(\"提示，就是这样：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 WHERE key1 IN (SELECT key3 FROM s2 WHERE common_field = 'a');\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+\\n| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref               | rows | filtered | Extra                        |\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+\\n|  1 | SIMPLE      | s2    | NULL       | ALL  | idx_key3      | NULL     | NULL    | NULL              | 9954 |    10.00 | Using where; Start temporary |\\n|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | xiaohaizi.s2.key3 |    1 |   100.00 | End temporary                |\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+------------------------------+\\n2 rows in set, 1 warning (0.00 sec)\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"LooseScan\")])]),e._v(\" \"),s(\"p\",[e._v(\"在将\"),s(\"code\",[e._v(\"In\")]),e._v(\"子查询转为\"),s(\"code\",[e._v(\"semi-join\")]),e._v(\"时，如果采用的是\"),s(\"code\",[e._v(\"LooseScan\")]),e._v(\"执行策略，则在驱动表执行计划的\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列就是显示\"),s(\"code\",[e._v(\"LooseScan\")]),e._v(\"提示，比如这样：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 WHERE key3 IN (SELECT key1 FROM s2 WHERE key1 > 'z');\\n+----+-------------+-------+------------+-------+---------------+----------+---------+-------------------+------+----------+-------------------------------------+\\n| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref               | rows | filtered | Extra                               |\\n+----+-------------+-------+------------+-------+---------------+----------+---------+-------------------+------+----------+-------------------------------------+\\n|  1 | SIMPLE      | s2    | NULL       | range | idx_key1      | idx_key1 | 303     | NULL              |  270 |   100.00 | Using where; Using index; LooseScan |\\n|  1 | SIMPLE      | s1    | NULL       | ref   | idx_key3      | idx_key3 | 303     | xiaohaizi.s2.key1 |    1 |   100.00 | NULL                                |\\n+----+-------------+-------+------------+-------+---------------+----------+---------+-------------------+------+----------+-------------------------------------+\\n2 rows in set, 1 warning (0.01 sec)\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"FirstMatch(tbl_name)\")])]),e._v(\" \"),s(\"p\",[e._v(\"在将\"),s(\"code\",[e._v(\"In\")]),e._v(\"子查询转为\"),s(\"code\",[e._v(\"semi-join\")]),e._v(\"时，如果采用的是\"),s(\"code\",[e._v(\"FirstMatch\")]),e._v(\"执行策略，则在被驱动表执行计划的\"),s(\"code\",[e._v(\"Extra\")]),e._v(\"列就是显示\"),s(\"code\",[e._v(\"FirstMatch(tbl_name)\")]),e._v(\"提示，比如这样：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT * FROM s1 WHERE common_field IN (SELECT key1 FROM s2 where s1.key3 = s2.key3);\\n+----+-------------+-------+------------+------+-------------------+----------+---------+-------------------+------+----------+-----------------------------+\\n| id | select_type | table | partitions | type | possible_keys     | key      | key_len | ref               | rows | filtered | Extra                       |\\n+----+-------------+-------+------------+------+-------------------+----------+---------+-------------------+------+----------+-----------------------------+\\n|  1 | SIMPLE      | s1    | NULL       | ALL  | idx_key3          | NULL     | NULL    | NULL              | 9688 |   100.00 | Using where                 |\\n|  1 | SIMPLE      | s2    | NULL       | ref  | idx_key1,idx_key3 | idx_key3 | 303     | xiaohaizi.s1.key3 |    1 |     4.87 | Using where; FirstMatch(s1) |\\n+----+-------------+-------+------------+------+-------------------+----------+---------+-------------------+------+----------+-----------------------------+\\n2 rows in set, 2 warnings (0.00 sec)\\n\")])])])])]),e._v(\" \"),s(\"h2\",{attrs:{id:\"json格式的执行计划\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#json格式的执行计划\"}},[e._v(\"#\")]),e._v(\" Json格式的执行计划\")]),e._v(\" \"),s(\"p\",[e._v(\"我们上边介绍的\"),s(\"code\",[e._v(\"EXPLAIN\")]),e._v(\"语句输出中缺少了一个衡量执行计划好坏的重要属性 —— \"),s(\"span\",{staticStyle:{color:\"red\"}},[e._v(\"成本\")]),e._v(\"。不过设计\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"的大叔贴心的为我们提供了一种查看某个执行计划花费的成本的方式：\")]),e._v(\" \"),s(\"ul\",[s(\"li\",[e._v(\"在\"),s(\"code\",[e._v(\"EXPLAIN\")]),e._v(\"单词和真正的查询语句中间加上\"),s(\"code\",[e._v(\"FORMAT=JSON\")]),e._v(\"。\")])]),e._v(\" \"),s(\"p\",[e._v(\"这样我们就可以得到一个\"),s(\"code\",[e._v(\"json\")]),e._v(\"格式的执行计划，里边儿包含该计划花费的成本，比如这样：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v('mysql> EXPLAIN FORMAT=JSON SELECT * FROM s1 INNER JOIN s2 ON s1.key1 = s2.key2 WHERE s1.common_field = \\'a\\'\\\\G\\n*************************** 1. row ***************************\\n\\nEXPLAIN: {\\n  \"query_block\": {\\n    \"select_id\": 1,     # 整个查询语句只有1个SELECT关键字，该关键字对应的id号为1\\n    \"cost_info\": {\\n      \"query_cost\": \"3197.16\"   # 整个查询的执行成本预计为3197.16\\n    },\\n    \"nested_loop\": [    # 几个表之间采用嵌套循环连接算法执行\\n    \\n    # 以下是参与嵌套循环连接算法的各个表的信息\\n      {\\n        \"table\": {\\n          \"table_name\": \"s1\",   # s1表是驱动表\\n          \"access_type\": \"ALL\",     # 访问方法为ALL，意味着使用全表扫描访问\\n          \"possible_keys\": [    # 可能使用的索引\\n            \"idx_key1\"\\n          ],\\n          \"rows_examined_per_scan\": 9688,   # 查询一次s1表大致需要扫描9688条记录\\n          \"rows_produced_per_join\": 968,    # 驱动表s1的扇出是968\\n          \"filtered\": \"10.00\",  # condition filtering代表的百分比\\n          \"cost_info\": {\\n            \"read_cost\": \"1840.84\",     # 稍后解释\\n            \"eval_cost\": \"193.76\",      # 稍后解释\\n            \"prefix_cost\": \"2034.60\",   # 单次查询s1表总共的成本\\n            \"data_read_per_join\": \"1M\"  # 读取的数据量\\n          },\\n          \"used_columns\": [     # 执行查询中涉及到的列\\n            \"id\",\\n            \"key1\",\\n            \"key2\",\\n            \"key3\",\\n            \"key_part1\",\\n            \"key_part2\",\\n            \"key_part3\",\\n            \"common_field\"\\n          ],\\n          \\n          # 对s1表访问时针对单表查询的条件\\n          \"attached_condition\": \"((`xiaohaizi`.`s1`.`common_field` = \\'a\\') and (`xiaohaizi`.`s1`.`key1` is not null))\"\\n        }\\n      },\\n      {\\n        \"table\": {\\n          \"table_name\": \"s2\",   # s2表是被驱动表\\n          \"access_type\": \"ref\",     # 访问方法为ref，意味着使用索引等值匹配的方式访问\\n          \"possible_keys\": [    # 可能使用的索引\\n            \"idx_key2\"\\n          ],\\n          \"key\": \"idx_key2\",    # 实际使用的索引\\n          \"used_key_parts\": [   # 使用到的索引列\\n            \"key2\"\\n          ],\\n          \"key_length\": \"5\",    # key_len\\n          \"ref\": [      # 与key2列进行等值匹配的对象\\n            \"xiaohaizi.s1.key1\"\\n          ],\\n          \"rows_examined_per_scan\": 1,  # 查询一次s2表大致需要扫描1条记录\\n          \"rows_produced_per_join\": 968,    # 被驱动表s2的扇出是968（由于后边没有多余的表进行连接，所以这个值也没啥用）\\n          \"filtered\": \"100.00\",     # condition filtering代表的百分比\\n          \\n          # s2表使用索引进行查询的搜索条件\\n          \"index_condition\": \"(`xiaohaizi`.`s1`.`key1` = `xiaohaizi`.`s2`.`key2`)\",\\n          \"cost_info\": {\\n            \"read_cost\": \"968.80\",      # 稍后解释\\n            \"eval_cost\": \"193.76\",      # 稍后解释\\n            \"prefix_cost\": \"3197.16\",   # 单次查询s1、多次查询s2表总共的成本\\n            \"data_read_per_join\": \"1M\"  # 读取的数据量\\n          },\\n          \"used_columns\": [     # 执行查询中涉及到的列\\n            \"id\",\\n            \"key1\",\\n            \"key2\",\\n            \"key3\",\\n            \"key_part1\",\\n            \"key_part2\",\\n            \"key_part3\",\\n            \"common_field\"\\n          ]\\n        }\\n      }\\n    ]\\n  }\\n}\\n1 row in set, 2 warnings (0.00 sec)\\n')])])]),s(\"p\",[e._v(\"我们使用\"),s(\"code\",[e._v(\"#\")]),e._v(\"后边跟随注释的形式为大家解释了\"),s(\"code\",[e._v(\"EXPLAIN FORMAT=JSON\")]),e._v(\"语句的输出内容，但是大家可能有疑问\"),s(\"code\",[e._v('\"cost_info\"')]),e._v(\"里边的成本看着怪怪的，它们是怎么计算出来的？先看\"),s(\"code\",[e._v(\"s1\")]),e._v(\"表的\"),s(\"code\",[e._v('\"cost_info\"')]),e._v(\"部分：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v('\"cost_info\": {\\n    \"read_cost\": \"1840.84\",\\n    \"eval_cost\": \"193.76\",\\n    \"prefix_cost\": \"2034.60\",\\n    \"data_read_per_join\": \"1M\"\\n}\\n')])])]),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"read_cost\")]),e._v(\"是由下边这两部分组成的：\")]),e._v(\" \"),s(\"ul\",[s(\"li\",[s(\"code\",[e._v(\"IO\")]),e._v(\"成本\")]),e._v(\" \"),s(\"li\",[e._v(\"检测\"),s(\"code\",[e._v(\"rows × (1 - filter)\")]),e._v(\"条记录的\"),s(\"code\",[e._v(\"CPU\")]),e._v(\"成本\")])]),e._v(\" \"),s(\"div\",{staticClass:\"language-! extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"小贴士：\\n\\nrows和filter都是我们前边介绍执行计划的输出列，在JSON格式的执行计划中，rows相当于rows_examined_per_scan，filtered名称不变。\\n\")])])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"eval_cost\")]),e._v(\"是这样计算的：\")]),e._v(\" \"),s(\"p\",[e._v(\"检测 \"),s(\"code\",[e._v(\"rows × filter\")]),e._v(\"条记录的成本。\")])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"prefix_cost\")]),e._v(\"就是单独查询\"),s(\"code\",[e._v(\"s1\")]),e._v(\"表的成本，也就是：\")]),e._v(\" \"),s(\"p\",[s(\"code\",[e._v(\"read_cost + eval_cost\")])])]),e._v(\" \"),s(\"li\",[s(\"p\",[s(\"code\",[e._v(\"data_read_per_join\")]),e._v(\"表示在此次查询中需要读取的数据量，我们就不多唠叨这个了。\")])])]),e._v(\" \"),s(\"div\",{staticClass:\"language-! extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"小贴士：\\n\\n大家其实没必要关注MySQL为啥使用这么古怪的方式计算出read_cost和eval_cost，关注prefix_cost是查询s1表的成本就好了。\\n\")])])]),s(\"p\",[e._v(\"对于\"),s(\"code\",[e._v(\"s2\")]),e._v(\"表的\"),s(\"code\",[e._v('\"cost_info\"')]),e._v(\"部分是这样的：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v('\"cost_info\": {\\n    \"read_cost\": \"968.80\",\\n    \"eval_cost\": \"193.76\",\\n    \"prefix_cost\": \"3197.16\",\\n    \"data_read_per_join\": \"1M\"\\n}\\n')])])]),s(\"p\",[e._v(\"由于\"),s(\"code\",[e._v(\"s2\")]),e._v(\"表是被驱动表，所以可能被读取多次，这里的\"),s(\"code\",[e._v(\"read_cost\")]),e._v(\"和\"),s(\"code\",[e._v(\"eval_cost\")]),e._v(\"是访问多次\"),s(\"code\",[e._v(\"s2\")]),e._v(\"表后累加起来的值，大家主要关注里边儿的\"),s(\"code\",[e._v(\"prefix_cost\")]),e._v(\"的值代表的是整个连接查询预计的成本，也就是单次查询\"),s(\"code\",[e._v(\"s1\")]),e._v(\"表和多次查询\"),s(\"code\",[e._v(\"s2\")]),e._v(\"表后的成本的和，也就是：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"968.80 + 193.76 + 2034.60 = 3197.16\\n\")])])]),s(\"h2\",{attrs:{id:\"extented-explain\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#extented-explain\"}},[e._v(\"#\")]),e._v(\" Extented EXPLAIN\")]),e._v(\" \"),s(\"p\",[e._v(\"最后，设计\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"的大叔还为我们留了个彩蛋，在我们使用\"),s(\"code\",[e._v(\"EXPLAIN\")]),e._v(\"语句查看了某个查询的执行计划后，紧接着还可以使用\"),s(\"code\",[e._v(\"SHOW WARNINGS\")]),e._v(\"语句查看与这个查询的执行计划有关的一些扩展信息，比如这样：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"mysql> EXPLAIN SELECT s1.key1, s2.key1 FROM s1 LEFT JOIN s2 ON s1.key1 = s2.key1 WHERE s2.common_field IS NOT NULL;\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+\\n| id | select_type | table | partitions | type | possible_keys | key      | key_len | ref               | rows | filtered | Extra       |\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+\\n|  1 | SIMPLE      | s2    | NULL       | ALL  | idx_key1      | NULL     | NULL    | NULL              | 9954 |    90.00 | Using where |\\n|  1 | SIMPLE      | s1    | NULL       | ref  | idx_key1      | idx_key1 | 303     | xiaohaizi.s2.key1 |    1 |   100.00 | Using index |\\n+----+-------------+-------+------------+------+---------------+----------+---------+-------------------+------+----------+-------------+\\n2 rows in set, 1 warning (0.00 sec)\\n\\nmysql> SHOW WARNINGS\\\\G\\n*************************** 1. row ***************************\\n  Level: Note\\n   Code: 1003\\nMessage: /* select#1 */ select `xiaohaizi`.`s1`.`key1` AS `key1`,`xiaohaizi`.`s2`.`key1` AS `key1` from `xiaohaizi`.`s1` join `xiaohaizi`.`s2` where ((`xiaohaizi`.`s1`.`key1` = `xiaohaizi`.`s2`.`key1`) and (`xiaohaizi`.`s2`.`common_field` is not null))\\n1 row in set (0.00 sec)\\n\")])])]),s(\"p\",[e._v(\"大家可以看到\"),s(\"code\",[e._v(\"SHOW WARNINGS\")]),e._v(\"展示出来的信息有三个字段，分别是\"),s(\"code\",[e._v(\"Level\")]),e._v(\"、\"),s(\"code\",[e._v(\"Code\")]),e._v(\"、\"),s(\"code\",[e._v(\"Message\")]),e._v(\"。我们最常见的就是\"),s(\"code\",[e._v(\"Code\")]),e._v(\"为\"),s(\"code\",[e._v(\"1003\")]),e._v(\"的信息，当\"),s(\"code\",[e._v(\"Code\")]),e._v(\"值为\"),s(\"code\",[e._v(\"1003\")]),e._v(\"时，\"),s(\"code\",[e._v(\"Message\")]),e._v(\"字段展示的信息\"),s(\"span\",{staticStyle:{color:\"red\"}},[e._v(\"类似于\")]),e._v(\"查询优化器将我们的查询语句重写后的语句。比如我们上边的查询本来是一个左（外）连接查询，但是有一个\"),s(\"code\",[e._v(\"s2.common_field IS NOT NULL\")]),e._v(\"的条件，着就会导致查询优化器把左（外）连接查询优化为内连接查询，从\"),s(\"code\",[e._v(\"SHOW WARNINGS\")]),e._v(\"的\"),s(\"code\",[e._v(\"Message\")]),e._v(\"字段也可以看出来，原本的\"),s(\"code\",[e._v(\"LEFT JOIN\")]),e._v(\"已经变成了\"),s(\"code\",[e._v(\"JOIN\")]),e._v(\"。\")]),e._v(\" \"),s(\"p\",[e._v(\"但是大家一定要注意，我们说\"),s(\"code\",[e._v(\"Message\")]),e._v(\"字段展示的信息\"),s(\"span\",{staticStyle:{color:\"red\"}},[e._v(\"类似于\")]),e._v(\"查询优化器将我们的查询语句重写后的语句，并不是等价于，也就是说\"),s(\"code\",[e._v(\"Message\")]),e._v(\"字段展示的信息并不是标准的查询语句，在很多情况下并不能直接拿到黑框框中运行，它只能作为帮助我们理解查\"),s(\"code\",[e._v(\"MySQL\")]),e._v(\"将如何执行查询语句的一个参考依据而已。\")])])}),[],!1,null,null,null);_.default=t.exports}}]);","extractedComments":[]}