{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[289],{647:function(e,n,s){\"use strict\";s.r(n);var t=s(42),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"scrapyd-视图类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#scrapyd-视图类\"}},[e._v(\"#\")]),e._v(\" Scrapyd 视图类\")]),e._v(\" \"),s(\"p\",[e._v(\"在 \"),s(\"a\",{attrs:{href:\"https://juejin.im/book/5bb5d3fa6fb9a05d2a1d819a/section/5bb5ed2ff265da0aa06f08ac\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"Scrapyd 源码目录\"),s(\"OutboundLink\")],1),e._v(\"结构注解中，\"),s(\"code\",[e._v(\"website.py\")]),e._v(\" 代表 Web 视图，\"),s(\"code\",[e._v(\"webservice.py\")]),e._v(\" 代表 JSON 视图。\")]),e._v(\" \"),s(\"p\",[e._v(\"视图是使用者与 Scrapyd 交互的窗口，本小节我们通过阅读源码来理解 Scrapyd 的视图设计。\")]),e._v(\" \"),s(\"h2\",{attrs:{id:\"web-视图\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#web-视图\"}},[e._v(\"#\")]),e._v(\" Web 视图\")]),e._v(\" \"),s(\"p\",[e._v(\"Scrapyd 提供 Web 视图是为了便于使用者监视爬虫运行状态。\"),s(\"code\",[e._v(\"website.py\")]),e._v(\" 中有 3个类，它们分别是：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"1.Root - 根据配置文件初始化项目并设置路由映射关系。\\n2.Home - Scrapyd 的 Web 首页功能实现及页面渲染。\\n3.Jobs - Scrapyd 的 jobs 页面功能实现及页面渲染。\\n\\n\")])])]),s(\"h2\",{attrs:{id:\"root-类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#root-类\"}},[e._v(\"#\")]),e._v(\" Root 类\")]),e._v(\" \"),s(\"p\",[s(\"strong\",[e._v(\"Root 类\")]),e._v(\"的作用大致为根据配置文件对项目进行初始化并设置路由映射关系，其代码如下：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"class Root(resource.Resource):\\n\\n    def __init__(self, config, app):\\n        resource.Resource.__init__(self)\\n        self.debug = config.getboolean('debug', False)\\n        self.runner = config.get('runner')\\n        logsdir = config.get('logs_dir')\\n        itemsdir = config.get('items_dir')\\n        local_items = itemsdir and (urlparse(itemsdir).scheme.lower() in ['', 'file'])\\n        self.app = app\\n        self.nodename = config.get('node_name', socket.gethostname())\\n        self.putChild(b'', Home(self, local_items))\\n        if logsdir:\\n            self.putChild(b'logs', static.File(logsdir.encode('ascii', 'ignore'), 'text/plain'))\\n        if local_items:\\n            self.putChild(b'items', static.File(itemsdir, 'text/plain'))\\n        self.putChild(b'jobs', Jobs(self, local_items))\\n        services = config.items('services', ())\\n        for servName, servClsName in services:\\n          servCls = load_object(servClsName)\\n          self.putChild(servName.encode('utf-8'), servCls(self))\\n        self.update_projects()\\n\\n    def update_projects(self):\\n        self.poller.update_projects()\\n        self.scheduler.update_projects()\\n\\n    @property\\n    def launcher(self):\\n        app = IServiceCollection(self.app, self.app)\\n        return app.getServiceNamed('launcher')\\n\\n    @property\\n    def scheduler(self):\\n        return self.app.getComponent(ISpiderScheduler)\\n\\n    @property\\n    def eggstorage(self):\\n        return self.app.getComponent(IEggStorage)\\n\\n    @property\\n    def poller(self):\\n        return self.app.getComponent(IPoller)\\n\\n\")])])]),s(\"p\",[e._v(\"代码释义： Root 类继承自\"),s(\"code\",[e._v(\"resource.Resource\")]),e._v(\"， 在\"),s(\"code\",[e._v(\"__init__\")]),e._v(\"方法中通过 \"),s(\"code\",[e._v(\"config.get\")]),e._v(\" 读取配置文件中相关配置并赋值给变量，通过 \"),s(\"code\",[e._v(\"putChild\")]),e._v(\" 语法将资源与 URL 进行映射（路由），在 \"),s(\"code\",[e._v(\"update_projects\")]),e._v(\" 方法中更新项目状态。\")]),e._v(\" \"),s(\"h2\",{attrs:{id:\"home-类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#home-类\"}},[e._v(\"#\")]),e._v(\" Home 类\")]),e._v(\" \"),s(\"p\",[s(\"strong\",[e._v(\"Home 类\")]),e._v(\"的作用大致为\"),s(\"code\",[e._v(\"Scrapyd\")]),e._v(\"的\"),s(\"code\",[e._v(\"Web\")]),e._v(\"首页功能实现及页面渲染，其代码大体如下：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v('class Home(resource.Resource):\\n    \\n    def __init__(self, root, local_items):\\n        resource.Resource.__init__(self)\\n        self.root = root\\n        self.local_items = local_items\\n\\n    def render_GET(self, txrequest):\\n        vars = {\\n            \\'projects\\': \\', \\'.join(self.root.scheduler.list_projects())\\n        }\\n        s = \"\"\"\\n        <html>\\n        <head><title>Scrapyd</title></head>\\n        <body>\\n        <h1>Scrapyd</h1>\\n        <p>Available projects: <b>%(projects)s</b></p>\\n        <ul>\\n        <li><a href=\"/jobs\">Jobs</a></li>\\n        \"\"\" % vars\\n                if self.local_items:\\n                    s += \\'<li><a href=\"/items/\">Items</a></li>\\'\\n                s += \"\"\"\\n        ...html ...\\n        \"\"\" % vars\\n        return s.encode(\\'utf-8\\')\\n\\n')])])]),s(\"p\",[e._v(\"代码释义：Home 类继承自 \"),s(\"code\",[e._v(\"resource.Resource\")]),e._v(\"。 在 \"),s(\"code\",[e._v(\"render_GET\")]),e._v(\"方法中，获取项目列表\"),s(\"code\",[e._v(\"self.root.scheduler.list_projects()\")]),e._v(\",然后构造 Web 界面的 HTML 代码。最终将 utf-8 编码的 HTML 代码进行渲染。\")]),e._v(\" \"),s(\"h2\",{attrs:{id:\"jobs-类\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jobs-类\"}},[e._v(\"#\")]),e._v(\" Jobs 类\")]),e._v(\" \"),s(\"p\",[s(\"strong\",[e._v(\"Jobs 类\")]),e._v(\"的作用大致为\"),s(\"code\",[e._v(\"Scrapyd\")]),e._v(\"的\"),s(\"code\",[e._v(\"/jobs\")]),e._v(\"页面的功能实现及页面渲染，其代码大体如下：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"class Jobs(resource.Resource):\\n\\n    def __init__(self, root, local_items):\\n        resource.Resource.__init__(self)\\n        self.root = root\\n        self.local_items = local_items\\n\\n    cancel_button = \\\"\\\"\\\"\\n    form...\\n    \\\"\\\"\\\".format\\n\\n    header_cols = [\\n        'Project', 'Spider',\\n        'Job', 'PID',\\n        'Start', 'Runtime', 'Finish',\\n        'Log', 'Items',\\n        'Cancel',\\n    ]\\n\\n    def gen_css(self):\\n        css...\\n        return '\\\\n'.join(css)\\n\\n    def prep_row(self, cells):\\n        if not isinstance(cells, dict):\\n            assert len(cells) == len(self.header_cols)\\n        else:\\n            cells = [cells.get(k) for k in self.header_cols]\\n        cells = ['<td>%s</td>' % ('' if c is None else c) for c in cells]\\n        return '<tr>%s</tr>' % ''.join(cells)\\n\\n    def prep_doc(self):\\n        return (\\n            html...\\n        )\\n\\n    def prep_table(self):\\n        return (\\n            html-table...\\n        )\\n\\n    def prep_tab_pending(self):\\n        return '\\\\n'.join(\\n            self.prep_row(dict(\\n                Project=project, Spider=m['name'], Job=m['_job'],\\n                Cancel=self.cancel_button(project=project, jobid=m['_job'])\\n            ))\\n            for project, queue in self.root.poller.queues.items()\\n            for m in queue.list()\\n        )\\n\\n    def prep_tab_running(self):\\n        return '\\\\n'.join(\\n            self.prep_row(dict(\\n                ...\\n            ))\\n            for p in self.root.launcher.processes.values()\\n        )\\n\\n    def prep_tab_finished(self):\\n        return '\\\\n'.join(\\n            self.prep_row(dict(\\n                ...\\n            ))\\n            for p in self.root.launcher.finished\\n        )\\n\\n    def render(self, txrequest):\\n        doc = self.prep_doc()\\n        txrequest.setHeader('Content-Type', 'text/html; charset=utf-8')\\n        txrequest.setHeader('Content-Length', len(doc))\\n        return doc.encode('utf-8')\\n\\n\")])])]),s(\"p\",[e._v(\"可以看到，Jobs 继承的也是 \"),s(\"code\",[e._v(\"resource.Resource\")]),e._v(\"。\")]),e._v(\" \"),s(\"p\",[e._v(\"Jobs 中的方法是层级调用的关系，从 render 方法开始，调用\"),s(\"code\",[e._v(\"self.prep_doc()\")]),e._v(\"以获取 HTML 文本，而\"),s(\"code\",[e._v(\"prep_doc\")]),e._v(\"方法则通过调用\"),s(\"code\",[e._v(\"gen_css\")]),e._v(\"和\"),s(\"code\",[e._v(\"prep_table\")]),e._v(\"以获取 CSS 样式及不同状态的爬虫数与爬虫运行记录。所以我们可以绘制出\"),s(\"code\",[e._v(\"website.py\")]),e._v(\"文件中各个类与方法的组织结构图：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/10/11/1666220a646bbba9?w=927&h=636&f=png&s=49153\",alt:\"\"}})]),e._v(\" \"),s(\"h2\",{attrs:{id:\"resource-resource\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#resource-resource\"}},[e._v(\"#\")]),e._v(\" resource.Resource\")]),e._v(\" \"),s(\"p\",[s(\"code\",[e._v(\"resource.Resource\")]),e._v(\" 是 Home 和 Jobs 的父类，它的代码是怎样的？\")]),e._v(\" \"),s(\"p\",[e._v(\"在 PyCharm 中，通过 \"),s(\"code\",[e._v(\"Ctrl/Commond+鼠标左键\")]),e._v(\" 可以跟进代码。我们跟进 Resource，代码如下：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v('@implementer(IResource)\\nclass Resource:\\n    entityType = IResource\\n\\n    server = None\\n\\n    def __init__(self):\\n        \"\"\"\\n        Initialize.\\n        \"\"\"\\n        self.children = {}\\n\\n    isLeaf = 0\\n\\n    ### Abstract Collection Interface\\n\\n    def listStaticNames(self):\\n        return list(self.children.keys())\\n\\n    def listStaticEntities(self):\\n        return list(self.children.items())\\n\\n    def listNames(self):\\n        return list(self.listStaticNames()) + self.listDynamicNames()\\n\\n    def listEntities(self):\\n        return list(self.listStaticEntities()) + self.listDynamicEntities()\\n\\n    def listDynamicNames(self):\\n        return []\\n\\n    def listDynamicEntities(self, request=None):\\n        return []\\n\\n    def getStaticEntity(self, name):\\n        return self.children.get(name)\\n\\n    def getDynamicEntity(self, name, request):\\n        if name not in self.children:\\n            return self.getChild(name, request)\\n        else:\\n            return None\\n\\n    def delEntity(self, name):\\n        del self.children[name]\\n\\n    def reallyPutEntity(self, name, entity):\\n        self.children[name] = entity\\n\\n    # Concrete HTTP interface\\n\\n    def getChild(self, path, request):\\n        \\n        return NoResource(\"No such child resource.\")\\n\\n\\n    def getChildWithDefault(self, path, request):\\n        \\n        if path in self.children:\\n            return self.children[path]\\n        return self.getChild(path, request)\\n\\n\\n    def getChildForRequest(self, request):\\n        warnings.warn(\"Please use module level getChildForRequest.\", DeprecationWarning, 2)\\n        return getChildForRequest(self, request)\\n\\n\\n    def putChild(self, path, child):\\n       \\n        self.children[path] = child\\n        child.server = self.server\\n\\n\\n    def render(self, request):\\n        \\n        m = getattr(self, \\'render_\\' + nativeString(request.method), None)\\n        if not m:\\n            try:\\n                allowedMethods = self.allowedMethods\\n            except AttributeError:\\n                allowedMethods = _computeAllowedMethods(self)\\n            raise UnsupportedMethod(allowedMethods)\\n        return m(request)\\n\\n\\n    def render_HEAD(self, request):\\n       \\n        return self.render_GET(request)\\n\\n\\n')])])]),s(\"p\",[e._v(\"其中我们需要关注的方法有以下几个：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"* putchild - twisted 语法，通过此方法设置路由。\\n* render - 负责页面渲染。\\n* render_HEAD - 将请求转发给 `render_GET`\\n\\n\")])])]),s(\"h2\",{attrs:{id:\"json-视图\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#json-视图\"}},[e._v(\"#\")]),e._v(\" JSON 视图\")]),e._v(\" \"),s(\"p\",[e._v(\"Scrapyd 提供了很多 API，通过 API 的返回信息能够知晓爬虫的运行状态或结果等信息，\"),s(\"code\",[e._v(\"webservice.py\")]),e._v(\"中视图类与父类的继承关系 UML 类图如下：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/10/11/166624a8cbea02e1?w=1006&h=1233&f=png&s=70516\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"以下是各个类的大致功能释义：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v(\"* WsResource - 继承自 JsonResource，是大多数 API 的父类，它默认返回 json 数据。\\n* DaemonStatus - 对应 API 中的daemonstatus.json，用以检查 Scrapyd 服务的爬虫状态及对应数量。\\n* Schedule - 对应 API 中的 schedule.json，用以启动指定的爬虫。\\n* Cancel - 对应 API 中的 cancel.json，用以取消指定的爬虫。\\n* AddVersion - 对应 API 中的 addversion.json，用以为项目添加版本，如果项目不存在则创建项目。\\n* ListProjects - 对应 API 中的 listprojects.json，用以查看当前已部署的项目名称。\\n* ListVersions - 对应 API 中的 listversions.json，用以查看指定项目的版本号。\\n* ListSpiders - 对应 API 中的 listspiders.json，用以查看指定项目的爬虫名称。\\n* ListJobs - 对应 API 中的 listjobs.json，用以查看指定项目下爬虫的运行状态。\\n* DeleteProject - 对应 API 中的 delversion.json，用以删除指定项目的指定版本，版本不存在则删除项目。\\n* DeleteVersion - 对应 API 中的 delproject.json，用以删除指定项目及其已上传的所有版本。\\n\\n\")])])]),s(\"p\",[e._v(\"以及对应的\"),s(\"strong\",[e._v(\"类组织结构图\")]),e._v(\"：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/10/17/1667fca8a2762855?w=1673&h=620&f=png&s=27687\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"可以看到，大多数 API 类继承的是\"),s(\"code\",[e._v(\"WsResource\")]),e._v(\"，并且通过重写 render 方法将数据渲染。\")]),e._v(\" \"),s(\"p\",[e._v(\"在 PyCharm 中，通过\"),s(\"code\",[e._v(\"Ctrl/Commond+鼠标左键\")]),e._v(\"可以跟进代码，我们跟进\"),s(\"code\",[e._v(\"WsResource\")]),e._v(\"：\")]),e._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/10/11/166622e6d4e9e001?w=1337&h=831&f=gif&s=226490\",alt:\"\"}})]),e._v(\" \"),s(\"p\",[e._v(\"代码如下：\")]),e._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[e._v('class WsResource(JsonResource):\\n\\n    def __init__(self, root):\\n        JsonResource.__init__(self)\\n        self.root = root\\n\\n    def render(self, txrequest):\\n        try:\\n            return JsonResource.render(self, txrequest).encode(\\'utf-8\\')\\n        except Exception as e:\\n            if self.root.debug:\\n                return traceback.format_exc().encode(\\'utf-8\\')\\n            log.err()\\n            r = {\"node_name\": self.root.nodename, \"status\": \"error\", \"message\": str(e)}\\n            return self.render_object(r, txrequest).encode(\\'utf-8\\')\\n\\n')])])]),s(\"p\",[e._v(\"它继承自\"),s(\"code\",[e._v(\"JsonResource\")]),e._v(\"并且通过 JsonResource 的\"),s(\"code\",[e._v(\"render\")]),e._v(\"返回\"),s(\"code\",[e._v(\"json\")]),e._v(\" 格式数据，如果报错则返回报错信息，而跟进 \"),s(\"code\",[e._v(\"JsonResource\")]),e._v(\" 发现它其实也是继承自\"),s(\"code\",[e._v(\"resource.Resource\")]),e._v(\"类。所以这里可以得出几个结论：\")]),e._v(\" \"),s(\"ul\",[s(\"li\",[e._v(\"Resource 是 Scrapyd 中视图部分最底层的类，且其 render 默认返回 bytes 类型数据。\")]),e._v(\" \"),s(\"li\",[e._v(\"JsonResource 以及 WsResource 都是通过重写 render 以实现返回 JSON 类型数据。\")]),e._v(\" \"),s(\"li\",[e._v(\"或许可以通过自定义视图类，继承自 Resource，也通过重写 render 方法实现兼容 bytes 与 JSON 的视图类。\")])])])}),[],!1,null,null,null);n.default=r.exports}}]);","extractedComments":[]}