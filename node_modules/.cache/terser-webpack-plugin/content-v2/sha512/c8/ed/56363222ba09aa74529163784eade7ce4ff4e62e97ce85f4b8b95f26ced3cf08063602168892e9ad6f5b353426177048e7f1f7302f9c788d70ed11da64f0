{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{512:function(t,a,e){\"use strict\";e.r(a);var s=e(42),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"开发环境配置\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#开发环境配置\"}},[t._v(\"#\")]),t._v(\" 开发环境配置\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"环境准备\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#环境准备\"}},[t._v(\"#\")]),t._v(\" 环境准备\")]),t._v(\" \"),e(\"ul\",[e(\"li\",[t._v(\"操作系统：支持 macOS，Linux，Windows\")]),t._v(\" \"),e(\"li\",[t._v(\"运行环境：建议选择 \"),e(\"a\",{attrs:{href:\"http://nodejs.org/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"LTS 版本\"),e(\"OutboundLink\")],1),t._v(\"，最低要求 8.x。\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"初始化\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#初始化\"}},[t._v(\"#\")]),t._v(\" 初始化\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"使用脚手架生成-egg-项目\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用脚手架生成-egg-项目\"}},[t._v(\"#\")]),t._v(\" 使用脚手架生成 Egg 项目\")]),t._v(\" \"),e(\"p\",[t._v(\"推荐直接使用脚手架，只需几条简单指令，即可快速生成项目（\"),e(\"code\",[t._v(\"npm >=6.1.0\")]),t._v(\"）:\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"$ mkdir egg-example && cd egg-example\\n$ npm init egg --type=simple\\n$ npm i\\n\\n\")])])]),e(\"p\",[t._v(\"上面这种方式是 egg.js 官方推荐的创建简易项目， 而我们本小册使用 \"),e(\"code\",[t._v(\"Typescript\")]),t._v(\" 开发， 所以我们换种方式：\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"typescript-初始化方式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#typescript-初始化方式\"}},[t._v(\"#\")]),t._v(\" TypeScript 初始化方式\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"$ npm init egg --type=ts\\n$ npm i\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"目录结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#目录结构\"}},[t._v(\"#\")]),t._v(\" 目录结构\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"egg-example\\n\\n    |-- .autod.conf.js\\n    |-- .gitignore\\n    |-- .travis.yml\\n    |-- README.md\\n    |-- appveyor.yml\\n    |-- package-lock.json\\n    |-- package.json\\n    |-- tsconfig.json\\t\\t\\t# 指定了用来编译这个项目的根文件和编译选项\\n    |-- tslint.json\\t\\t\\t\\t# 代码检查\\n    |-- app\\n    |   |-- router.ts\\t\\t\\t# 用于配置 URL 路由规则\\n    |   |-- controller\\t\\t\\t# 用于解析用户的输入，处理后返回相应的结果\\n    |   |   |-- home.ts\\n    |   |-- public\\t\\t\\t\\t# 用于放置静态资源\\n    |   |-- service\\t\\t\\t\\t# 用于编写业务逻辑层\\n    |       |-- Test.ts\\n    |-- config\\t\\t\\t\\t\\t# 用于编写配置文件\\n    |   |-- config.default.ts\\n    |   |-- config.local.ts\\n    |   |-- config.prod.ts\\n    |   |-- plugin.ts\\t\\t\\t# 用于配置需要加载的插件\\n    |-- test\\t\\t\\t\\t\\t# 用于单元测试\\n    |   |-- app\\n    |       |-- controller\\n    |       |   |-- home.test.ts\\n    |       |-- service\\n    |           |-- Test.test.ts\\n    |-- typings\\t\\t\\t\\t\\t# 目录用于放置 d.ts 文件\\n        |-- index.d.ts\\n\\n\")])])]),e(\"p\",[t._v(\"Egg API 项目中，一般都会包括这些功能项：路由文件、控制器目录、逻辑层目录。这些都在上述的代码结构中有列出，这是典型的 MVC 架构。新加功能时将代码放入对应功能的目录/文件中，可以使整个项目代码结构更加清晰，非常有利于后期的查找和维护。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"mvc\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mvc\"}},[t._v(\"#\")]),t._v(\" MVC\")]),t._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://baike.baidu.com/item/MVC\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"MVC\"),e(\"OutboundLink\")],1),t._v(\" 全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"安装插件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装插件\"}},[t._v(\"#\")]),t._v(\" 安装插件\")]),t._v(\" \"),e(\"p\",[t._v(\"插件机制是Egg框架的一大特色，形成了egg 的繁荣的生态圈，接下来我们就来安装我们本次项目的第一个插件。\")]),t._v(\" \"),e(\"p\",[t._v(\"由于我们后续的实战是基于 \"),e(\"code\",[t._v(\"TypeScript\")]),t._v(\" 的，所以在这里我选择了一个支持 \"),e(\"code\",[t._v(\"TypeScript\")]),t._v(\" 的包 \"),e(\"a\",{attrs:{href:\"https://www.npmjs.com/package/@switchdog/egg-graphql\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"@switchdog/egg-graphql\"),e(\"OutboundLink\")],1),t._v(\" 。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"$ npm i --save @switchdog/egg-graphql\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"开启插件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#开启插件\"}},[t._v(\"#\")]),t._v(\" 开启插件\")]),t._v(\" \"),e(\"p\",[t._v(\"在 \"),e(\"code\",[t._v(\"config/plugin.ts\")]),t._v(\" 下告诉 egg 开启哪些插件：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"graphql: {\\n    enable: true,\\n    package: '@switchdog/egg-graphql',\\n},\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"配置插件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配置插件\"}},[t._v(\"#\")]),t._v(\" 配置插件\")]),t._v(\" \"),e(\"p\",[t._v(\"通常插件都会有一些配置项，在\"),e(\"code\",[t._v(\"/config/config.default.ts\")]),t._v(\"中配置即可：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"config.graphql = {\\n    router: '/graphql',\\n    // 是否加载到 app 上，默认开启\\n    app: true,\\n    // 是否加载到 agent 上，默认关闭\\n    agent: false,\\n    // 是否加载开发者工具 graphiql, 默认开启。路由同 router 字段。使用浏览器打开该可见。\\n    graphiql: true,\\n    apolloServerOptions: {\\n      tracing: true, // 设置为true时，以Apollo跟踪格式收集和公开跟踪数据\\n      debug: true, // 一个布尔值，如果发生执行错误，它将打印其他调试日志记录\\n    },\\n  };\\n\\n\")])])]),e(\"p\",[t._v(\"在中间件中开启 \"),e(\"code\",[t._v(\"graphql\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"config.middleware = [ 'graphql' ];\\n\\n\")])])]),e(\"p\",[t._v(\"配置完成之后，每个落到 \"),e(\"code\",[t._v(\"/graphql\")]),t._v(\"的请求都会触发 GraphQL Schema 的查询。\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"graphql-代码结构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#graphql-代码结构\"}},[t._v(\"#\")]),t._v(\" GraphQL 代码结构\")]),t._v(\" \"),e(\"p\",[t._v(\"graphql 目录下，有 \"),e(\"strong\",[t._v(\"4\")]),t._v(\" 种代码，分别是：\"),e(\"strong\",[e(\"code\",[t._v(\"common\")]),t._v(\" 全局类型定义\")]),t._v(\"、\"),e(\"strong\",[e(\"code\",[t._v(\"query\")]),t._v(\" 查询代码\")]),t._v(\"、**\"),e(\"code\",[t._v(\"mutation\")]),t._v(\" 更新操作代码 **和 \"),e(\"strong\",[e(\"code\",[t._v(\"resolver\")]),t._v(\"业务实现代码\")]),t._v(\"。\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\".\\n├── graphql                       | graphql 代码\\n│   ├── common                    | 通用类型定义\\n│   │   ├── resolver.js           | 合并所有全局类型定义\\n│   │   ├── scalars               | 自定义类型定义\\n│   │   │   └── date.js           | 日期类型实现\\n│   │   └── schema.graphql        | schema 定义\\n│   ├── mutation                  | 所有的更新\\n│   │   └── schema.graphql        | schema 定义\\n│   ├── query                     | 所有的查询\\n│   │   └── schema.graphql        | schema 定义\\n│   └── user                      | 用户业务\\n│       ├── connector.js          | 连接数据服务\\n│       ├── resolver.js           | 类型实现\\n│       └── schema.graphql        | schema 定义\\n\\n\")])])]),e(\"blockquote\",[e(\"p\",[t._v(\"tips: 在这只是为大家展示，请不要在开始就创建user目录，后边教程用到时再创建，不然会报错。\")])]),t._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708a6a1d7538698?w=287&h=368&f=png&s=17195\",alt:\"\"}})]),t._v(\" \"),e(\"h2\",{attrs:{id:\"cors-跨域访问\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#cors-跨域访问\"}},[t._v(\"#\")]),t._v(\" CORS 跨域访问\")]),t._v(\" \"),e(\"p\",[e(\"code\",[t._v(\"CORS\")]),t._v(\"，常被大家称之为跨域问题，准确的叫法是跨域资源共享**（CORS，Cross-origin resource sharing）**，是W3C标准，是一种机制，它使用额外的HTTP头来告诉浏览器 让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。\")]),t._v(\" \"),e(\"p\",[t._v(\"我们先来安装 \"),e(\"code\",[t._v(\"egg-cors\")])]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"# npm i egg-cors --save\\n\\n\")])])]),e(\"p\",[t._v(\"开启 \"),e(\"code\",[t._v(\"/config/plugin.ts\")]),t._v(\"：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"cors: {\\n    enable: true,\\n    package: 'egg-cors',\\n},\\n\\n\")])])]),e(\"p\",[t._v(\"配置 \"),e(\"code\",[t._v(\"/config/config.default.ts\")]),t._v(\"：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"config.cors = {\\n    origin: '*', \\n    allowMethods: 'GET,HEAD,PUT,POST,DELETE,PATCH',\\n};\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"csrf\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#csrf\"}},[t._v(\"#\")]),t._v(\" CSRF\")]),t._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://links.jianshu.com/go?to=https%3A%2F%2Fwww.owasp.org%2Findex.php%2FCSRF\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"CSRF\"),e(\"OutboundLink\")],1),t._v(\"（Cross-site request forgery）跨站请求伪造，也被称为 One Click Attack 或者 Session Riding，通常缩写为 CSRF 或者 XSRF，是一种对网站的恶意利用。\")]),t._v(\" \"),e(\"p\",[t._v(\"使用 \"),e(\"code\",[t._v(\"graphql\")]),t._v(\" 或 \"),e(\"code\",[t._v(\"rest\")]),t._v(\" 端点时，实际上不必担心使用 \"),e(\"code\",[t._v(\"CSRF\")]),t._v(\" 保护。对服务的请求应该是无状态的，并且不真正依赖Cookie或会话数据。\")]),t._v(\" \"),e(\"p\",[t._v(\"关闭 \"),e(\"code\",[t._v(\"/config/config.default.ts\")]),t._v(\"：\")]),t._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[t._v(\"config.security = {\\n    csrf: {\\n      ignore: () => true,\\n    },\\n};\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"小结\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[t._v(\"#\")]),t._v(\" 小结\")]),t._v(\" \"),e(\"p\",[t._v(\"本节介绍了项目的初始化，egg.js 项目的目录结构以及 \"),e(\"code\",[t._v(\"graphql\")]),t._v(\" 的目录结构。知道了egg.js 框架是 \"),e(\"code\",[t._v(\"MVC\")]),t._v(\" 的形式，并了解了什么是 MVC。以及在如何在 egg.js 框架中安装和使用第三方包。\")])])}),[],!1,null,null,null);a.default=r.exports}}]);","extractedComments":[]}