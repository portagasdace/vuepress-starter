{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[314],{670:function(n,t,e){\"use strict\";e.r(t);var s=e(42),a=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[e(\"blockquote\",[e(\"p\",[n._v(\"本节代码对应 GitHub 分支: chapter7\")])]),n._v(\" \"),e(\"p\",[e(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter6\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"仓库传送门\"),e(\"OutboundLink\")],1)]),n._v(\" \"),e(\"h2\",{attrs:{id:\"改造路由\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#改造路由\"}},[n._v(\"#\")]),n._v(\" 改造路由\")]),n._v(\" \"),e(\"p\",[n._v(\"第一步当然是路由的准备工作。\")]),n._v(\" \"),e(\"p\",[n._v(\"在 routes/index.js 中，添加如下：\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('import Singer from \\'../application/Singer\\';\\n\\n//...\\n{\\n  path: \"/singers\",\\n  component: Singers,\\n  key: \"singers\",\\n  routes: [\\n    {\\n      path: \"/singers/:id\",\\n      component: Singer\\n    }\\n  ]\\n}\\n\\n')])])]),e(\"p\",[n._v(\"当然，我们需要新建 Singer 文件夹，其中的 index.js 如下：\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"import React from 'react';\\n\\nfunction Singer (props) {\\n  return (\\n    <div>Singer</div>\\n  )\\n}\\n\\nexport default Singer;\\n\\n\")])])]),e(\"p\",[n._v(\"接下来我们需要在以前的歌手列表组件中添加以下跳转逻辑：\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('const enterDetail = (id)  => {\\n  props.history.push (`/singers/${id}`);\\n};\\n\\n//...\\n<ListItem key={item.accountId+\"\"+index} onClick={() => enterDetail (item.id)}>\\n\\n')])])]),e(\"p\",[n._v(\"当然，不要忘了这一句，否则作为子路由下的 Singer 组件无法渲染:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"//Singers/index.js\\nimport { renderRoutes } from 'react-router-config';\\n\\n//...\\nreturn (\\n  <div>\\n    //...\\n    { renderRoutes (props.route.routes) }\\n  </div> \\n)\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"路由跳转动画\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#路由跳转动画\"}},[n._v(\"#\")]),n._v(\" 路由跳转动画\")]),n._v(\" \"),e(\"p\",[n._v(\"由于之前详细拆解过，这里就不着重介绍了。\")]),n._v(\" \"),e(\"p\",[n._v(\"仍然是利用 react-transition-group。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('import React, { useState } from \"react\";\\nimport { CSSTransition } from \"react-transition-group\";\\nimport { Container } from \"./style\";\\n\\nfunction Singer (props) {\\n  const [showStatus, setShowStatus] = useState (true);\\n\\n  return (\\n    <CSSTransition\\n      in={showStatus}\\n      timeout={300}\\n      classNames=\"fly\"\\n      appear={true}\\n      unmountOnExit\\n      onExited={() => props.history.goBack ()}\\n    >\\n      <Container>\\n      </Container>\\n    </CSSTransition>\\n  )\\n}\\n\\nexport default Singer;\\n\\n')])])]),e(\"p\",[n._v(\"样式组件代码 style.js 现在构建如下:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"import styled from'styled-components';\\nimport style from '../../assets/global-style';\\n\\nexport const Container = styled.div`\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: ${props => props.play > 0 ? \\\"60px\\\": 0};\\n  width: 100%;\\n  z-index: 100;\\n  overflow: hidden;\\n  background: #f2f3f4;\\n  transform-origin: right bottom;\\n  &.fly-enter, &.fly-appear {\\n    transform: rotateZ (30deg) translate3d (100%, 0, 0);\\n  }\\n  &.fly-enter-active, &.fly-appear-active {\\n    transition: transform .3s;\\n    transform: rotateZ (0deg) translate3d (0, 0, 0);\\n  }\\n  &.fly-exit {\\n    transform: rotateZ (0deg) translate3d (0, 0, 0);\\n  }\\n  &.fly-exit-active {\\n    transition: transform .3s;\\n    transform: rotateZ (30deg) translate3d (100%, 0, 0);\\n  }\\n`\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"核心布局开发\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#核心布局开发\"}},[n._v(\"#\")]),n._v(\" 核心布局开发\")]),n._v(\" \"),e(\"p\",[n._v(\"前方高能预警！\")]),n._v(\" \"),e(\"p\",[n._v(\"大家现在看线上的最终效果可能会感觉整个页面的布局和交互是非常流畅的，但殊不知，这背后凝结着诸多的技巧和细节的考量。你所看到的流畅的，其实是开发者背后无数的心血！之前的大部分布局一带而过，但是这部分的布局非常关键，格外重点拆解。相信大家跟着做下来一定会积累不少布局经验和技巧。\")]),n._v(\" \"),e(\"p\",[n._v(\"首先 mock 数据如下：\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('const artist = {\\n  picUrl: \"https://p2.music.126.net/W__FCWFiyq0JdPtuLJoZVQ==/109951163765026271.jpg\",\\n  name: \"薛之谦\",\\n  hotSongs: [\\n    {\\n      name: \"我好像在哪见过你\",\\n      ar: [{name: \"薛之谦\"}],\\n      al: {\\n        name: \"薛之谦专辑\"\\n      }\\n    },\\n    {\\n      name: \"我好像在哪见过你\",\\n      ar: [{name: \"薛之谦\"}],\\n      al: {\\n        name: \"薛之谦专辑\"\\n      }\\n    },\\n    // 省略 20 条\\n  ]\\n}\\n\\n')])])]),e(\"p\",[n._v(\"返回的 JSX 结构如下:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('<CSSTransition\\n  in={showStatus}\\n  timeout={300}\\n  classNames=\"fly\"\\n  appear={true}\\n  unmountOnExit\\n  onExited={() => props.history.goBack ()}\\n>\\n  <Container>\\n    <Header title={\"头部\"}></Header>\\n    <ImgWrapper bgUrl={artist.picUrl}>\\n      <div className=\"filter\"></div>\\n    </ImgWrapper>\\n    <CollectButton>\\n      <i className=\"iconfont\">&#xe62d;</i>\\n      <span className=\"text\"> 收藏 </span>\\n    </CollectButton>\\n    <BgLayer></BgLayer>\\n    <SongListWrapper>\\n      // 歌曲列表部分，待会专门拆解\\n    </SongListWrapper>\\n  </Container>\\n</CSSTransition>\\n\\n')])])]),e(\"p\",[n._v(\"对应 style.js 中的各个样式组件代码如下，之后样式组件大家自行引入 index.js 中：\")]),n._v(\" \"),e(\"p\",[n._v(\"ImgWrapper 中有一个比较特殊的处理，将图片设为这个容器的背景，然后里面放置跟容器一样大的 div，这个 div 颜色偏深，来对图片的色调进行修饰。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"export const ImgWrapper = styled.div`\\n  position: relative;\\n  width: 100%;\\n  height: 0;\\n  padding-top: 75%;\\n  transform-origin: top;\\n  background: url (${props => props.bgUrl});\\n  background-size: cover;\\n  z-index: 50;\\n  .filter {\\n    position: absolute;\\n    top: 0;\\n    left: 0;\\n    width: 100%;\\n    height: 100%;\\n    background: rgba (7, 17, 27, 0.3);\\n  }\\n`\\n\\n\")])])]),e(\"p\",[n._v(\"CollectButton 即收藏的按钮，相对于 Container 绝对定位，以 left、right 各为 0，margin 设为 auto 的方式实现水平居中。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('export const CollectButton = styled.div`\\n  position: absolute;\\n  left: 0; right: 0;\\n  margin: auto;\\n  box-sizing: border-box;\\n  width: 120px;\\n  height: 40px;\\n  margin-top: -55px;\\n  z-index:50;\\n  background: ${style [\"theme-color\"]};\\n  color: ${style [\"font-color-light\"]};\\n  border-radius: 20px;\\n  text-align: center;\\n  font-size: 0;\\n  line-height: 40px;\\n  .iconfont {\\n    display: inline-block;\\n    margin-right: 10px;\\n    font-size: 12px;\\n    vertical-align: 1px;\\n  }\\n  .text {\\n    display: inline-block;\\n    font-size:14px;\\n    letter-spacing: 5px;\\n  }\\n`\\n\\n')])])]),e(\"p\",[n._v(\"歌曲列表容器，比较简单。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"export const SongListWrapper = styled.div`\\n  position: absolute;\\n  z-index: 50;\\n  top: 0;\\n  left: 0;\\n  bottom: 0;\\n  right: 0;\\n  >div {\\n    position: absolute;\\n    left: 0;\\n    width: 100%;\\n    overflow: visible;\\n  }\\n`\\n\\n\")])])]),e(\"p\",[n._v(\"白色背景遮罩，是本部分的亮点。等会把歌曲列表开发完成就能体会到它的用处了。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"export const BgLayer = styled.div`\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  width: 100%;\\n  background: white;\\n  border-radius: 10px;\\n  z-index: 50;\\n`\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"歌曲列表组件重构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#歌曲列表组件重构\"}},[n._v(\"#\")]),n._v(\" 歌曲列表组件重构\")]),n._v(\" \"),e(\"p\",[n._v(\"之前在推荐歌单部分，我们用到了歌曲列表，这里我们可以把这样的列表抽离出来，做一下组件的复用。\")]),n._v(\" \"),e(\"p\",[n._v(\"application 目录下新建 SongList 组件 (由于之后和播放器组件的数据交互较多，我们放到 application 目录)\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('import React from \\'react\\';\\nimport { SongList, SongItem } from \"./style\";\\nimport { getName } from \\'../../api/utils\\';\\n\\nconst SongsList = React.forwardRef ((props, refs)=> {\\n\\n  const { collectCount, showCollect, songs } = props;\\n\\n  const totalCount = songs.length;\\n\\n  const selectItem = (e, index) => {\\n    console.log (index);\\n  }\\n\\n  let songList = (list) => {\\n    let res = [];\\n    for (let i = 0; i < list.length; i++) {\\n      let item = list [i];\\n      res.push (\\n        <li key={item.id} onClick={(e) => selectItem (e, i)}>\\n          <span className=\"index\">{i + 1}</span>\\n          <div className=\"info\">\\n            <span>{item.name}</span>\\n            <span>\\n              { item.ar ? getName (item.ar): getName (item.artists) } - { item.al ? item.al.name : item.album.name}\\n            </span>\\n          </div>\\n        </li>\\n      )\\n    }\\n    return res;\\n  };\\n\\n  const collect = (count) => {\\n    return  (\\n      <div className=\"add_list\">\\n        <i className=\"iconfont\">&#xe62d;</i>\\n        <span > 收藏 ({Math.floor (count/1000)/10} 万)</span>\\n      </div>\\n    )\\n  };\\n  return (\\n    <SongList ref={refs} showBackground={props.showBackground}>\\n      <div className=\"first_line\">\\n        <div className=\"play_all\" onClick={(e) => selectItem (e, 0)}>\\n          <i className=\"iconfont\">&#xe6e3;</i>\\n          <span > 播放全部 <span className=\"sum\">(共 {totalCount} 首)</span></span>\\n        </div>\\n        { showCollect ? collect (collectCount) : null}\\n      </div>\\n      <SongItem>\\n        { songList (songs) }\\n      </SongItem>\\n    </SongList>\\n  )\\n});\\n\\nexport default React.memo (SongsList);\\n\\n')])])]),e(\"p\",[n._v(\"它的样式代码之前已经写过了，不过有一些参数的处理，稍作修改如下:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('import styled from\\'styled-components\\';\\nimport style from \\'../../assets/global-style\\';\\n\\nexport const SongList = styled.div`\\n  border-radius: 10px;\\n  opacity: 0.98;\\n  // 注意在这里背景改为自配置参数控制\\n  ${props => props.showBackground ? `background: ${style [\"highlight-background-color\"]}`: \"\"}\\n  .first_line {\\n    box-sizing: border-box;\\n    padding: 10px 0;\\n    margin-left: 10px;\\n    position: relative;\\n    justify-content: space-between;\\n    border-bottom: 1px solid ${style [\"border-color\"]};\\n    .play_all {\\n      display: inline-block;\\n      line-height: 24px;\\n      color: ${style [\"font-color-desc\"]};\\n      .iconfont {\\n        font-size: 24px;\\n        margin-right: 10px;\\n        vertical-align: top;\\n      }\\n      .sum {\\n        font-size: ${style [\"font-size-s\"]};\\n        color: ${style [\"font-color-desc-v2\"]};\\n      }\\n      >span {\\n        vertical-align: top;\\n      }\\n    }\\n    .add_list,.isCollected {\\n      display: flex;\\n      align-items: center;\\n      position: absolute;\\n      right: 0; top :0; bottom: 0;\\n      width: 130px;\\n      line-height: 34px;\\n      background: ${style [\"theme-color\"]};\\n      color: ${style [\"font-color-light\"]};\\n      font-size: 0;\\n      border-radius: 3px;\\n      vertical-align: top;\\n      .iconfont {\\n        vertical-align: top;\\n        font-size: 10px;\\n        margin: 0 5px 0 10px;\\n      }\\n      span {\\n        font-size: 14px;\\n        line-height: 34px;\\n      }\\n    }\\n    .isCollected {\\n      display: flex;\\n      background: ${style [\"background-color\"]};\\n      color: ${style [\"font-color-desc\"]};\\n    }\\n}\\n`\\nexport const SongItem = styled.ul`\\n  >li {\\n    display: flex;\\n    height: 60px;\\n    align-items: center;  \\n    .index {\\n      flex-basis: 60px;\\n      width: 60px;\\n      height: 60px;\\n      line-height: 60px;\\n      text-align: center;\\n    }\\n    .info {\\n      box-sizing: border-box;\\n      flex: 1;\\n      display: flex;\\n      height: 100%;\\n      padding: 5px 0;\\n      flex-direction: column;\\n      justify-content: space-around;\\n      border-bottom: 1px solid ${style [\"border-color\"]};\\n      ${style.noWrap ()}\\n      >span {\\n        ${style.noWrap ()}\\n      }\\n      >span:first-child {\\n        color: ${style [\"font-color-desc\"]};\\n      }\\n      >span:last-child {\\n        font-size: ${style [\"font-size-s\"]};\\n        color: #bba8a8;\\n      }\\n    }\\n  }\\n`\\n\\n')])])]),e(\"p\",[n._v(\"当然组件封装之后，可以在原来的歌单详情中复用，这里我偷个懒，让大家下去自己完成，相信对现在的你而言也是非常容易的事情了。\")]),n._v(\" \"),e(\"h2\",{attrs:{id:\"关于-ui-的代码整理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#关于-ui-的代码整理\"}},[n._v(\"#\")]),n._v(\" 关于 UI 的代码整理\")]),n._v(\" \"),e(\"p\",[n._v(\"首先亮出 Singer 组件目前的代码:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('import React, { useState, useEffect, useRef, useCallback } from \"react\";\\nimport { CSSTransition } from \"react-transition-group\";\\nimport { Container } from \"./style\";\\nimport { ImgWrapper, CollectButton, SongListWrapper, BgLayer } from \"./style\";\\nimport Header from \"../../baseUI/header/index\";\\nimport Scroll from \"../../baseUI/scroll/index\";\\nimport SongsList from \"../SongsList\";\\n\\nfunction Singer (props) {\\n  const [showStatus, setShowStatus] = useState (true);\\n\\n  const artist = {\\n    picUrl: \"https://p2.music.126.net/W__FCWFiyq0JdPtuLJoZVQ==/109951163765026271.jpg\",\\n    name: \"薛之谦\",\\n    hotSongs: [\\n      {\\n        name: \"我好像在哪见过你\",\\n        ar: [{name: \"薛之谦\"}],\\n        al: {\\n          name: \"薛之谦专辑\"\\n        }\\n      },\\n      {\\n        name: \"我好像在哪见过你\",\\n        ar: [{name: \"薛之谦\"}],\\n        al: {\\n          name: \"薛之谦专辑\"\\n        }\\n      // 省略 20 条\\n    ]\\n  };\\n\\n  return (\\n    <CSSTransition\\n      in={showStatus}\\n      timeout={300}\\n      classNames=\"fly\"\\n      appear={true}\\n      unmountOnExit\\n      onExited={() => props.history.goBack ()}\\n    >\\n      <Container>\\n        <Header title={\"头部\"}></Header>\\n        <ImgWrapper bgUrl={artist.picUrl}>\\n          <div className=\"filter\"></div>\\n        </ImgWrapper>\\n        <CollectButton>\\n          <i className=\"iconfont\">&#xe62d;</i>\\n          <span className=\"text\"> 收藏 </span>\\n        </CollectButton>\\n        {/* <BgLayer></BgLayer> */}\\n        <SongListWrapper>\\n          <Scroll>\\n            <SongsList\\n              songs={artist.hotSongs}\\n              showCollect={false}\\n            ></SongsList>\\n          </Scroll>\\n        </SongListWrapper>\\n      </Container>\\n    </CSSTransition>\\n  )\\n}\\n\\nexport default Singer;\\n\\n')])])]),e(\"p\",[n._v(\"接下来以此为基础来进行渐进式开发。\")]),n._v(\" \"),e(\"p\",[n._v(\"由于歌曲列表是相对于 Container 绝对定位且 top 为 0，因此初始化时，我们将歌曲列表的 top 设置为整个图片的高度，正好处在图片下方，不然列表就会与图片重叠。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('// 记得引入相关 hooks 函数，下不赘述\\n\\n//...\\n\\nconst collectButton = useRef ();\\nconst imageWrapper = useRef ();\\nconst songScrollWrapper = useRef ();\\nconst songScroll = useRef ();\\nconst header = useRef ();\\nconst layer = useRef ();\\n// 图片初始高度\\nconst initialHeight = useRef (0);\\n\\n// 往上偏移的尺寸，露出圆角\\nconst OFFSET = 5;\\n\\nuseEffect (() => {\\n  let h = imageWrapper.current.offsetHeight;\\n  songScrollWrapper.current.style.top = `${h - OFFSET} px`;\\n  initialHeight.current = h;\\n  // 把遮罩先放在下面，以裹住歌曲列表\\n  layer.current.style.top = `${h - OFFSET} px`;\\n  songScroll.current.refresh ();\\n  //eslint-disable-next-line\\n}, []);\\n\\nconst setShowStatusFalse = useCallback (() => {\\n  setShowStatus (false);\\n}, []);\\n\\n//JSX\\n<Container>\\n  <Header\\n    handleClick={setShowStatusFalse}\\n    title={artist.name}\\n    ref={header}\\n  ></Header>\\n  <ImgWrapper ref={imageWrapper} bgUrl={artist.picUrl}>\\n    <div className=\"filter\"></div>\\n  </ImgWrapper>\\n  <CollectButton ref={collectButton}>\\n    <i className=\"iconfont\">&#xe62d;</i>\\n    <span className=\"text\"> 收藏 </span>\\n  </CollectButton>\\n  <BgLayer ref={layer}></BgLayer>\\n  <SongListWrapper ref={songScrollWrapper}>\\n    <Scroll ref={songScroll}>\\n      <SongsList\\n        songs={artist.hotSongs}\\n        showCollect={false}\\n      ></SongsList>\\n    </Scroll>\\n  </SongListWrapper>\\n</Container>\\n\\n')])])]),e(\"p\",[n._v('好，现在静态页面的部分已经开发的差不多了。但是作为一个精美的 web 应用，绝不是仅仅靠布局就能体现 \"精美\" 二字的。接下来，我们就来完成略微有些复杂的以 JS 为主的交互逻辑。')])])}),[],!1,null,null,null);t.default=a.exports}}]);","extractedComments":[]}