{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{394:function(n,t,e){\"use strict\";e.r(t);var a=e(42),v=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"使你的随机粒子动起来\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使你的随机粒子动起来\"}},[n._v(\"#\")]),n._v(\" 使你的随机粒子动起来\")]),n._v(\" \"),e(\"p\",[n._v(\"在第 5 节，我们使用 js + Canvas 一起制作了随机粒子特效，那么怎么才能使你的随机粒子动起来呢？本节就跟我一起来试一试吧 (๑´ㅂ`๑)\")]),n._v(\" \"),e(\"h2\",{attrs:{id:\"animate-函数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#animate-函数\"}},[n._v(\"#\")]),n._v(\" \"),e(\"code\",[n._v(\"animate()\")]),n._v(\" 函数\")]),n._v(\" \"),e(\"p\",[n._v(\"本节的代码是在第 5 节代码的基础上完成的，在第 5 节我们已经实现了随机粒子的效果，本节的目标是能够让粒子动起来。\")]),n._v(\" \"),e(\"p\",[n._v(\"其实，Canvas 制作动画是一个不断擦除再重绘的过程，跟最原始实现动画的方式类似。在纸片上画每一帧，然后以很快的速度翻动小本本，就会有动画的效果。\")]),n._v(\" \"),e(\"p\",[n._v(\"现在我们实现动画需要在很短的时间内不断的清除内容再重新绘制，新的图形和原先清除的图形之间有某种位置关系，速度足够快的话，我们就会看到动画的效果。\")]),n._v(\" \"),e(\"p\",[n._v(\"所以我们需要一个 \"),e(\"code\",[n._v(\"animate()\")]),n._v(\" 函数，这个函数的作用是帮助我们形成动画，我们在这个函数中首先需要清除当前屏幕，这里的清除函数用到的是 \"),e(\"code\",[n._v(\"content.clearRect()\")]),n._v(\" 方法。\")]),n._v(\" \"),e(\"p\",[n._v(\"我们先来看一下 canvas 的 \"),e(\"code\",[n._v(\"content.clearRect()\")]),n._v(\" 方法：\")]),n._v(\" \"),e(\"p\",[e(\"code\",[n._v(\"context.clearRect(x,y,width,height);\")])]),n._v(\" \"),e(\"ul\",[e(\"li\",[n._v(\"x：要清除的矩形左上角的 x 坐标\")]),n._v(\" \"),e(\"li\",[n._v(\"y：要清除的矩形左上角的 y 坐标\")]),n._v(\" \"),e(\"li\",[n._v(\"width：要清除的矩形的宽度，以像素计\")]),n._v(\" \"),e(\"li\",[n._v(\"height：要清除的矩形的高度，以像素计\")])]),n._v(\" \"),e(\"p\",[n._v(\"在刚刚的分析中可以得出，我们需要清除的区域是整个屏幕，所以 \"),e(\"code\",[n._v(\"content.clearRect()\")]),n._v(\" 的参数就是 \"),e(\"code\",[n._v(\"content.clearRect(0, 0, WIDTH, HEIGHT);\")]),n._v(\"，这里我们就用到了之前获取的屏幕宽度和高度的常量：\"),e(\"code\",[n._v(\"WIDTH\")]),n._v(\" 和 \"),e(\"code\",[n._v(\"HEIGHT\")]),n._v(\"。这样我们就将屏幕上的所有内容都清除了。\")]),n._v(\" \"),e(\"p\",[n._v(\"清除了屏幕内容之后我们就要重新绘制图形，重新绘制的图形是需要和原图形之间有一定的关系，我们先制作一个简单的效果 —— 粒子匀速上升。粒子匀速上升，也就是 y 坐标在不断地变化，既然是匀速的，那么也就是在相同的时间位移是相同的。\")]),n._v(\" \"),e(\"p\",[n._v(\"我们将粒子位移的变化函数 \"),e(\"code\",[n._v(\"move()\")]),n._v(\" 写在 \"),e(\"code\",[n._v(\"Round_item\")]),n._v(\" 的原型上。稍后我们再实现。\")]),n._v(\" \"),e(\"p\",[n._v(\"重新绘制完图形之后，我们就完成了清除屏幕内容再重新绘制新的图形的任务。那么还需要有一个步骤 —— “ 不断”，要想实现动画的效果，就需要 “不断” 地进行清除再重绘，并且中间间隔的时间还不能过长。\")]),n._v(\" \"),e(\"p\",[n._v(\"这时你可能会想到使用 js 的 \"),e(\"code\",[n._v(\"setTimeout()\")]),n._v(\" 方法，但是 \"),e(\"code\",[n._v(\"setTimeout\")]),n._v(\" 和 \"),e(\"code\",[n._v(\"setInterval\")]),n._v(\" 的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器 UI 线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行。\")]),n._v(\" \"),e(\"p\",[n._v(\"我们需要使用另外一个函数 —— \"),e(\"code\",[n._v(\"requestAnimationFrame()\")]),n._v(\" 。\")]),n._v(\" \"),e(\"blockquote\",[e(\"p\",[e(\"code\",[n._v(\"window.requestAnimationFrame()\")]),n._v(\" 方法告诉浏览器，你希望执行动画，并请求浏览器调用指定的函数在下一次重绘之前更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。\")])]),n._v(\" \"),e(\"p\",[e(\"code\",[n._v(\"requestAnimationFrame()\")]),n._v(\" 函数可以说是专门用来写动画的。那么 \"),e(\"code\",[n._v(\"requestAnimationFrame()\")]),n._v(\" 有什么优点呢？\")]),n._v(\" \"),e(\"blockquote\",[e(\"p\",[n._v(\"编写动画循环的关键是要知道延迟时间多长合适。一方面，循环间隔必须足够短，这样才能让不同的动画效果显得平滑流畅；另一方面，循环间隔还要足够长，这样才能确保浏览器有能力渲染产生的变化。\")]),n._v(\" \"),e(\"p\",[n._v(\"大多数电脑显示器的刷新频率是 60Hz，大概相当于每秒钟重绘 60 次。大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘频率，因为即使超过那个频率用户体验也不会有提升。因此，最平滑动画的最佳循环间隔是 1000ms/60，约等于 16.6ms。\")]),n._v(\" \"),e(\"p\",[e(\"code\",[n._v(\"requestAnimationFrame\")]),n._v(\" 采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。\")])]),n._v(\" \"),e(\"p\",[n._v(\"所以我们就使用 \"),e(\"code\",[n._v(\"requestAnimationFrame()\")]),n._v(\" 函数递归的调用 \"),e(\"code\",[n._v(\"animate()\")]),n._v(\" 函数来实现动画的效果。\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"    function animate() {\\n        content.clearRect(0, 0, WIDTH, HEIGHT);\\n\\n        for (var i in round) {\\n            round[i].move();\\n        }\\n        requestAnimationFrame(animate);\\n    }\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"创建-move-函数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建-move-函数\"}},[n._v(\"#\")]),n._v(\" 创建 \"),e(\"code\",[n._v(\"move()\")]),n._v(\" 函数\")]),n._v(\" \"),e(\"p\",[n._v(\"在上一节，我们说到了使用 \"),e(\"code\",[n._v(\"move()\")]),n._v(\" 函数来改变 round 的 y 坐标。那么我们就来实现一下。\")]),n._v(\" \"),e(\"p\",[n._v(\"和第 5 节的 \"),e(\"code\",[n._v(\"draw()\")]),n._v(\" 方法相同，我们也要将 \"),e(\"code\",[n._v(\"move()\")]),n._v(\" 方法写在 \"),e(\"code\",[n._v(\"Round_item\")]),n._v(\" 的原型上，这样我们创建的每一个 round 都具有了 \"),e(\"code\",[n._v(\"move()\")]),n._v(\" 方法。\")]),n._v(\" \"),e(\"p\",[n._v(\"在 \"),e(\"code\",[n._v(\"move()\")]),n._v(\" 方法中，我们只需要改变 round 的 y 坐标即可，并且设置边界条件，当 y 坐标的值小于 \"),e(\"code\",[n._v(\"-10\")]),n._v(\"（也可以是其他负值），代表该 round 已经超出了屏幕，这个时候我们要将其移动到屏幕的最底端，这样才能保证我们创建的粒子数不变，一直是 \"),e(\"code\",[n._v(\"initRoundPopulation\")]),n._v(\" 的值。\")]),n._v(\" \"),e(\"p\",[n._v(\"这样就是一个粒子在不断地上升，上升到了最顶端再移动到最底端的循环过程，看起来像是有源源不断的粒子，但其实总数是不变的。\")]),n._v(\" \"),e(\"p\",[n._v(\"在 y 坐标的变化之后，我们还需要使用新的 y 坐标再来重新绘制一下该 round。\")]),n._v(\" \"),e(\"p\",[n._v(\"经过上面的分析，\"),e(\"code\",[n._v(\"move()\")]),n._v(\" 写起来是不是很简单呢？\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v(\"    Round_item.prototype.move = function () {\\n        this.y -= 0.15;\\n        if (this.y <= -10) {\\n            this.y = HEIGHT + 10;\\n        }\\n        this.draw();\\n    };\\n\\n\")])])]),e(\"h2\",{attrs:{id:\"在-init-中加入-animate\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#在-init-中加入-animate\"}},[n._v(\"#\")]),n._v(\" 在 \"),e(\"code\",[n._v(\"init()\")]),n._v(\" 中加入 \"),e(\"code\",[n._v(\"animate()\")])]),n._v(\" \"),e(\"p\",[n._v(\"我们想要实现动画的效果，还需要在 \"),e(\"code\",[n._v(\"init()\")]),n._v(\" 中加入 \"),e(\"code\",[n._v(\"animate()\")]),n._v(\" 函数。\")]),n._v(\" \"),e(\"p\",[n._v(\"最后，我们来看一下动画完整的实现代码吧:\")]),n._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[n._v('<!DOCTYPE html>\\n<html lang=\"en\">\\n<head>\\n    <meta charset=\"UTF-8\">\\n    <title>Title</title>\\n    <style>\\n        html, body {\\n            margin: 0;\\n            overflow: hidden;\\n            width: 100%;\\n            height: 100%;\\n            cursor: none;\\n            background: black;\\n        }\\n    </style>\\n</head>\\n<body>\\n<canvas id=\"canvas\"></canvas>\\n\\n<script>\\n    var ctx = document.getElementById(\\'canvas\\'),\\n        content = ctx.getContext(\\'2d\\'),\\n        round = [],\\n        WIDTH,\\n        HEIGHT,\\n        initRoundPopulation = 80;\\n\\n\\n    WIDTH = document.documentElement.clientWidth;\\n    HEIGHT = document.documentElement.clientHeight;\\n\\n    ctx.width = WIDTH;\\n    ctx.height = HEIGHT;\\n\\n    function Round_item(index, x, y) {\\n        this.index = index;\\n        this.x = x;\\n        this.y = y;\\n        this.r = Math.random() * 2 + 1;\\n        var alpha = (Math.floor(Math.random() * 10) + 1) / 10 / 2;\\n        this.color = \"rgba(255,255,255,\" + alpha + \")\";\\n    }\\n\\n    Round_item.prototype.draw = function () {\\n        content.fillStyle = this.color;\\n        content.shadowBlur = this.r * 2;\\n        content.beginPath();\\n        content.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\\n        content.closePath();\\n        content.fill();\\n    };\\n\\n    function animate() {\\n        content.clearRect(0, 0, WIDTH, HEIGHT);\\n\\n        for (var i in round) {\\n            round[i].move();\\n        }\\n        requestAnimationFrame(animate)\\n    }\\n\\n    Round_item.prototype.move = function () {\\n        this.y -= 0.15;\\n        if (this.y <= -10) {\\n            this.y = HEIGHT + 10;\\n        }\\n        this.draw();\\n    };\\n\\n\\n    function init() {\\n        for (var i = 0; i < initRoundPopulation; i++) {\\n            round[i] = new Round_item(i, Math.random() * WIDTH, Math.random() * HEIGHT);\\n            round[i].draw();\\n        }\\n        animate();\\n\\n    }\\n\\n    init();\\n<\\/script>\\n</body>\\n</html>\\n\\n')])])]),e(\"p\",[n._v(\"效果如下：\")]),n._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2017/12/3/1601ce8973f24a8d?w=960&h=640&f=gif&s=77934\",alt:\"最终效果\"}})]),n._v(\" \"),e(\"p\",[n._v(\"参考文章：\")]),n._v(\" \"),e(\"ul\",[e(\"li\",[e(\"a\",{attrs:{href:\"https://user-gold-cdn.xitu.io/2017/12/3/1601cd6b7a0d58b7\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"深入理解定时器系列第二篇——被誉为神器的requestAnimationFrame\"),e(\"OutboundLink\")],1)])])])}),[],!1,null,null,null);t.default=v.exports}}]);","extractedComments":[]}