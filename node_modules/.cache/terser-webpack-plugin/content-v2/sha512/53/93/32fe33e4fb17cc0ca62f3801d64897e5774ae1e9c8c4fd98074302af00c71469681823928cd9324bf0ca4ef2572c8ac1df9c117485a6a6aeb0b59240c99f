{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[326],{678:function(e,n,t){\"use strict\";t.r(n);var a=t(42),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"blockquote\",[t(\"p\",[e._v(\"本节代码对应 GitHub 分支: chapter10\")])]),e._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://github.com/sanyuan0704/react-cloud-music/tree/chapter10\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"仓库传送门\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"h2\",{attrs:{id:\"路由相关\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#路由相关\"}},[e._v(\"#\")]),e._v(\" 路由相关\")]),e._v(\" \"),t(\"p\",[e._v(\"首先构建路由。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('//routes/index.js\\nimport Search from \\'../application/Search\\';\\n\\nexport default [\\n  {\\n    path: \"/\",\\n    component: Home,\\n    routes: [\\n      //...\\n      {\\n        path: \"/search\",\\n        exact: true,\\n        key: \"search\",\\n        component: Search\\n      } \\n    ] \\n]\\n\\n')])])]),t(\"p\",[e._v(\"现在在 application/Search 目录下新建 index.js：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"import React, {useState, useEffect} from 'react';\\nimport { CSSTransition } from 'react-transition-group';\\nimport { Container } from './style';\\n\\nfunction Search (props) {\\n  // 控制动画\\n  const [show, setShow] = useState (false);\\n  useEffect (() => {\\n    setShow (true);\\n  }, []);\\n  return (\\n    <CSSTransition\\n    in={show}\\n    timeout={300}\\n    appear={true}\\n    classNames=\\\"fly\\\"\\n    unmountOnExit\\n    onExited={() => props.history.goBack ()}\\n  >\\n    <Container>\\n      <div onClick={() => (setShowfalse)}> 返回 </div>\\n    </Container>\\n  </CSSTransition>\\n  )\\n}\\n\\nexport default Search;\\n\\n\")])])]),t(\"p\",[e._v(\"相应的 style.js 中，我们来完成 Container 组件:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"import styled from'styled-components';\\nimport style from '../../assets/global-style';\\n\\nexport const Container = styled.div`\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  width: 100%;\\n  z-index: 100;\\n  overflow: hidden;\\n  background: #f2f3f4;\\n  transform-origin: right bottom;\\n`\\n\\n\")])])]),t(\"p\",[e._v(\"当然，为了给 Search 页面进出场的过渡效果，我们加上相关的动画钩子类的编写:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"&.fly-enter, &.fly-appear {\\n  transform: translate3d (100%, 0, 0);\\n}\\n&.fly-enter-active, &.fly-appear-active {\\n  transition: all .3s;\\n  transform: translate3d (0, 0, 0);\\n}\\n&.fly-exit {\\n  transform: translate3d (0, 0, 0);\\n}\\n&.fly-exit-active {\\n  transition: all .3s;\\n  transform: translate3d (100%, 0, 0);\\n}\\n\\n\")])])]),t(\"p\",[e._v(\"现在，我们进入 Home 组件，也就是跳转路由的地方，给 Search 组件一个入口。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"//application/Home/index.js\\n<span className=\\\"iconfont search\\\" onClick={() => props.history.push ('/search')}>&#xe62b;</span>\\n\\n\")])])]),t(\"p\",[e._v(\"现在你点击搜索图标就能进入到 Search 页面，并且进出场都是会带滑动的过渡效果。\")]),e._v(\" \"),t(\"p\",[e._v(\"好，基础框架搭建就到这里，接下来，我们实现 Search 的具体内容。\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"搜索框基础组件开发\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#搜索框基础组件开发\"}},[e._v(\"#\")]),e._v(\" 搜索框基础组件开发\")]),e._v(\" \"),t(\"p\",[e._v('搜索框对于这个模块来说是一个非常关键的子组件，涉及到比较复杂的交互，可以说是这个模块的 \"中枢\" 部分。')]),e._v(\" \"),t(\"p\",[e._v(\"在 baseUI/search-box 目录下，新建 index.js：\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"import React, {useRef, useState, useEffect, useMemo} from 'react';\\nimport styled from'styled-components';\\nimport style from '../../assets/global-style';\\nimport { debounce } from './../../api/utils';\\n\\n\\nconst SearchBox = (props) => {\\n  const queryRef = useRef ();\\n  const [query, setQuery] = useState ('');\\n  // 从父组件热门搜索中拿到的新关键词\\n  const { newQuery } = props;\\n  // 父组件针对搜索关键字发请求相关的处理\\n  const { handleQuery } = props;\\n  // 根据关键字是否存在决定清空按钮的显示 / 隐藏 \\n  const displayStyle = query ? {display: 'block'}: {display: 'none'};\\n\\n  const handleChange = () => {\\n    // 搜索框内容改变时的逻辑\\n  };\\n  const clearQuery = () => {\\n    // 清空框内容的逻辑\\n  }\\n\\n  return (\\n    <SearchBoxWrapper>\\n      <i className=\\\"iconfont icon-back\\\" onClick={() => props.back ()}>&#xe655;</i>\\n      <input ref={queryRef} className=\\\"box\\\" placeholder=\\\"搜索歌曲、歌手、专辑\\\" value={query} onChange={handleChange}/>\\n      <i className=\\\"iconfont icon-delete\\\" onClick={clearQuery} style={displayStyle}>&#xe600;</i>\\n    </SearchBoxWrapper>\\n  )\\n};\\n\\n\")])])]),t(\"p\",[e._v(\"下面是 SearchBoxWrapper 的样式部分:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('\\nconst SearchBoxWrapper = styled.div`\\n  display: flex;\\n  align-items: center;\\n  box-sizing: border-box;\\n  width: 100%;\\n  padding: 0 6px;\\n  padding-right: 20px;\\n  height: 40px;\\n  background: ${style [\"theme-color\"]};\\n  .icon-back {\\n    font-size: 24px;\\n    color: ${style [\"font-color-light\"]};\\n  }\\n  .box {\\n    flex: 1;\\n    margin: 0 5px;\\n    line-height: 18px;\\n    background: ${style [\"theme-color\"]};\\n    color: ${style [\"highlight-background-color\"]};\\n    font-size: ${style [\"font-size-m\"]};\\n    outline: none;\\n    border: none;\\n    border-bottom: 1px solid ${style [\"border-color\"]};\\n    &::placeholder {\\n      color: ${style [\"font-color-light\"]};\\n    }\\n  }\\n  .icon-delete {\\n    font-size: 16px;\\n    color: ${style [\"background-color\"]};\\n  }\\n`\\n\\n')])])]),t(\"p\",[e._v(\"好，现在就让我们来梳理一下搜索框的核心逻辑:\")]),e._v(\" \"),t(\"ol\",[t(\"li\",[e._v(\"进场时 input 框应该出现光标\")]),e._v(\" \"),t(\"li\",[e._v(\"内容改变时要执行父组件传来的回调\")]),e._v(\" \"),t(\"li\",[e._v(\"当父组件点击热门搜索中的关键词时，如果新关键词与现在的 query 不同，则修改 query 并执行回调\")])]),e._v(\" \"),t(\"p\",[e._v(\"现在就让我们来一一实现:\")]),e._v(\" \"),t(\"p\",[e._v(\"进场出现光标:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"useEffect (() => {\\n  queryRef.current.focus ();\\n}, []);\\n\\n\")])])]),t(\"p\",[e._v(\"query 改变时执行回调:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"// 监听 input 框的内容\\nconst handleChange = (e) => {\\n  setQuery (e.currentTarget.value);\\n};\\n\\n// 缓存方法\\nlet handleQueryDebounce = useMemo (() => {\\n  return debounce (handleQuery, 500);\\n}, [handleQuery]);\\n\\nuseEffect (() => {\\n  // 注意防抖\\n  handleQueryDebounce (query);\\n}, [query]);\\n\\n\")])])]),t(\"p\",[e._v(\"父组件点击了热门搜索的关键字，newQuery 更新:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"useEffect (() => {\\n  if (newQuery !== query){\\n    setQuery (newQuery);\\n  }\\n}, [newQuery]);\\n\\n\")])])]),t(\"p\",[e._v(\"还剩下清空的逻辑:\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"const clearQuery = () => {\\n  setQuery ('');\\n  queryRef.current.focus ();\\n}\\n\\n\")])])]),t(\"p\",[e._v(\"目前为止，SearchBox 组件就搭建的差不多了，我们把它对接到 Search 组件中。\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"//Search/index.js\\nimport SearchBox from './../../baseUI/search-box/index';\\n\\n// 组件内部\\nconst [query, setQuery] = useState ('');\\n\\n// 由于是传给子组件的方法，尽量用 useCallback 包裹，以使得在依赖未改变，始终给子组件传递的是相同的引用\\nconst searchBack = useCallback (() => {\\n  setShow (false);\\n}, []);\\n\\nconst handleQuery = (q) => {\\n  setQuery (q);\\n}\\n// Container 中删除原来的内容，换成下面的\\n<Container>\\n  <div className=\\\"search_box_wrapper\\\">\\n    <SearchBox back={searchBack} newQuery={query} handleQuery={handleQuery}></SearchBox>\\n  </div>\\n</Container>\\n\\n\")])])]),t(\"p\",[e._v(\"现在打开搜索页面，就能顺利地看到搜索框啦！接下来我们就来开发具体的 Search 组件的逻辑了。\")])])}),[],!1,null,null,null);n.default=r.exports}}]);","extractedComments":[]}