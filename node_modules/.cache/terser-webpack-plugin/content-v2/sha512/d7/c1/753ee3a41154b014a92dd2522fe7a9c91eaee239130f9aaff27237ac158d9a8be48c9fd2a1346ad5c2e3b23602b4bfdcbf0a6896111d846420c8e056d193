{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{496:function(t,e,a){\"use strict\";a.r(e);var n=a(42),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"用户鉴权中间件-本章源码\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用户鉴权中间件-本章源码\"}},[t._v(\"#\")]),t._v(\" 用户鉴权中间件 \"),a(\"a\",{attrs:{href:\"https://github.com/push-over/egg-example/blob/70dc0ac730/app/middleware/auth.ts\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"本章源码\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[t._v(\"在本节中我将带大家实现一个用户鉴权的中间件，那什么是中间件呢？ 在NodeJS中，中间件主要是指封装所有\"),a(\"code\",[t._v(\"Http\")]),t._v(\" 请求细节处理的方法。一次 \"),a(\"code\",[t._v(\"Http\")]),t._v(\" 请求通常包含很多工作，如记录日志、ip过滤、查询字符串、请求体解析、Cookie处理、权限验证、参数验证、异常处理等，但对于Web应用而言，并不希望接触到这么多细节性的处理，因此引入中间件来简化和隔离这些基础设施与业务逻辑之间的细节，让开发者能够关注在业务的开发上，以达到提升开发效率的目的。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"编写中间件\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编写中间件\"}},[t._v(\"#\")]),t._v(\" 编写中间件\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"写法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#写法\"}},[t._v(\"#\")]),t._v(\" 写法\")]),t._v(\" \"),a(\"p\",[t._v(\"我们先来通过编写 \"),a(\"code\",[t._v(\"AuthMiddleware\")]),t._v(\" 中间件，来看看中间件的写法。\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import { Context, Application } from 'egg';\\n\\n// AuthMiddleware 名字随意\\nexport default function AuthMiddleware(_options: any, _app: Application) {\\n  return async (ctx: Context, next: any) => {\\n\\n  };\\n}\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"配置\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#配置\"}},[t._v(\"#\")]),t._v(\" 配置\")]),t._v(\" \"),a(\"p\",[t._v(\"一般来说中间件也会有自己的配置。在框架中，一个完整的中间件是包含了配置处理的。我们约定一个中间件是一个放置在 \"),a(\"code\",[t._v(\"app/middleware\")]),t._v(\" 目录下的单独文件，它需要 exports 一个普通的 function，接受两个参数：\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"options: 中间件的配置项，框架会将 \"),a(\"code\",[t._v(\"app.config[${middlewareName}]\")]),t._v(\" 传递进来。\")]),t._v(\" \"),a(\"li\",[t._v(\"app: 当前应用 Application 的实例。\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"实现中间件方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实现中间件方法\"}},[t._v(\"#\")]),t._v(\" 实现中间件方法\")]),t._v(\" \"),a(\"p\",[t._v(\"在大致了解后，接下来我们来实现这个方法 \"),a(\"code\",[t._v(\"app/middleware/auth.ts\")]),t._v(\" :\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"import { Context, Application } from 'egg';\\n\\nexport default function AuthMiddleware(_options: any, _app: Application) {\\n  return async (ctx: Context, next: any) => {\\n    // 为了方便调试，开发者工具 graphiql 如果开启的话则放行\\n    if (ctx.app.config.graphql.graphiql) {\\n      await next();\\n      return;\\n    }\\n   \\t\\n    // 白名单：有些操作我们是不需要鉴权的\\n    const whitelist = [ 'login', 'register', 'sendSms', 'githubURL' ];\\n    const body = ctx.request.body;\\n    \\n    // 如果不在白名单中验证 token\\n    if (!whitelist.includes(body.operationName)) {\\n      const uuid = ctx.request.header.authorization;\\n      // 拿到客户端传的 token 做键去 redis 中取\\n      const token = ctx.helper.JSONParse(await ctx.service.redis.get(uuid)) || {};\\n      const { name } = token;\\n      // 取到了放行，反之无效 401\\n      if (name) {\\n        await next();\\n      } else {\\n        ctx.body = { message: '访问令牌鉴权无效，请重新登陆获取！' };\\n        ctx.status = 401;\\n      }\\n    } else {\\n      await next();\\n    }\\n  };\\n}\\n\\n\\n\")])])]),a(\"h2\",{attrs:{id:\"使用中间件\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用中间件\"}},[t._v(\"#\")]),t._v(\" 使用中间件\")]),t._v(\" \"),a(\"p\",[t._v(\"中间件编写完成后，我们还需要手动挂载。在应用中，我们可以完全通过配置来加载自定义的中间件，并决定它们的顺序。\")]),t._v(\" \"),a(\"p\",[t._v(\"如果我们需要加载上面的 auth 中间件，在 \"),a(\"code\",[t._v(\"config.default.ts\")]),t._v(\" 中加入下面的配置就完成了中间件的开启和配置：\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2020/2/28/1708ab4a7428cc0f?w=563&h=171&f=png&s=16621\",alt:\"\"}})]),t._v(\" \"),a(\"p\",[t._v(\"该配置最终将在启动时合并到 \"),a(\"code\",[t._v(\"app.config.appMiddleware\")]),t._v(\"。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"小结\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[t._v(\"#\")]),t._v(\" 小结\")]),t._v(\" \"),a(\"p\",[t._v(\"在本篇中介绍了什么是中间件以及中间件的用途。并在项目中编编写了一个用户鉴权的中间级，配置并使用该中间件。\")])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}