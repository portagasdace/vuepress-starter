{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{462:function(e,t,i){\"use strict\";i.r(t);var r=i(42),l=Object(r.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[i(\"h1\",{attrs:{id:\"flutter-可滚动-widget-gridview\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#flutter-可滚动-widget-gridview\"}},[e._v(\"#\")]),e._v(\" Flutter 可滚动 Widget —— GridView\")]),e._v(\" \"),i(\"p\",[e._v(\"GridView 是一个可以构建二维网格列表的 可滚动Widget。\")]),e._v(\" \"),i(\"h2\",{attrs:{id:\"gridview-的快速上手\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gridview-的快速上手\"}},[e._v(\"#\")]),e._v(\" GridView 的快速上手\")]),e._v(\" \"),i(\"p\",[e._v(\"GridView 和 ListView 一样，有五种用法：\")]),e._v(\" \"),i(\"h3\",{attrs:{id:\"_1-使用默认的构造函数-给-children-属性赋值\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-使用默认的构造函数-给-children-属性赋值\"}},[e._v(\"#\")]),e._v(\" 1.使用默认的构造函数，给 children 属性赋值\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"代码所在位置\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置\"}},[e._v(\"#\")]),e._v(\" 代码所在位置\")]),e._v(\" \"),i(\"p\",[e._v(\"flutter_widget_demo/lib/gridview/GridViewDefaultWidget.dart\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"使用方法\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方法\"}},[e._v(\"#\")]),e._v(\" 使用方法\")]),e._v(\" \"),i(\"p\",[e._v(\"使用默认构造函数写 GridView，只适用于那些只有少量 子Widget 的 GridView。\")]),e._v(\" \"),i(\"p\",[e._v(\"demo 如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"import 'package:flutter/material.dart';\\n\\nvoid main() => runApp(GridViewDefaultWidget());\\n\\nclass GridViewDefaultWidget extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: 'Test',\\n      home: Scaffold(\\n          appBar: AppBar(title: new Text('Flutter 可滚动Widget -- GridView')),\\n          body: GridView(\\n            gridDelegate:\\n                SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3),\\n            children: <Widget>[\\n              ListTile(title: Text('Title1')),\\n              ListTile(title: Text('Title2')),\\n              ListTile(title: Text('Title3')),\\n              ListTile(title: Text('Title4')),\\n              ListTile(title: Text('Title5')),\\n              ListTile(title: Text('Title6')),\\n              ListTile(title: Text('Title7')),\\n              ListTile(title: Text('Title8')),\\n              ListTile(title: Text('Title9')),\\n              ListTile(title: Text('Title10')),\\n              ListTile(title: Text('Title11')),\\n              ListTile(title: Text('Title12')),\\n              ListTile(title: Text('Title13')),\\n              ListTile(title: Text('Title14')),\\n              ListTile(title: Text('Title15')),\\n              ListTile(title: Text('Title16')),\\n              ListTile(title: Text('Title17')),\\n              ListTile(title: Text('Title18')),\\n              ListTile(title: Text('Title19')),\\n            ],\\n          )),\\n    );\\n  }\\n}\\n\\n\")])])]),i(\"p\",[e._v(\"运行效果如下：\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a00350cf908d83?w=428&h=768&f=png&s=54701\",alt:\"\"}})]),e._v(\" \"),i(\"h3\",{attrs:{id:\"_2-使用-gridview-count\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-使用-gridview-count\"}},[e._v(\"#\")]),e._v(\" 2.使用 GridView.count\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"代码所在位置-2\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置-2\"}},[e._v(\"#\")]),e._v(\" 代码所在位置\")]),e._v(\" \"),i(\"p\",[e._v(\"flutter_widget_demo/lib/gridview/GridViewCountWidget.dart\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"使用方法-2\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方法-2\"}},[e._v(\"#\")]),e._v(\" 使用方法\")]),e._v(\" \"),i(\"p\",[e._v(\"GridView.count 的定义如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"  GridView.count({\\n    Key key,\\n    Axis scrollDirection = Axis.vertical,\\n    bool reverse = false,\\n    ScrollController controller,\\n    bool primary,\\n    ScrollPhysics physics,\\n    bool shrinkWrap = false,\\n    EdgeInsetsGeometry padding,\\n    @required int crossAxisCount,\\n    double mainAxisSpacing = 0.0,\\n    double crossAxisSpacing = 0.0,\\n    double childAspectRatio = 1.0,\\n    bool addAutomaticKeepAlives = true,\\n    bool addRepaintBoundaries = true,\\n    bool addSemanticIndexes = true,\\n    double cacheExtent,\\n    List<Widget> children = const <Widget>[],\\n    int semanticChildCount,\\n    DragStartBehavior dragStartBehavior = DragStartBehavior.down,\\n  })\\n\\n\")])])]),i(\"p\",[e._v(\"相比于默认构造函数，其实是将默认构造函数里的 gridDelegate 属性，拆分成了 crossAxisCount、mainAxisSpacing、crossAxisSpacing 和 childAspectRatio。\")]),e._v(\" \"),i(\"p\",[e._v(\"使用 GridView.count 的 demo 如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"import 'package:flutter/material.dart';\\n\\nvoid main() => runApp(GridViewCountWidget());\\n\\nclass GridViewCountWidget extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: 'Test',\\n      home: Scaffold(\\n          appBar: AppBar(title: new Text('Flutter 可滚动Widget -- GridView')),\\n          body: GridView.count(\\n            crossAxisCount: 3,\\n            children: <Widget>[\\n              ListTile(title: Text('Title1')),\\n              ListTile(title: Text('Title2')),\\n              ListTile(title: Text('Title3')),\\n              ListTile(title: Text('Title4')),\\n              ListTile(title: Text('Title5')),\\n              ListTile(title: Text('Title6')),\\n              ListTile(title: Text('Title7')),\\n              ListTile(title: Text('Title8')),\\n              ListTile(title: Text('Title9')),\\n              ListTile(title: Text('Title10')),\\n              ListTile(title: Text('Title11')),\\n              ListTile(title: Text('Title12')),\\n              ListTile(title: Text('Title13')),\\n              ListTile(title: Text('Title14')),\\n              ListTile(title: Text('Title15')),\\n              ListTile(title: Text('Title16')),\\n              ListTile(title: Text('Title17')),\\n              ListTile(title: Text('Title18')),\\n              ListTile(title: Text('Title19')),\\n            ],\\n          )),\\n    );\\n  }\\n}\\n\\n\")])])]),i(\"p\",[e._v(\"运行效果如下：\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a00350cf908d83?w=428&h=768&f=png&s=54701\",alt:\"\"}})]),e._v(\" \"),i(\"h3\",{attrs:{id:\"_3-使用-gridview-extent\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-使用-gridview-extent\"}},[e._v(\"#\")]),e._v(\" 3.使用 GridView.extent\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"代码所在位置-3\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置-3\"}},[e._v(\"#\")]),e._v(\" 代码所在位置\")]),e._v(\" \"),i(\"p\",[e._v(\"flutter_widget_demo/lib/gridview/GridViewExtentWidget.dart\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"使用方法-3\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方法-3\"}},[e._v(\"#\")]),e._v(\" 使用方法\")]),e._v(\" \"),i(\"p\",[e._v(\"GridView.extent 的定义如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"  GridView.extent({\\n    Key key,\\n    Axis scrollDirection = Axis.vertical,\\n    bool reverse = false,\\n    ScrollController controller,\\n    bool primary,\\n    ScrollPhysics physics,\\n    bool shrinkWrap = false,\\n    EdgeInsetsGeometry padding,\\n    @required double maxCrossAxisExtent,\\n    double mainAxisSpacing = 0.0,\\n    double crossAxisSpacing = 0.0,\\n    double childAspectRatio = 1.0,\\n    bool addAutomaticKeepAlives = true,\\n    bool addRepaintBoundaries = true,\\n    bool addSemanticIndexes = true,\\n    List<Widget> children = const <Widget>[],\\n    int semanticChildCount,\\n    DragStartBehavior dragStartBehavior = DragStartBehavior.down,\\n  })\\n\\n\")])])]),i(\"p\",[e._v(\"这里类似于 GridView.count,因为 GridView.count 相当于 GridView+SliverGridDelegateWithFixedCrossAxisCount，而 GridView.extent 相当于 GridView+SliverGridDelegateWithFixedCrossAxisCount。\")]),e._v(\" \"),i(\"p\",[e._v(\"和 GridView.count 的布局算法不同。\")]),e._v(\" \"),i(\"p\",[e._v(\"使用 GridView.extent 的 demo 如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"import 'package:flutter/material.dart';\\n\\nvoid main() => runApp(GridViewExtentWidget());\\n\\nclass GridViewExtentWidget extends StatelessWidget {\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: 'Test',\\n      home: Scaffold(\\n          appBar: AppBar(title: new Text('Flutter 可滚动Widget -- GridView')),\\n          body: GridView.extent(\\n            maxCrossAxisExtent: 300,\\n            children: <Widget>[\\n              ListTile(title: Text('Title1')),\\n              ListTile(title: Text('Title2')),\\n              ListTile(title: Text('Title3')),\\n              ListTile(title: Text('Title4')),\\n              ListTile(title: Text('Title5')),\\n              ListTile(title: Text('Title6')),\\n              ListTile(title: Text('Title7')),\\n              ListTile(title: Text('Title8')),\\n              ListTile(title: Text('Title9')),\\n              ListTile(title: Text('Title10')),\\n              ListTile(title: Text('Title11')),\\n              ListTile(title: Text('Title12')),\\n              ListTile(title: Text('Title13')),\\n              ListTile(title: Text('Title14')),\\n              ListTile(title: Text('Title15')),\\n              ListTile(title: Text('Title16')),\\n              ListTile(title: Text('Title17')),\\n              ListTile(title: Text('Title18')),\\n              ListTile(title: Text('Title19')),\\n            ],\\n          )),\\n    );\\n  }\\n}\\n\\n\")])])]),i(\"p\",[e._v(\"运行效果如下：\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a0035889074fb6?w=428&h=768&f=png&s=45048\",alt:\"\"}})]),e._v(\" \"),i(\"h3\",{attrs:{id:\"_4-使用-gridview-builder-可用于和数据绑定实现大量或无限的列表\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-使用-gridview-builder-可用于和数据绑定实现大量或无限的列表\"}},[e._v(\"#\")]),e._v(\" 4.使用 GridView.builder,可用于和数据绑定实现大量或无限的列表\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"代码所在位置-4\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置-4\"}},[e._v(\"#\")]),e._v(\" 代码所在位置\")]),e._v(\" \"),i(\"p\",[e._v(\"flutter_widget_demo/lib/gridview/GridViewBuilderWidget.dart\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"使用方法-4\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方法-4\"}},[e._v(\"#\")]),e._v(\" 使用方法\")]),e._v(\" \"),i(\"p\",[e._v(\"GridView.builder 可以和数据绑定，用于构建大量或无限的列表。而且只会构建那些实际可见的 子Widget。\")]),e._v(\" \"),i(\"p\",[e._v(\"GridView.builder 的定义如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"  GridView.builder({\\n    Key key,\\n    Axis scrollDirection = Axis.vertical,\\n    bool reverse = false,\\n    ScrollController controller,\\n    bool primary,\\n    ScrollPhysics physics,\\n    bool shrinkWrap = false,\\n    EdgeInsetsGeometry padding,\\n    @required this.gridDelegate,\\n    @required IndexedWidgetBuilder itemBuilder,\\n    int itemCount,\\n    bool addAutomaticKeepAlives = true,\\n    bool addRepaintBoundaries = true,\\n    bool addSemanticIndexes = true,\\n    double cacheExtent,\\n    int semanticChildCount,\\n  }) \\n\\n\")])])]),i(\"p\",[e._v(\"多了和 ListView.builder 类似的 itemCount 和 itemBuilder 属性，用法也是一样的:\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"import 'package:flutter/material.dart';\\n\\nvoid main() => runApp(GridViewBuilderWidget(\\n      items: List<String>.generate(10000, (i) => \\\"Item $i\\\"),\\n    ));\\n\\nclass GridViewBuilderWidget extends StatelessWidget {\\n  final List<String> items;\\n\\n  GridViewBuilderWidget({Key key, @required this.items}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: 'Test',\\n      home: Scaffold(\\n        appBar: AppBar(title: new Text('Flutter 可滚动Widget -- GridView')),\\n        body: GridView.builder(\\n          gridDelegate:\\n              SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 4),\\n          itemCount: items.length,\\n          itemBuilder: (context, index) {\\n            return ListTile(\\n              title: Text('${items[index]}'),\\n            );\\n          },\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\n\")])])]),i(\"p\",[e._v(\"运行效果如下：\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a0035bec84de94?w=428&h=768&f=png&s=69326\",alt:\"\"}})]),e._v(\" \"),i(\"h3\",{attrs:{id:\"_5-使用-gridview-custom\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-使用-gridview-custom\"}},[e._v(\"#\")]),e._v(\" 5.使用 GridView.custom\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"代码所在位置-5\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代码所在位置-5\"}},[e._v(\"#\")]),e._v(\" 代码所在位置\")]),e._v(\" \"),i(\"p\",[e._v(\"flutter_widget_demo/lib/gridview/GridViewCustomWidget.dart\")]),e._v(\" \"),i(\"h4\",{attrs:{id:\"使用方法-5\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用方法-5\"}},[e._v(\"#\")]),e._v(\" 使用方法\")]),e._v(\" \"),i(\"p\",[e._v(\"GridView.custom 的定义如下：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"const GridView.custom({\\n    Key key,\\n    Axis scrollDirection = Axis.vertical,\\n    bool reverse = false,\\n    ScrollController controller,\\n    bool primary,\\n    ScrollPhysics physics,\\n    bool shrinkWrap = false,\\n    EdgeInsetsGeometry padding,\\n    @required this.gridDelegate,\\n    @required this.childrenDelegate,\\n    double cacheExtent,\\n    int semanticChildCount,\\n    DragStartBehavior dragStartBehavior = DragStartBehavior.down,\\n  }) \\n\\n\")])])]),i(\"p\",[e._v(\"增加了 childrenDelegate 的属性，类型为 SliverChildDelegate，具有定制 子Widget 的能力，和 ListView.custom 里的一样，所以用法也一样:\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"import 'package:flutter/material.dart';\\n\\nvoid main() => runApp(GridViewCustomWidget(\\n      items: List<String>.generate(10000, (i) => \\\"Item $i\\\"),\\n    ));\\n\\nclass GridViewCustomWidget extends StatelessWidget {\\n  final List<String> items;\\n\\n  GridViewCustomWidget({Key key, @required this.items}) : super(key: key);\\n\\n  @override\\n  Widget build(BuildContext context) {\\n    return MaterialApp(\\n      title: 'Test',\\n      home: Scaffold(\\n        appBar: AppBar(title: new Text('Flutter 可滚动Widget -- GridView')),\\n        body: GridView.custom(\\n          gridDelegate:\\n              SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 3),\\n          childrenDelegate: SliverChildListDelegate(<Widget>[\\n            ListTile(title: Text('Title1')),\\n            ListTile(title: Text('Title2')),\\n            ListTile(title: Text('Title3')),\\n            ListTile(title: Text('Title4')),\\n            ListTile(title: Text('Title5')),\\n            ListTile(title: Text('Title6')),\\n            ListTile(title: Text('Title7')),\\n            ListTile(title: Text('Title8')),\\n            ListTile(title: Text('Title9')),\\n            ListTile(title: Text('Title10')),\\n            ListTile(title: Text('Title11')),\\n            ListTile(title: Text('Title12')),\\n            ListTile(title: Text('Title13')),\\n            ListTile(title: Text('Title14')),\\n            ListTile(title: Text('Title15')),\\n            ListTile(title: Text('Title16')),\\n            ListTile(title: Text('Title17')),\\n            ListTile(title: Text('Title18')),\\n            ListTile(title: Text('Title19')),\\n          ]),\\n        ),\\n      ),\\n    );\\n  }\\n}\\n\\n\")])])]),i(\"p\",[e._v(\"运行效果如下：\")]),e._v(\" \"),i(\"p\",[i(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/4/9/16a00350cf908d83?w=428&h=768&f=png&s=54701\",alt:\"\"}})]),e._v(\" \"),i(\"h2\",{attrs:{id:\"gridview-的构造函数及参数说明\"}},[i(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gridview-的构造函数及参数说明\"}},[e._v(\"#\")]),e._v(\" GridView 的构造函数及参数说明\")]),e._v(\" \"),i(\"p\",[e._v(\"GridView 的构造函数，会发现 GridView 的大部分属性都和 ListView 一样：\")]),e._v(\" \"),i(\"div\",{staticClass:\"language- extra-class\"},[i(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[i(\"code\",[e._v(\"class GridView extends BoxScrollView {\\n  GridView({\\n    Key key,\\n    Axis scrollDirection = Axis.vertical,\\n    bool reverse = false,\\n    ScrollController controller,\\n    bool primary,\\n    ScrollPhysics physics,\\n    bool shrinkWrap = false,\\n    EdgeInsetsGeometry padding,\\n    @required this.gridDelegate,\\n    bool addAutomaticKeepAlives = true,\\n    bool addRepaintBoundaries = true,\\n    bool addSemanticIndexes = true,\\n    double cacheExtent,\\n    List<Widget> children = const <Widget>[],\\n    int semanticChildCount,\\n  })\\n  ...\\n}\\n\\n\")])])]),i(\"p\",[e._v(\"参数名字\")]),e._v(\" \"),i(\"p\",[e._v(\"参数类型\")]),e._v(\" \"),i(\"p\",[e._v(\"意义\")]),e._v(\" \"),i(\"p\",[e._v(\"必选 or 可选\")]),e._v(\" \"),i(\"p\",[e._v(\"key\")]),e._v(\" \"),i(\"p\",[e._v(\"Key\")]),e._v(\" \"),i(\"p\",[e._v(\"Widget 的标识\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"scrollDirection\")]),e._v(\" \"),i(\"p\",[e._v(\"Axis\")]),e._v(\" \"),i(\"p\",[e._v(\"滑动的方向\"),i(\"br\"),e._v(\"\\n默认为 Axis.vertical，垂直方向可滑动\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"reverse\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"控制 GridView 里列表项的排列顺序，是按照插入顺序排，还是按照插入顺序相反的方向排序。\"),i(\"br\"),e._v(\"\\n默认为 false，就是按照插入顺序排序，第一个插入的在头部\"),i(\"br\"),e._v(\"\\n，当 reverse 为 true 时，第一个插入的会在底部\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"controller\")]),e._v(\" \"),i(\"p\",[e._v(\"ScrollController\")]),e._v(\" \"),i(\"p\",[e._v(\"可以控制 GridView 滚动的位置\"),i(\"br\"),e._v(\"\\nScrollController 提供以下的几个功能：\"),i(\"br\"),e._v(\"\\n1.设置 GridView 滑动的初始位置\"),i(\"br\"),e._v(\"\\n2.可以控制 GridView 是否存储和恢复滑动的位置\"),i(\"br\"),e._v(\"\\n3.可以读取、设置当前滑动的位置\"),i(\"br\"),e._v(\"\\n可以继承 ScrollController 实现自定义的功能\"),i(\"br\"),e._v(\"\\n当 primary 为 true 时，controller 必须为 null\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"primary\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"是否是与父级关联的主滚动视图\"),i(\"br\"),e._v(\"\\n当为 true 时，即使 GridView 里没有足够的内容也能滑动\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"physics\")]),e._v(\" \"),i(\"p\",[e._v(\"ScrollPhysics\")]),e._v(\" \"),i(\"p\",[e._v(\"设置 GridView 的滚动效果\"),i(\"br\"),e._v(\"\\n值必须为 ScrollPhysics 的子类，比如有如下的值：\"),i(\"br\"),e._v(\"\\nAlwaysScrollableScrollPhysics():可以让 GridView 里没有足够的内容也能滑动\"),i(\"br\"),e._v(\"\\nScrollPhysics():GridView 在没有足够的内容的时候不能滑动\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"shrinkWrap\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"是否根据列表项的总长度来设置 GridView 的长度，默认值为 false。\"),i(\"br\"),e._v(\"\\n当 shrinkWrap 为 false 时，GridView 会在滚动方向扩展到可占用的最大空间\"),i(\"br\"),e._v(\"\\n当 shrinkWrap 为 true 时，GridView 在滚动方向占用的空间就是其列表项的总长度，但是这样会很耗性能，因为当其列表项发生变化时，GridView 的大小会重新计算\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"padding\")]),e._v(\" \"),i(\"p\",[e._v(\"EdgeInsetsGeometry\")]),e._v(\" \"),i(\"p\",[e._v(\"GridView 的内边距\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"gridDelegate\")]),e._v(\" \"),i(\"p\",[e._v(\"SliverGridDelegate\")]),e._v(\" \"),i(\"p\",[e._v(\"控制 GridView 中 子Widget 布局的委托。\"),i(\"br\"),e._v(\"\\nSliverGridDelegate 的实现有两个：\"),i(\"br\"),e._v(\"\\nSliverGridDelegateWithMaxCrossAxisExtent：横轴 子Widget 为固定长度的布局算法\"),i(\"br\"),e._v(\"\\nSliverGridDelegateWithFixedCrossAxisCount：横轴 子Widget 为固定数量的布局算法\")]),e._v(\" \"),i(\"p\",[e._v(\"必选\")]),e._v(\" \"),i(\"p\",[e._v(\"addAutomaticKeepAlives\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"是否用 AutomaticKeepAlive 来包列表项,默认为 true\"),i(\"br\"),e._v(\"\\n在一个 lazy list 里，如果 子Widget 为了保证自己在滑出可视界面时不被回收，就需要把 addAutomaticKeepAlives 设为 true\"),i(\"br\"),e._v(\"\\n当 子Widget 不需要让自己保持存活时，为了提升性能，请把 addAutomaticKeepAlives 设为 false\"),i(\"br\"),e._v(\"\\n如果 子Widget 自己维护其 KeepAlive 状态，那么此参数必须置为false。\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"addRepaintBoundaries\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"是否用 RepaintBoundary 来包列表项，默认为 true\"),i(\"br\"),e._v(\"\\n当 addRepaintBoundaries 为 true 时，可以避免列表项重绘，提高性能\"),i(\"br\"),e._v(\"\\n但是当列表项重绘的开销非常小（如一个颜色块，或者一个较短的文本）时，不添加 RepaintBoundary 反而会更高效。\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"addSemanticIndexes\")]),e._v(\" \"),i(\"p\",[e._v(\"bool\")]),e._v(\" \"),i(\"p\",[e._v(\"是否用 IndexedSemantics 来包列表项,默认为 true\"),i(\"br\"),e._v(\"\\n使用 IndexedSemantics 是为了正确的用于辅助模式\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"cacheExtent\")]),e._v(\" \"),i(\"p\",[e._v(\"double\")]),e._v(\" \"),i(\"p\",[e._v(\"GridView 可见部分的前面和后面的区域可以用来缓存列表项，\"),i(\"br\"),e._v(\"\\n这部分区域的 item 即使不可见，也会加载出来，所以当滑动到这个区域的时候，缓存的区域就会变的可见，\"),i(\"br\"),e._v(\"\\ncacheExtent 就表示缓存区域在可见部分的前面和后面有多少像素\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"children\")]),e._v(\" \"),i(\"p\",[e._v(\"List\"),i(\"Widget\")],1),e._v(\" \"),i(\"p\",[e._v(\"GridView 的列表项\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")]),e._v(\" \"),i(\"p\",[e._v(\"semanticChildCount\")]),e._v(\" \"),i(\"p\",[e._v(\"int\")]),e._v(\" \"),i(\"p\",[e._v(\"提供语义信息的列表项的数量\"),i(\"br\"),e._v(\"\\n默认为 GridView 的 item 的数量\")]),e._v(\" \"),i(\"p\",[e._v(\"可选\")])])}),[],!1,null,null,null);t.default=l.exports}}]);","extractedComments":[]}