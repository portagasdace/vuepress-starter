{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[232],{589:function(_,v,e){\"use strict\";e.r(v);var a=e(42),o=Object(a.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":_.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"b-树索引的使用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#b-树索引的使用\"}},[_._v(\"#\")]),_._v(\" B+树索引的使用\")]),_._v(\" \"),e(\"p\",[_._v(\"标签： MySQL是怎样运行的\")]),_._v(\" \"),e(\"hr\"),_._v(\" \"),e(\"p\",[_._v(\"我们前边详细、详细又详细的唠叨了\"),e(\"code\",[_._v(\"InnoDB\")]),_._v(\"存储引擎的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引，我们必须熟悉下边这些结论：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"每个索引都对应一棵\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树，\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树分为好多层，最下边一层是叶子节点，其余的是内节点。所有\"),e(\"code\",[_._v(\"用户记录\")]),_._v(\"都存储在\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树的叶子节点，所有\"),e(\"code\",[_._v(\"目录项记录\")]),_._v(\"都存储在内节点。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"InnoDB\")]),_._v(\"存储引擎会自动为主键（如果没有它会自动帮我们添加）建立\"),e(\"code\",[_._v(\"聚簇索引\")]),_._v(\"，聚簇索引的叶子节点包含完整的用户记录。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"我们可以为自己感兴趣的列建立\"),e(\"code\",[_._v(\"二级索引\")]),_._v(\"，\"),e(\"code\",[_._v(\"二级索引\")]),_._v(\"的叶子节点包含的用户记录由\"),e(\"code\",[_._v(\"索引列 + 主键\")]),_._v(\"组成，所以如果想通过\"),e(\"code\",[_._v(\"二级索引\")]),_._v(\"来查找完整的用户记录的话，需要通过\"),e(\"code\",[_._v(\"回表\")]),_._v(\"操作，也就是在通过\"),e(\"code\",[_._v(\"二级索引\")]),_._v(\"找到主键值之后再到\"),e(\"code\",[_._v(\"聚簇索引\")]),_._v(\"中查找完整的用户记录。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"B+\")]),_._v(\"树中每层节点都是按照索引列值从小到大的顺序排序而组成了双向链表，而且每个页内的记录（不论是用户记录还是目录项记录）都是按照索引列的值从小到大的顺序而形成了一个单链表。如果是\"),e(\"code\",[_._v(\"联合索引\")]),_._v(\"的话，则页面和记录先按照\"),e(\"code\",[_._v(\"联合索引\")]),_._v(\"前边的列排序，如果该列值相同，再按照\"),e(\"code\",[_._v(\"联合索引\")]),_._v(\"后边的列排序。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"通过索引查找记录是从\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树的根节点开始，一层一层向下搜索。由于每个页面都按照索引列的值建立了\"),e(\"code\",[_._v(\"Page Directory\")]),_._v(\"（页目录），所以在这些页面中的查找非常快。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"如果你读上边的几点结论有些任何一点点疑惑的话，那下边的内容不适合你，回过头先去看前边的内容去。\")]),_._v(\" \"),e(\"h2\",{attrs:{id:\"索引的代价\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#索引的代价\"}},[_._v(\"#\")]),_._v(\" 索引的代价\")]),_._v(\" \"),e(\"p\",[_._v(\"在熟悉了\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引原理之后，本篇文章的主题是唠叨如何更好的使用索引，虽然索引是个好东西，可不能乱建，在介绍如何更好的使用索引之前先要了解一下使用这玩意儿的代价，它在空间和时间上都会拖后腿：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"空间上的代价\")]),_._v(\" \"),e(\"p\",[_._v(\"这个是显而易见的，每建立一个索引都要为它建立一棵\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树，每一棵\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树的每一个节点都是一个数据页，一个页默认会占用\"),e(\"code\",[_._v(\"16KB\")]),_._v(\"的存储空间，一棵很大的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树由许多数据页组成，那可是很大的一片存储空间呢。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"时间上的代价\")]),_._v(\" \"),e(\"p\",[_._v(\"每次对表中的数据进行增、删、改操作时，都需要去修改各个\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引。而且我们讲过，\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树每层节点都是按照索引列的值从小到大的顺序排序而组成了双向链表。不论是叶子节点中的记录，还是内节点中的记录（也就是不论是用户记录还是目录项记录）都是按照索引列的值从小到大的顺序而形成了一个单向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些记录移位，页面分裂、页面回收啥的操作来维护好节点和记录的排序。如果我们建了许多索引，每个索引对应的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树都要进行相关的维护操作，这还能不给性能拖后腿么？\")])])]),_._v(\" \"),e(\"p\",[_._v(\"所以说，一个表上索引建的越多，就会占用越多的存储空间，在增删改记录的时候性能就越差。为了能建立又好又少的索引，我们先得学学这些索引在哪些条件下起作用的。\")]),_._v(\" \"),e(\"h2\",{attrs:{id:\"b-树索引适用的条件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#b-树索引适用的条件\"}},[_._v(\"#\")]),_._v(\" B+树索引适用的条件\")]),_._v(\" \"),e(\"p\",[_._v(\"下边我们将唠叨许多种让\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引发挥最大效能的技巧和注意事项，不过大家要清楚，所有的技巧都是源自你对\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引本质的理解，所以如果你还不能保证对\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引充分的理解，那么再次建议回过头把前边的内容看完了再来，要不然读文章对你来说是一种折磨。首先，\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引并不是万能的，并不是所有的查询语句都能用到我们建立的索引。下边介绍几个我们可能使用\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引来进行查询的情况。为了故事的顺利发展，我们需要先创建一个表，这个表是用来存储人的一些基本信息的：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"CREATE TABLE person_info(\\n    id INT NOT NULL auto_increment,\\n    name VARCHAR(100) NOT NULL,\\n    birthday DATE NOT NULL,\\n    phone_number CHAR(11) NOT NULL,\\n    country varchar(100) NOT NULL,\\n    PRIMARY KEY (id),\\n    KEY idx_name_birthday_phone_number (name, birthday, phone_number)\\n);\\n\")])])]),e(\"p\",[_._v(\"对于这个\"),e(\"code\",[_._v(\"person_info\")]),_._v(\"表我们需要注意两点：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"表中的主键是\"),e(\"code\",[_._v(\"id\")]),_._v(\"列，它存储一个自动递增的整数。所以\"),e(\"code\",[_._v(\"InnoDB\")]),_._v(\"存储引擎会自动为\"),e(\"code\",[_._v(\"id\")]),_._v(\"列建立聚簇索引。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"我们额外定义了一个二级索引\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"，它是由3个列组成的联合索引。所以在这个索引对应的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树的叶子节点处存储的用户记录只保留\"),e(\"code\",[_._v(\"name\")]),_._v(\"、\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"、\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"这三个列的值以及主键\"),e(\"code\",[_._v(\"id\")]),_._v(\"的值，并不会保存\"),e(\"code\",[_._v(\"country\")]),_._v(\"列的值。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"从这两点注意中我们可以再次看到，一个表中有多少索引就会建立多少棵\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树，\"),e(\"code\",[_._v(\"person_info\")]),_._v(\"表会为聚簇索引和\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引建立2棵\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树。下边我们画一下索引\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"的示意图，不过既然我们已经掌握了\"),e(\"code\",[_._v(\"InnoDB\")]),_._v(\"的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引原理，那我们在画图的时候为了让图更加清晰，所以在省略一些不必要的部分，比如记录的额外信息，各页面的页号等等，其中内节点中目录项记录的页号信息我们用箭头来代替，在记录结构中只保留\"),e(\"code\",[_._v(\"name\")]),_._v(\"、\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"、\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"、\"),e(\"code\",[_._v(\"id\")]),_._v(\"这四个列的真实数据值，所以示意图就长这样（留心的同学看出来了，这其实和《高性能MySQL》里举的例子的图差不多，我觉得这个例子特别好，所以就借鉴了一下）：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/5/5/16a86c3fe051473d?w=1131&h=505&f=png&s=144440\",alt:\"image_1cpk121ttgku1lj7n4l1g81152k9.png-141.1kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"为了方便大家理解，我们特意标明了哪些是内节点，哪些是叶子节点。再次强调一下，内节点中存储的是\"),e(\"code\",[_._v(\"目录项记录\")]),_._v(\"，叶子节点中存储的是\"),e(\"code\",[_._v(\"用户记录\")]),_._v(\"（由于不是聚簇索引，所以用户记录是不完整的，缺少\"),e(\"code\",[_._v(\"country\")]),_._v(\"列的值）。从图中可以看出，这个\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引对应的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树中页面和记录的排序方式就是这样的：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[_._v(\"先按照\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值进行排序。\")]),_._v(\" \"),e(\"li\",[_._v(\"如果\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值相同，则按照\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列的值进行排序。\")]),_._v(\" \"),e(\"li\",[_._v(\"如果\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列的值也相同，则按照\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"的值进行排序。\")])]),_._v(\" \"),e(\"p\",[_._v(\"这个排序方式\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"十分\")]),_._v(\"、\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"特别\")]),_._v(\"、\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"非常\")]),_._v(\"、\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"巨\")]),_._v(\"、\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"very very very\")]),_._v(\"重要，因为\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"只要页面和记录是排好序的，我们就可以通过二分法来快速定位查找\")]),_._v(\"。下边的内容都仰仗这个图了，大家对照着图理解。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"全值匹配\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#全值匹配\"}},[_._v(\"#\")]),_._v(\" 全值匹配\")]),_._v(\" \"),e(\"p\",[_._v(\"如果我们的搜索条件中的列和索引列一致的话，这种情况就称为全值匹配，比方说下边这个查找语句：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name = 'Ashburn' AND birthday = '1990-09-27' AND phone_number = '15123983239';\\n\")])])]),e(\"p\",[_._v(\"我们建立的\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引包含的3个列在这个查询语句中都展现出来了。大家可以想象一下这个查询过程：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"因为\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树的数据页和记录先是按照\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值进行排序的，所以先可以很快定位\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值是\"),e(\"code\",[_._v(\"Ashburn\")]),_._v(\"的记录位置。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"在\"),e(\"code\",[_._v(\"name\")]),_._v(\"列相同的记录里又是按照\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列的值进行排序的，所以在\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值是\"),e(\"code\",[_._v(\"Ashburn\")]),_._v(\"的记录里又可以快速定位\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列的值是\"),e(\"code\",[_._v(\"'1990-09-27'\")]),_._v(\"的记录。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果很不幸，\"),e(\"code\",[_._v(\"name\")]),_._v(\"和\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列的值都是相同的，那记录是按照\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"列的值排序的，所以联合索引中的三个列都可能被用到。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"有的同学也许有个疑问，\"),e(\"code\",[_._v(\"WHERE\")]),_._v(\"子句中的几个搜索条件的顺序对查询结果有啥影响么？也就是说如果我们调换\"),e(\"code\",[_._v(\"name\")]),_._v(\"、\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"、\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"这几个搜索列的顺序对查询的执行过程有影响么？比方说写成下边这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE birthday = '1990-09-27' AND phone_number = '15123983239' AND name = 'Ashburn';\\n\")])])]),e(\"p\",[_._v(\"答案是：没影响哈。\"),e(\"code\",[_._v(\"MySQL\")]),_._v(\"有一个叫查询优化器的东东，会分析这些搜索条件并且按照可以使用的索引中列的顺序来决定先使用哪个搜索条件，后使用哪个搜索条件。我们后边儿会有专门的章节来介绍查询优化器，敬请期待。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"匹配左边的列\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#匹配左边的列\"}},[_._v(\"#\")]),_._v(\" 匹配左边的列\")]),_._v(\" \"),e(\"p\",[_._v(\"其实在我们的搜索语句中也可以不用包含全部联合索引中的列，只包含左边的就行，比方说下边的查询语句：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name = 'Ashburn';\\n\")])])]),e(\"p\",[_._v(\"或者包含多个左边的列也行：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name = 'Ashburn' AND birthday = '1990-09-27';\\n\")])])]),e(\"p\",[_._v(\"那为什么搜索条件中必须出现左边的列才可以使用到这个\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引呢？比如下边的语句就用不到这个\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引么？\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE birthday = '1990-09-27';\\n\")])])]),e(\"p\",[_._v(\"是的，的确用不到，因为\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树的数据页和记录先是按照\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值排序的，在\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值相同的情况下才使用\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列进行排序，也就是说\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值不同的记录中\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"的值可能是无序的。而现在你跳过\"),e(\"code\",[_._v(\"name\")]),_._v(\"列直接根据\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"的值去查找，臣妾做不到呀～ 那如果我就想在只使用\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"的值去通过\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引进行查找咋办呢？这好办，你再对\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列建一个\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引就行了，创建索引的语法不用我唠叨了吧。\")]),_._v(\" \"),e(\"p\",[_._v(\"但是需要特别注意的一点是，\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"如果我们想使用联合索引中尽可能多的列，搜索条件中的各个列必须是联合索引中从最左边连续的列\")]),_._v(\"。比方说联合索引\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"中列的定义顺序是\"),e(\"code\",[_._v(\"name\")]),_._v(\"、\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"、\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"，如果我们的搜索条件中只有\"),e(\"code\",[_._v(\"name\")]),_._v(\"和\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"，而没有中间的\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"，比方说这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name = 'Ashburn' AND phone_number = '15123983239';\\n\")])])]),e(\"p\",[_._v(\"这样只能用到\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的索引，\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"和\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"的索引就用不上了，因为\"),e(\"code\",[_._v(\"name\")]),_._v(\"值相同的记录先按照\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"的值进行排序，\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"值相同的记录才按照\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"值进行排序。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"匹配列前缀\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#匹配列前缀\"}},[_._v(\"#\")]),_._v(\" 匹配列前缀\")]),_._v(\" \"),e(\"p\",[_._v(\"我们前边说过为某个列建立索引的意思其实就是在对应的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树的记录中使用该列的值进行排序，比方说\"),e(\"code\",[_._v(\"person_info\")]),_._v(\"表上建立的联合索引\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"会先用\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值进行排序，所以这个联合索引对应的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树中的记录的\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的排列就是这样的：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"Aaron\\nAaron\\n...\\nAaron\\nAsa\\nAshburn\\n...\\nAshburn\\nBaird\\nBarlow\\n...\\nBarlow\\n\")])])]),e(\"p\",[_._v(\"字符串排序的本质就是比较哪个字符串大一点儿，哪个字符串小一点，比较字符串大小就用到了该列的字符集和比较规则，这个我们前边儿唠叨过，就不多唠叨了。这里需要注意的是，一般的比较规则都是逐个比较字符的大小，也就是说我们比较两个字符串的大小的过程其实是这样的：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"先比较字符串的第一个字符，第一个字符小的那个字符串就比较小。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果两个字符串的第一个字符相同，那就再比较第二个字符，第二个字符比较小的那个字符串就比较小。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果两个字符串的第二个字符也相同，那就接着比较第三个字符，依此类推。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"所以一个排好序的字符串列其实有这样的特点：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"先按照字符串的第一个字符进行排序。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果第一个字符相同再按照第二个字符进行排序。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果第二个字符相同再按照第三个字符进行排序，依此类推。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"也就是说这些字符串的前n个字符，也就是前缀都是排好序的，所以对于字符串类型的索引列来说，我们只匹配它的前缀也是可以快速定位记录的，比方说我们想查询名字以\"),e(\"code\",[_._v(\"'As'\")]),_._v(\"开头的记录，那就可以这么写查询语句：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name LIKE 'As%';\\n\")])])]),e(\"p\",[_._v(\"但是需要注意的是，如果只给出后缀或者中间的某个字符串，比如这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name LIKE '%As%';\\n\")])])]),e(\"p\",[e(\"code\",[_._v(\"MySQL\")]),_._v(\"就无法快速定位记录位置了，因为字符串中间有\"),e(\"code\",[_._v(\"'As'\")]),_._v(\"的字符串并没有排好序，所以只能全表扫描了。有时候我们有一些匹配某些字符串后缀的需求，比方说某个表有一个\"),e(\"code\",[_._v(\"url\")]),_._v(\"列，该列中存储了许多url：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"+----------------+\\n| url            |\\n+----------------+\\n| www.baidu.com  |\\n| www.google.com |\\n| www.gov.cn     |\\n| ...            |\\n| www.wto.org    |\\n+----------------+\\n\")])])]),e(\"p\",[_._v(\"假设已经对该\"),e(\"code\",[_._v(\"url\")]),_._v(\"列创建了索引，如果我们想查询以\"),e(\"code\",[_._v(\"com\")]),_._v(\"为后缀的网址的话可以这样写查询条件：\"),e(\"code\",[_._v(\"WHERE url LIKE '%com'\")]),_._v(\"，但是这样的话无法使用该\"),e(\"code\",[_._v(\"url\")]),_._v(\"列的索引。为了在查询时用到这个索引而不至于全表扫描，我们可以把后缀查询改写成前缀查询，不过我们就得把表中的数据全部逆序存储一下，也就是说我们可以这样保存\"),e(\"code\",[_._v(\"url\")]),_._v(\"列中的数据：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"+----------------+\\n| url            |\\n+----------------+\\n| moc.udiab.www  |\\n| moc.elgoog.www |\\n| nc.vog.www     |\\n| ...            |\\n| gro.otw.www    |\\n+----------------+\\n\")])])]),e(\"p\",[_._v(\"这样再查找以\"),e(\"code\",[_._v(\"com\")]),_._v(\"为后缀的网址时搜索条件便可以这么写：\"),e(\"code\",[_._v(\"WHERE url LIKE 'moc%'\")]),_._v(\"，这样就可以用到索引了。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"匹配范围值\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#匹配范围值\"}},[_._v(\"#\")]),_._v(\" 匹配范围值\")]),_._v(\" \"),e(\"p\",[_._v(\"回头看我们\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树示意图，\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"所有记录都是按照索引列的值从小到大的顺序排好序的\")]),_._v(\"，所以这极大的方便我们查找索引列的值在某个范围内的记录。比方说下边这个查询语句：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name > 'Asa' AND name < 'Barlow';\\n\")])])]),e(\"p\",[_._v(\"由于\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树中的数据页和记录是先按\"),e(\"code\",[_._v(\"name\")]),_._v(\"列排序的，所以我们上边的查询过程其实是这样的：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[_._v(\"找到\"),e(\"code\",[_._v(\"name\")]),_._v(\"值为\"),e(\"code\",[_._v(\"Asa\")]),_._v(\"的记录。\")]),_._v(\" \"),e(\"li\",[_._v(\"找到\"),e(\"code\",[_._v(\"name\")]),_._v(\"值为\"),e(\"code\",[_._v(\"Barlow\")]),_._v(\"的记录。\")]),_._v(\" \"),e(\"li\",[_._v(\"哦啦，由于所有记录都是由链表连起来的（记录之间用单链表，数据页之间用双链表），所以他们之间的记录都可以很容易的取出来喽～\")]),_._v(\" \"),e(\"li\",[_._v(\"找到这些记录的主键值，再到\"),e(\"code\",[_._v(\"聚簇索引\")]),_._v(\"中\"),e(\"code\",[_._v(\"回表\")]),_._v(\"查找完整的记录。\")])]),_._v(\" \"),e(\"p\",[_._v(\"不过在使用联合进行范围查找的时候需要注意，\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"如果对多个列同时进行范围查找的话，只有对索引最左边的那个列进行范围查找的时候才能用到\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引\")]),_._v(\"，比方说这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name > 'Asa' AND name < 'Barlow' AND birthday > '1980-01-01';\\n\")])])]),e(\"p\",[_._v(\"上边这个查询可以分成两个部分：\")]),_._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[_._v(\"通过条件\"),e(\"code\",[_._v(\"name > 'Asa' AND name < 'Barlow'\")]),_._v(\"来对\"),e(\"code\",[_._v(\"name\")]),_._v(\"进行范围，查找的结果可能有多条\"),e(\"code\",[_._v(\"name\")]),_._v(\"值不同的记录，\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"对这些\"),e(\"code\",[_._v(\"name\")]),_._v(\"值不同的记录继续通过\"),e(\"code\",[_._v(\"birthday > '1980-01-01'\")]),_._v(\"条件继续过滤。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"这样子对于联合索引\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"来说，只能用到\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的部分，而用不到\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列的部分，因为只有\"),e(\"code\",[_._v(\"name\")]),_._v(\"值相同的情况下才能用\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列的值进行排序，而这个查询中\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"通过\"),e(\"code\",[_._v(\"name\")]),_._v(\"进行范围查找的记录中可能并不是按照\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列进行排序的\")]),_._v(\"，所以在搜索条件中继续以\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列进行查找时是用不到这个\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引的。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"精确匹配某一列并范围匹配另外一列\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#精确匹配某一列并范围匹配另外一列\"}},[_._v(\"#\")]),_._v(\" 精确匹配某一列并范围匹配另外一列\")]),_._v(\" \"),e(\"p\",[_._v(\"对于同一个联合索引来说，虽然对多个列都进行范围查找时只能用到最左边那个索引列，但是如果左边的列是精确查找，则右边的列可以进行范围查找，比方说这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name = 'Ashburn' AND birthday > '1980-01-01' AND birthday < '2000-12-31' AND phone_number > '15100000000';\\n\")])])]),e(\"p\",[_._v(\"这个查询的条件可以分为3个部分：\")]),_._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"name = 'Ashburn'\")]),_._v(\"，对\"),e(\"code\",[_._v(\"name\")]),_._v(\"列进行精确查找，当然可以使用\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引了。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"birthday > '1980-01-01' AND birthday < '2000-12-31'\")]),_._v(\"，由于\"),e(\"code\",[_._v(\"name\")]),_._v(\"列是精确查找，所以通过\"),e(\"code\",[_._v(\"name = 'Ashburn'\")]),_._v(\"条件查找后得到的结果的\"),e(\"code\",[_._v(\"name\")]),_._v(\"值都是相同的，它们会再按照\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"的值进行排序。所以此时对\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列进行范围查找是可以用到\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引的。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"phone_number > '15100000000'\")]),_._v(\"，通过\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"的范围查找的记录的\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"的值可能不同，所以这个条件无法再利用\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引了，只能遍历上一步查询得到的记录。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"同理，下边的查询也是可能用到这个\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"联合索引的：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name = 'Ashburn' AND birthday = '1980-01-01' AND phone_number > '15100000000';\\n\")])])]),e(\"h3\",{attrs:{id:\"用于排序\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用于排序\"}},[_._v(\"#\")]),_._v(\" 用于排序\")]),_._v(\" \"),e(\"p\",[_._v(\"我们在写查询语句的时候经常需要对查询出来的记录通过\"),e(\"code\",[_._v(\"ORDER BY\")]),_._v(\"子句按照某种规则进行排序。一般情况下，我们只能把记录都加载到内存中，再用一些排序算法，比如快速排序、归并排序、吧啦吧啦排序等等在内存中对这些记录进行排序，有的时候可能查询的结果集太大以至于不能在内存中进行排序的话，还可能暂时借助磁盘的空间来存放中间结果，排序操作完成后再把排好序的结果集返回到客户端。在\"),e(\"code\",[_._v(\"MySQL\")]),_._v(\"中，把这种在内存中或者磁盘上进行排序的方式统称为文件排序（英文名：\"),e(\"code\",[_._v(\"filesort\")]),_._v(\"），跟\"),e(\"code\",[_._v(\"文件\")]),_._v(\"这个词儿一沾边儿，就显得这些排序操作非常慢了（磁盘和内存的速度比起来，就像是飞机和蜗牛的对比）。但是如果\"),e(\"code\",[_._v(\"ORDER BY\")]),_._v(\"子句里使用到了我们的索引列，就有可能省去在内存或文件中排序的步骤，比如下边这个简单的查询语句：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info ORDER BY name, birthday, phone_number LIMIT 10;\\n\")])])]),e(\"p\",[_._v(\"这个查询的结果集需要先按照\"),e(\"code\",[_._v(\"name\")]),_._v(\"值排序，如果记录的\"),e(\"code\",[_._v(\"name\")]),_._v(\"值相同，则需要按照\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"来排序，如果\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"的值相同，则需要按照\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"排序。大家可以回过头去看我们建立的\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引的示意图，因为这个\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引本身就是按照上述规则排好序的，所以直接从索引中提取数据，然后进行\"),e(\"code\",[_._v(\"回表\")]),_._v(\"操作取出该索引中不包含的列就好了。简单吧？是的，索引就是这么牛逼。\")]),_._v(\" \"),e(\"h4\",{attrs:{id:\"使用联合索引进行排序注意事项\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用联合索引进行排序注意事项\"}},[_._v(\"#\")]),_._v(\" 使用联合索引进行排序注意事项\")]),_._v(\" \"),e(\"p\",[_._v(\"对于\"),e(\"code\",[_._v(\"联合索引\")]),_._v(\"有个问题需要注意，\"),e(\"code\",[_._v(\"ORDER BY\")]),_._v(\"的子句后边的列的顺序也必须按照索引列的顺序给出，如果给出\"),e(\"code\",[_._v(\"ORDER BY phone_number, birthday, name\")]),_._v(\"的顺序，那也是用不了\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引，这种颠倒顺序就不能使用索引的原因我们上边详细说过了，这就不赘述了。\")]),_._v(\" \"),e(\"p\",[_._v(\"同理，\"),e(\"code\",[_._v(\"ORDER BY name\")]),_._v(\"、\"),e(\"code\",[_._v(\"ORDER BY name, birthday\")]),_._v(\"这种匹配索引左边的列的形式可以使用部分的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引。当联合索引左边列的值为常量，也可以使用后边的列进行排序，比如这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name = 'A' ORDER BY birthday, phone_number LIMIT 10;\\n\")])])]),e(\"p\",[_._v(\"这个查询能使用联合索引进行排序是因为\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值相同的记录是按照\"),e(\"code\",[_._v(\"birthday\")]),_._v(\", \"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"排序的，说了好多遍了都。\")]),_._v(\" \"),e(\"h4\",{attrs:{id:\"不可以使用索引进行排序的几种情况\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#不可以使用索引进行排序的几种情况\"}},[_._v(\"#\")]),_._v(\" 不可以使用索引进行排序的几种情况\")]),_._v(\" \"),e(\"h5\",{attrs:{id:\"asc、desc混用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#asc、desc混用\"}},[_._v(\"#\")]),_._v(\" ASC、DESC混用\")]),_._v(\" \"),e(\"p\",[_._v(\"对于使用联合索引进行排序的场景，我们要求各个排序列的排序顺序是一致的，也就是要么各个列都是\"),e(\"code\",[_._v(\"ASC\")]),_._v(\"规则排序，要么都是\"),e(\"code\",[_._v(\"DESC\")]),_._v(\"规则排序。\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"小贴士：\\n\\nORDER BY子句后的列如果不加ASC或者DESC默认是按照ASC排序规则排序的，也就是升序排序的。\\n\")])])]),e(\"p\",[_._v(\"为啥会有这种奇葩规定呢？这个还得回头想想这个\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"联合索引中记录的结构：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"先按照记录的\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值进行升序排列。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果记录的\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值相同，再按照\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列的值进行升序排列。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果记录的\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列的值相同，再按照\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"列的值进行升序排列。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"如果查询中的各个排序列的排序顺序是一致的，比方说下边这两种情况：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"ORDER BY name, birthday LIMIT 10\")])]),_._v(\" \"),e(\"p\",[_._v(\"这种情况直接从索引的最左边开始往右读10行记录就可以了。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"ORDER BY name DESC, birthday DESC LIMIT 10\")]),_._v(\"，\")]),_._v(\" \"),e(\"p\",[_._v(\"这种情况直接从索引的最右边开始往左读10行记录就可以了。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"但是如果我们查询的需求是先按照\"),e(\"code\",[_._v(\"name\")]),_._v(\"列进行升序排列，再按照\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"列进行降序排列的话，比如说这样的查询语句：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info ORDER BY name, birthday DESC LIMIT 10;\\n\")])])]),e(\"p\",[_._v(\"这样如果使用索引排序的话过程就是这样的：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"先从索引的最左边确定\"),e(\"code\",[_._v(\"name\")]),_._v(\"列最小的值，然后找到\"),e(\"code\",[_._v(\"name\")]),_._v(\"列等于该值的所有记录，然后从\"),e(\"code\",[_._v(\"name\")]),_._v(\"列等于该值的最右边的那条记录开始往左找10条记录。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果\"),e(\"code\",[_._v(\"name\")]),_._v(\"列等于最小的值的记录不足10条，再继续往右找\"),e(\"code\",[_._v(\"name\")]),_._v(\"值第二小的记录，重复上边那个过程，直到找到10条记录为止。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"累不累？累！重点是这样不能高效使用索引，而要采取更复杂的算法去从索引中取数据，设计\"),e(\"code\",[_._v(\"MySQL\")]),_._v(\"的大叔觉得这样还不如直接文件排序来的快，所以就规定使用联合索引的各个排序列的排序顺序必须是一致的。\")]),_._v(\" \"),e(\"h5\",{attrs:{id:\"where子句中出现非排序使用到的索引列\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#where子句中出现非排序使用到的索引列\"}},[_._v(\"#\")]),_._v(\" WHERE子句中出现非排序使用到的索引列\")]),_._v(\" \"),e(\"p\",[_._v(\"如果WHERE子句中出现了非排序使用到的索引列，那么排序依然是使用不到索引的，比方说这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE country = 'China' ORDER BY name LIMIT 10;\\n\")])])]),e(\"p\",[_._v(\"这个查询只能先把符合搜索条件\"),e(\"code\",[_._v(\"country = 'China'\")]),_._v(\"的记录提取出来后再进行排序，是使用不到索引。注意和下边这个查询作区别：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name = 'A' ORDER BY birthday, phone_number LIMIT 10;\\n\")])])]),e(\"p\",[_._v(\"虽然这个查询也有搜索条件，但是\"),e(\"code\",[_._v(\"name = 'A'\")]),_._v(\"可以使用到索引\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"，而且过滤剩下的记录还是按照\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"、\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"列排序的，所以还是可以使用索引进行排序的。\")]),_._v(\" \"),e(\"h5\",{attrs:{id:\"排序列包含非同一个索引的列\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#排序列包含非同一个索引的列\"}},[_._v(\"#\")]),_._v(\" 排序列包含非同一个索引的列\")]),_._v(\" \"),e(\"p\",[_._v(\"有时候用来排序的多个列不是一个索引里的，这种情况也不能使用索引进行排序，比方说：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info ORDER BY name, country LIMIT 10;\\n\")])])]),e(\"p\",[e(\"code\",[_._v(\"name\")]),_._v(\"和\"),e(\"code\",[_._v(\"country\")]),_._v(\"并不属于一个联合索引中的列，所以无法使用索引进行排序，至于为啥我就不想再唠叨了，自己用前边的理论自己捋一捋把～\")]),_._v(\" \"),e(\"h5\",{attrs:{id:\"排序列使用了复杂的表达式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#排序列使用了复杂的表达式\"}},[_._v(\"#\")]),_._v(\" 排序列使用了复杂的表达式\")]),_._v(\" \"),e(\"p\",[_._v(\"要想使用索引进行排序操作，必须保证索引列是以单独列的形式出现，而不是修饰过的形式，比方说这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info ORDER BY UPPER(name) LIMIT 10;\\n\")])])]),e(\"p\",[_._v(\"使用了\"),e(\"code\",[_._v(\"UPPER\")]),_._v(\"函数修饰过的列就不是单独的列啦，这样就无法使用索引进行排序啦。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"用于分组\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用于分组\"}},[_._v(\"#\")]),_._v(\" 用于分组\")]),_._v(\" \"),e(\"p\",[_._v(\"有时候我们为了方便统计表中的一些信息，会把表中的记录按照某些列进行分组。比如下边这个分组查询：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT name, birthday, phone_number, COUNT(*) FROM person_info GROUP BY name, birthday, phone_number\\n\")])])]),e(\"p\",[_._v(\"这个查询语句相当于做了3次分组操作：\")]),_._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[_._v(\"先把记录按照\"),e(\"code\",[_._v(\"name\")]),_._v(\"值进行分组，所有\"),e(\"code\",[_._v(\"name\")]),_._v(\"值相同的记录划分为一组。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"将每个\"),e(\"code\",[_._v(\"name\")]),_._v(\"值相同的分组里的记录再按照\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"的值进行分组，将\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"值相同的记录放到一个小分组里，所以看起来就像在一个大分组里又化分了好多小分组。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"再将上一步中产生的小分组按照\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"的值分成更小的分组，所以整体上看起来就像是先把记录分成一个大分组，然后把\"),e(\"code\",[_._v(\"大分组\")]),_._v(\"分成若干个\"),e(\"code\",[_._v(\"小分组\")]),_._v(\"，然后把若干个\"),e(\"code\",[_._v(\"小分组\")]),_._v(\"再细分成更多的\"),e(\"code\",[_._v(\"小小分组\")]),_._v(\"。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"然后针对那些\"),e(\"code\",[_._v(\"小小分组\")]),_._v(\"进行统计，比如在我们这个查询语句中就是统计每个\"),e(\"code\",[_._v(\"小小分组\")]),_._v(\"包含的记录条数。如果没有索引的话，这个分组过程全部需要在内存里实现，而如果有了索引的话，恰巧这个分组顺序又和我们的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树中的索引列的顺序是一致的，而我们的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引又是按照索引列排好序的，这不正好么，所以可以直接使用\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引进行分组。\")]),_._v(\" \"),e(\"p\",[_._v(\"和使用\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引进行排序是一个道理，分组列的顺序也需要和索引列的顺序一致，也可以只使用索引列中左边的列进行分组，吧啦吧啦的～\")]),_._v(\" \"),e(\"h2\",{attrs:{id:\"回表的代价\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#回表的代价\"}},[_._v(\"#\")]),_._v(\" 回表的代价\")]),_._v(\" \"),e(\"p\",[_._v(\"上边的讨论对\"),e(\"code\",[_._v(\"回表\")]),_._v(\"这个词儿多是一带而过，可能大家没啥深刻的体会，下边我们详细唠叨下。还是用\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引为例，看下边这个查询：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name > 'Asa' AND name < 'Barlow';\\n\")])])]),e(\"p\",[_._v(\"在使用\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引进行查询时大致可以分为这两个步骤：\")]),_._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[_._v(\"从索引\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"对应的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树中取出\"),e(\"code\",[_._v(\"name\")]),_._v(\"值在\"),e(\"code\",[_._v(\"Asa\")]),_._v(\"～\"),e(\"code\",[_._v(\"Barlow\")]),_._v(\"之间的用户记录。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"由于索引\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"对应的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树用户记录中只包含\"),e(\"code\",[_._v(\"name\")]),_._v(\"、\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"、\"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"、\"),e(\"code\",[_._v(\"id\")]),_._v(\"这4个字段，而查询列表是\"),e(\"code\",[_._v(\"*\")]),_._v(\"，意味着要查询表中所有字段，也就是还要包括\"),e(\"code\",[_._v(\"country\")]),_._v(\"字段。这时需要把从上一步中获取到的每一条记录的\"),e(\"code\",[_._v(\"id\")]),_._v(\"字段都到聚簇索引对应的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树中找到完整的用户记录，也就是我们通常所说的\"),e(\"code\",[_._v(\"回表\")]),_._v(\"，然后把完整的用户记录返回给查询用户。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"由于索引\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"对应的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树中的记录首先会按照\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的值进行排序，所以值在\"),e(\"code\",[_._v(\"Asa\")]),_._v(\"～\"),e(\"code\",[_._v(\"Barlow\")]),_._v(\"之间的记录在磁盘中的存储是相连的，集中分布在一个或几个数据页中，我们可以很快的把这些连着的记录从磁盘中读出来，这种读取方式我们也可以称为\"),e(\"code\",[_._v(\"顺序I/O\")]),_._v(\"。根据第1步中获取到的记录的\"),e(\"code\",[_._v(\"id\")]),_._v(\"字段的值可能并不相连，而在聚簇索引中记录是根据\"),e(\"code\",[_._v(\"id\")]),_._v(\"（也就是主键）的顺序排列的，所以根据这些并不连续的\"),e(\"code\",[_._v(\"id\")]),_._v(\"值到聚簇索引中访问完整的用户记录可能分布在不同的数据页中，这样读取完整的用户记录可能要访问更多的数据页，这种读取方式我们也可以称为\"),e(\"code\",[_._v(\"随机I/O\")]),_._v(\"。一般情况下，顺序I/O比随机I/O的性能高很多，所以步骤1的执行可能很快，而步骤2就慢一些。所以这个使用索引\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"的查询有这么两个特点：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"会使用到两个\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引，一个二级索引，一个聚簇索引。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"访问二级索引使用\"),e(\"code\",[_._v(\"顺序I/O\")]),_._v(\"，访问聚簇索引使用\"),e(\"code\",[_._v(\"随机I/O\")]),_._v(\"。\")])])]),_._v(\" \"),e(\"p\",[e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"需要回表的记录越多，使用二级索引的性能就越低\")]),_._v(\"，甚至让某些查询宁愿使用全表扫描也不使用\"),e(\"code\",[_._v(\"二级索引\")]),_._v(\"。比方说\"),e(\"code\",[_._v(\"name\")]),_._v(\"值在\"),e(\"code\",[_._v(\"Asa\")]),_._v(\"～\"),e(\"code\",[_._v(\"Barlow\")]),_._v(\"之间的用户记录数量占全部记录数量90%以上，那么如果使用\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引的话，有90%多的\"),e(\"code\",[_._v(\"id\")]),_._v(\"值需要回表，这不是吃力不讨好么，还不如直接去扫描聚簇索引（也就是全表扫描）。\")]),_._v(\" \"),e(\"p\",[_._v(\"那什么时候采用全表扫描的方式，什么时候使用采用\"),e(\"code\",[_._v(\"二级索引 + 回表\")]),_._v(\"的方式去执行查询呢？这个就是传说中的查询优化器做的工作，查询优化器会事先对表中的记录计算一些统计数据，然后再利用这些统计数据根据查询的条件来计算一下需要回表的记录数，需要回表的记录数越多，就越倾向于使用全表扫描，反之倾向于使用\"),e(\"code\",[_._v(\"二级索引 + 回表\")]),_._v(\"的方式。当然优化器做的分析工作不仅仅是这么简单，但是大致上是个这个过程。一般情况下，限制查询获取较少的记录数会让优化器更倾向于选择使用\"),e(\"code\",[_._v(\"二级索引 + 回表\")]),_._v(\"的方式进行查询，因为回表的记录越少，性能提升就越高，比方说上边的查询可以改写成这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info WHERE name > 'Asa' AND name < 'Barlow' LIMIT 10;\\n\")])])]),e(\"p\",[_._v(\"添加了\"),e(\"code\",[_._v(\"LIMIT 10\")]),_._v(\"的查询更容易让优化器采用\"),e(\"code\",[_._v(\"二级索引 + 回表\")]),_._v(\"的方式进行查询。\")]),_._v(\" \"),e(\"p\",[_._v(\"对于有排序需求的查询，上边讨论的采用\"),e(\"code\",[_._v(\"全表扫描\")]),_._v(\"还是\"),e(\"code\",[_._v(\"二级索引 + 回表\")]),_._v(\"的方式进行查询的条件也是成立的，比方说下边这个查询：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info ORDER BY name, birthday, phone_number;\\n\")])])]),e(\"p\",[_._v(\"由于查询列表是\"),e(\"code\",[_._v(\"*\")]),_._v(\"，所以如果使用二级索引进行排序的话，需要把排序完的二级索引记录全部进行回表操作，这样操作的成本还不如直接遍历聚簇索引然后再进行文件排序（\"),e(\"code\",[_._v(\"filesort\")]),_._v(\"）低，所以优化器会倾向于使用\"),e(\"code\",[_._v(\"全表扫描\")]),_._v(\"的方式执行查询。如果我们加了\"),e(\"code\",[_._v(\"LIMIT\")]),_._v(\"子句，比如这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info ORDER BY name, birthday, phone_number LIMIT 10;\\n\")])])]),e(\"p\",[_._v(\"这样需要回表的记录特别少，优化器就会倾向于使用\"),e(\"code\",[_._v(\"二级索引 + 回表\")]),_._v(\"的方式执行查询。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"覆盖索引\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#覆盖索引\"}},[_._v(\"#\")]),_._v(\" 覆盖索引\")]),_._v(\" \"),e(\"p\",[_._v(\"为了彻底告别\"),e(\"code\",[_._v(\"回表\")]),_._v(\"操作带来的性能损耗，我们建议：\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"最好在查询列表里只包含索引列\")]),_._v(\"，比如这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT name, birthday, phone_number FROM person_info WHERE name > 'Asa' AND name < 'Barlow'\\n\")])])]),e(\"p\",[_._v(\"因为我们只查询\"),e(\"code\",[_._v(\"name\")]),_._v(\", \"),e(\"code\",[_._v(\"birthday\")]),_._v(\", \"),e(\"code\",[_._v(\"phone_number\")]),_._v(\"这三个索引列的值，所以在通过\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引得到结果后就不必到\"),e(\"code\",[_._v(\"聚簇索引\")]),_._v(\"中再查找记录的剩余列，也就是\"),e(\"code\",[_._v(\"country\")]),_._v(\"列的值了，这样就省去了\"),e(\"code\",[_._v(\"回表\")]),_._v(\"操作带来的性能损耗。我们把这种只需要用到索引的查询方式称为\"),e(\"code\",[_._v(\"索引覆盖\")]),_._v(\"。排序操作也优先使用\"),e(\"code\",[_._v(\"覆盖索引\")]),_._v(\"的方式进行查询，比方说这个查询：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT name, birthday, phone_number  FROM person_info ORDER BY name, birthday, phone_number;\\n\")])])]),e(\"p\",[_._v(\"虽然这个查询中没有\"),e(\"code\",[_._v(\"LIMIT\")]),_._v(\"子句，但是采用了\"),e(\"code\",[_._v(\"覆盖索引\")]),_._v(\"，所以查询优化器就会直接使用\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引进行排序而不需要回表操作了。\")]),_._v(\" \"),e(\"p\",[_._v(\"当然，如果业务需要查询出索引以外的列，那还是以保证业务需求为重。但是\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"我们很不鼓励用\"),e(\"code\",[_._v(\"*\")]),_._v(\"号作为查询列表，最好把我们需要查询的列依次标明\")]),_._v(\"。\")]),_._v(\" \"),e(\"h2\",{attrs:{id:\"如何挑选索引\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#如何挑选索引\"}},[_._v(\"#\")]),_._v(\" 如何挑选索引\")]),_._v(\" \"),e(\"p\",[_._v(\"上边我们以\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引为例对索引的适用条件进行了详细的唠叨，下边看一下我们在建立索引时或者编写查询语句时就应该注意的一些事项。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"只为用于搜索、排序或分组的列创建索引\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#只为用于搜索、排序或分组的列创建索引\"}},[_._v(\"#\")]),_._v(\" 只为用于搜索、排序或分组的列创建索引\")]),_._v(\" \"),e(\"p\",[_._v(\"也就是说，只为出现在\"),e(\"code\",[_._v(\"WHERE\")]),_._v(\"子句中的列、连接子句中的连接列，或者出现在\"),e(\"code\",[_._v(\"ORDER BY\")]),_._v(\"或\"),e(\"code\",[_._v(\"GROUP BY\")]),_._v(\"子句中的列创建索引。而出现在查询列表中的列就没必要建立索引了：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT birthday, country FROM person_name WHERE name = 'Ashburn';\\n\")])])]),e(\"p\",[_._v(\"像查询列表中的\"),e(\"code\",[_._v(\"birthday\")]),_._v(\"、\"),e(\"code\",[_._v(\"country\")]),_._v(\"这两个列就不需要建立索引，我们只需要为出现在\"),e(\"code\",[_._v(\"WHERE\")]),_._v(\"子句中的\"),e(\"code\",[_._v(\"name\")]),_._v(\"列创建索引就可以了。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"考虑列的基数\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#考虑列的基数\"}},[_._v(\"#\")]),_._v(\" 考虑列的基数\")]),_._v(\" \"),e(\"p\",[e(\"code\",[_._v(\"列的基数\")]),_._v(\"指的是某一列中不重复数据的个数，比方说某个列包含值\"),e(\"code\",[_._v(\"2, 5, 8, 2, 5, 8, 2, 5, 8\")]),_._v(\"，虽然有\"),e(\"code\",[_._v(\"9\")]),_._v(\"条记录，但该列的基数却是\"),e(\"code\",[_._v(\"3\")]),_._v(\"。也就是说，\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"在记录行数一定的情况下，列的基数越大，该列中的值越分散，列的基数越小，该列中的值越集中\")]),_._v(\"。这个\"),e(\"code\",[_._v(\"列的基数\")]),_._v(\"指标非常重要，直接影响我们是否能有效的利用索引。假设某个列的基数为\"),e(\"code\",[_._v(\"1\")]),_._v(\"，也就是所有记录在该列中的值都一样，那为该列建立索引是没有用的，因为所有值都一样就无法排序，无法进行快速查找了～ 而且如果某个建立了二级索引的列的重复值特别多，那么使用这个二级索引查出的记录还可能要做回表操作，这样性能损耗就更大了。所以结论就是：\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"最好为那些列的基数大的列建立索引，为基数太小列的建立索引效果可能不好\")]),_._v(\"。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"索引列的类型尽量小\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#索引列的类型尽量小\"}},[_._v(\"#\")]),_._v(\" 索引列的类型尽量小\")]),_._v(\" \"),e(\"p\",[_._v(\"我们在定义表结构的时候要显式的指定列的类型，以整数类型为例，有\"),e(\"code\",[_._v(\"TINYINT\")]),_._v(\"、\"),e(\"code\",[_._v(\"MEDIUMINT\")]),_._v(\"、\"),e(\"code\",[_._v(\"INT\")]),_._v(\"、\"),e(\"code\",[_._v(\"BIGINT\")]),_._v(\"这么几种，它们占用的存储空间依次递增，我们这里所说的\"),e(\"code\",[_._v(\"类型大小\")]),_._v(\"指的就是\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"该类型表示的数据范围的大小\")]),_._v(\"。能表示的整数范围当然也是依次递增，如果我们想要对某个整数列建立索引的话，\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"在表示的整数范围允许的情况下，尽量让索引列使用较小的类型\")]),_._v(\"，比如我们能使用\"),e(\"code\",[_._v(\"INT\")]),_._v(\"就不要使用\"),e(\"code\",[_._v(\"BIGINT\")]),_._v(\"，能使用\"),e(\"code\",[_._v(\"MEDIUMINT\")]),_._v(\"就不要使用\"),e(\"code\",[_._v(\"INT\")]),_._v(\"～ 这是因为：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[_._v(\"数据类型越小，在查询时进行的比较操作越快（这是CPU层次的东东）\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"数据类型越小，索引占用的存储空间就越少，在一个数据页内就可以放下更多的记录，从而减少磁盘\"),e(\"code\",[_._v(\"I/O\")]),_._v(\"带来的性能损耗，也就意味着可以把更多的数据页缓存在内存中，从而加快读写效率。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"这个建议对于表的主键来说更加适用，因为不仅是聚簇索引中会存储主键值，其他所有的二级索引的节点处都会存储一份记录的主键值，如果主键适用更小的数据类型，也就意味着节省更多的存储空间和更高效的\"),e(\"code\",[_._v(\"I/O\")]),_._v(\"。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"索引字符串值的前缀\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#索引字符串值的前缀\"}},[_._v(\"#\")]),_._v(\" 索引字符串值的前缀\")]),_._v(\" \"),e(\"p\",[_._v(\"我们知道一个字符串其实是由若干个字符组成，如果我们在\"),e(\"code\",[_._v(\"MySQL\")]),_._v(\"中使用\"),e(\"code\",[_._v(\"utf8\")]),_._v(\"字符集去存储字符串的话，编码一个字符需要占用\"),e(\"code\",[_._v(\"1~3\")]),_._v(\"个字节。假设我们的字符串很长，那存储一个字符串就需要占用很大的存储空间。在我们需要为这个字符串列建立索引时，那就意味着在对应的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树中有这么两个问题：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"B+\")]),_._v(\"树索引中的记录需要把该列的完整字符串存储起来，而且字符串越长，在索引中占用的存储空间越大。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"如果\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引中索引列存储的字符串很长，那在做字符串比较时会占用更多的时间。\")])])]),_._v(\" \"),e(\"p\",[_._v(\"我们前边儿说过索引列的字符串前缀其实也是排好序的，所以索引的设计者提出了个方案 --- \"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"只对字符串的前几个字符进行索引\")]),_._v(\"也就是说在二级索引的记录中只保留字符串前几个字符。这样在查找记录时虽然不能精确的定位到记录的位置，但是能定位到相应前缀所在的位置，然后根据前缀相同的记录的主键值回表查询完整的字符串值，再对比就好了。这样只在\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树中存储字符串的前几个字符的编码，既节约空间，又减少了字符串的比较时间，还大概能解决排序的问题，何乐而不为，比方说我们在建表语句中只对\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的前10个字符进行索引可以这么写：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"CREATE TABLE person_info(\\n    name VARCHAR(100) NOT NULL,\\n    birthday DATE NOT NULL,\\n    phone_number CHAR(11) NOT NULL,\\n    country varchar(100) NOT NULL,\\n    KEY idx_name_birthday_phone_number (name(10), birthday, phone_number)\\n);    \\n\")])])]),e(\"p\",[e(\"code\",[_._v(\"name(10)\")]),_._v(\"就表示在建立的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引中只保留记录的前\"),e(\"code\",[_._v(\"10\")]),_._v(\"个字符的编码，这种\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"只索引字符串值的前缀的策略是我们非常鼓励的，尤其是在字符串类型能存储的字符比较多的时候\")]),_._v(\"。\")]),_._v(\" \"),e(\"h4\",{attrs:{id:\"索引列前缀对排序的影响\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#索引列前缀对排序的影响\"}},[_._v(\"#\")]),_._v(\" 索引列前缀对排序的影响\")]),_._v(\" \"),e(\"p\",[_._v(\"如果使用了索引列前缀，比方说前边只把\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的前10个字符放到了二级索引中，下边这个查询可能就有点儿尴尬了：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"SELECT * FROM person_info ORDER BY name LIMIT 10;\\n\")])])]),e(\"p\",[_._v(\"因为二级索引中不包含完整的\"),e(\"code\",[_._v(\"name\")]),_._v(\"列信息，所以无法对前十个字符相同，后边的字符不同的记录进行排序，也就是使用索引列前缀的方式无法支持使用索引排序，只好乖乖的用文件排序喽。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"让索引列在比较表达式中单独出现\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#让索引列在比较表达式中单独出现\"}},[_._v(\"#\")]),_._v(\" 让索引列在比较表达式中单独出现\")]),_._v(\" \"),e(\"p\",[_._v(\"假设表中有一个整数列\"),e(\"code\",[_._v(\"my_col\")]),_._v(\"，我们为这个列建立了索引。下边的两个\"),e(\"code\",[_._v(\"WHERE\")]),_._v(\"子句虽然语义是一致的，但是在效率上却有差别：\")]),_._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"WHERE my_col * 2 < 4\")])])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"WHERE my_col < 4/2\")])])])]),_._v(\" \"),e(\"p\",[_._v(\"第1个\"),e(\"code\",[_._v(\"WHERE\")]),_._v(\"子句中\"),e(\"code\",[_._v(\"my_col\")]),_._v(\"列并\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"不是\")]),_._v(\"以单独列的形式出现的，而是以\"),e(\"code\",[_._v(\"my_col * 2\")]),_._v(\"这样的表达式的形式出现的，存储引擎\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"会依次遍历所有的记录，计算这个表达式的值是不是小于\"),e(\"code\",[_._v(\"4\")])]),_._v(\"，所以这种情况下是使用不到为\"),e(\"code\",[_._v(\"my_col\")]),_._v(\"列建立的\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引的。而第2个\"),e(\"code\",[_._v(\"WHERE\")]),_._v(\"子句中\"),e(\"code\",[_._v(\"my_col\")]),_._v(\"列并\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"是\")]),_._v(\"以单独列的形式出现的，这样的情况可以直接使用\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引。\")]),_._v(\" \"),e(\"p\",[_._v(\"所以结论就是：\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"如果索引列在比较表达式中不是以单独列的形式出现，而是以某个表达式，或者函数调用形式出现的话，是用不到索引的\")]),_._v(\"。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"主键插入顺序\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主键插入顺序\"}},[_._v(\"#\")]),_._v(\" 主键插入顺序\")]),_._v(\" \"),e(\"p\",[_._v(\"我们知道，对于一个使用\"),e(\"code\",[_._v(\"InnoDB\")]),_._v(\"存储引擎的表来说，在我们没有显式的创建索引时，表中的数据实际上都是存储在\"),e(\"code\",[_._v(\"聚簇索引\")]),_._v(\"的叶子节点的。而记录又是存储在数据页中的，数据页和记录又是按照记录主键值从小到大的顺序进行排序，所以如果我们插入的记录的主键值是依次增大的话，那我们每插满一个数据页就换到下一个数据页继续插，而如果我们插入的主键值忽大忽小的话，这就比较麻烦了，假设某个数据页存储的记录已经满了，它存储的主键值在\"),e(\"code\",[_._v(\"1~100\")]),_._v(\"之间：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/5/5/16a86c3fe0e15c7d?w=866&h=247&f=png&s=28810\",alt:\"image_1capq3r1o1geqdck1cnc1fkihj39.png-28.1kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"如果此时再插入一条主键值为\"),e(\"code\",[_._v(\"9\")]),_._v(\"的记录，那它插入的位置就如下图：\")]),_._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/5/5/16a86c3fe223eb7c?w=836&h=401&f=png&s=36152\",alt:\"image_1capq7nnv13en8b31lvtj2i1e8lm.png-35.3kB\"}})]),_._v(\" \"),e(\"p\",[_._v(\"可这个数据页已经满了啊，再插进来咋办呢？我们需要把当前页面分裂成两个页面，把本页中的一些记录移动到新创建的这个页中。页面分裂和记录移位意味着什么？意味着：\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"性能损耗\")]),_._v(\"！所以如果我们想尽量避免这样无谓的性能损耗，最好让插入的记录的主键值依次递增，这样就不会发生这样的性能损耗了。所以我们建议：\"),e(\"span\",{staticStyle:{color:\"red\"}},[_._v(\"让主键具有\"),e(\"code\",[_._v(\"AUTO_INCREMENT\")]),_._v(\"，让存储引擎自己为表生成主键，而不是我们手动插入 \")]),_._v(\"，比方说我们可以这样定义\"),e(\"code\",[_._v(\"person_info\")]),_._v(\"表：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"CREATE TABLE person_info(\\n    id INT UNSIGNED NOT NULL AUTO_INCREMENT,\\n    name VARCHAR(100) NOT NULL,\\n    birthday DATE NOT NULL,\\n    phone_number CHAR(11) NOT NULL,\\n    country varchar(100) NOT NULL,\\n    PRIMARY KEY (id),\\n    KEY idx_name_birthday_phone_number (name(10), birthday, phone_number)\\n);    \\n\")])])]),e(\"p\",[_._v(\"我们自定义的主键列\"),e(\"code\",[_._v(\"id\")]),_._v(\"拥有\"),e(\"code\",[_._v(\"AUTO_INCREMENT\")]),_._v(\"属性，在插入记录时存储引擎会自动为我们填入自增的主键值。\")]),_._v(\" \"),e(\"h3\",{attrs:{id:\"冗余和重复索引\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#冗余和重复索引\"}},[_._v(\"#\")]),_._v(\" 冗余和重复索引\")]),_._v(\" \"),e(\"p\",[_._v(\"有时候有的同学有意或者无意的就对同一个列创建了多个索引，比方说这样写建表语句：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"CREATE TABLE person_info(\\n    id INT UNSIGNED NOT NULL AUTO_INCREMENT,\\n    name VARCHAR(100) NOT NULL,\\n    birthday DATE NOT NULL,\\n    phone_number CHAR(11) NOT NULL,\\n    country varchar(100) NOT NULL,\\n    PRIMARY KEY (id),\\n    KEY idx_name_birthday_phone_number (name(10), birthday, phone_number),\\n    KEY idx_name (name(10))\\n);    \\n\")])])]),e(\"p\",[_._v(\"我们知道，通过\"),e(\"code\",[_._v(\"idx_name_birthday_phone_number\")]),_._v(\"索引就可以对\"),e(\"code\",[_._v(\"name\")]),_._v(\"列进行快速搜索，再创建一个专门针对\"),e(\"code\",[_._v(\"name\")]),_._v(\"列的索引就算是一个\"),e(\"code\",[_._v(\"冗余\")]),_._v(\"索引，维护这个索引只会增加维护的成本，并不会对搜索有什么好处。\")]),_._v(\" \"),e(\"p\",[_._v(\"另一种情况，我们可能会对某个列重复建立索引，比方说这样：\")]),_._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[_._v(\"CREATE TABLE repeat_index_demo (\\n    c1 INT PRIMARY KEY,\\n    c2 INT,\\n    UNIQUE uidx_c1 (c1),\\n    INDEX idx_c1 (c1)\\n);  \\n\")])])]),e(\"p\",[_._v(\"我们看到，\"),e(\"code\",[_._v(\"c1\")]),_._v(\"既是主键、又给它定义为一个唯一索引，还给它定义了一个普通索引，可是主键本身就会生成聚簇索引，所以定义的唯一索引和普通索引是重复的，这种情况要避免。\")]),_._v(\" \"),e(\"h2\",{attrs:{id:\"总结\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[_._v(\"#\")]),_._v(\" 总结\")]),_._v(\" \"),e(\"p\",[_._v(\"上边只是我们在创建和使用\"),e(\"code\",[_._v(\"B+\")]),_._v(\"树索引的过程中需要注意的一些点，后边我们还会陆续介绍更多的优化方法和注意事项，敬请期待。本集内容总结如下：\")]),_._v(\" \"),e(\"ol\",[e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"B+\")]),_._v(\"树索引在空间和时间上都有代价，所以没事儿别瞎建索引。\")])]),_._v(\" \"),e(\"li\",[e(\"p\",[e(\"code\",[_._v(\"B+\")]),_._v(\"树索引适用于下边这些情况：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[_._v(\"全值匹配\")]),_._v(\" \"),e(\"li\",[_._v(\"匹配左边的列\")]),_._v(\" \"),e(\"li\",[_._v(\"匹配范围值\")]),_._v(\" \"),e(\"li\",[_._v(\"精确匹配某一列并范围匹配另外一列\")]),_._v(\" \"),e(\"li\",[_._v(\"用于排序\")]),_._v(\" \"),e(\"li\",[_._v(\"用于分组\")])])]),_._v(\" \"),e(\"li\",[e(\"p\",[_._v(\"在使用索引时需要注意下边这些事项：\")]),_._v(\" \"),e(\"ul\",[e(\"li\",[_._v(\"只为用于搜索、排序或分组的列创建索引\")]),_._v(\" \"),e(\"li\",[_._v(\"为列的基数大的列创建索引\")]),_._v(\" \"),e(\"li\",[_._v(\"索引列的类型尽量小\")]),_._v(\" \"),e(\"li\",[_._v(\"可以只对字符串值的前缀建立索引\")]),_._v(\" \"),e(\"li\",[_._v(\"只有索引列在比较表达式中单独出现才可以适用索引\")]),_._v(\" \"),e(\"li\",[_._v(\"为了尽可能少的让\"),e(\"code\",[_._v(\"聚簇索引\")]),_._v(\"发生页面分裂和记录移位的情况，建议让主键拥有\"),e(\"code\",[_._v(\"AUTO_INCREMENT\")]),_._v(\"属性。\")]),_._v(\" \"),e(\"li\",[_._v(\"定位并删除表中的重复和冗余索引\")]),_._v(\" \"),e(\"li\",[_._v(\"尽量使用\"),e(\"code\",[_._v(\"覆盖索引\")]),_._v(\"进行查询，避免\"),e(\"code\",[_._v(\"回表\")]),_._v(\"带来的性能损耗。\")])])])])])}),[],!1,null,null,null);v.default=o.exports}}]);","extractedComments":[]}