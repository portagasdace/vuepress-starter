(window.webpackJsonp=window.webpackJsonp||[]).push([[223],{580:function(_,v,o){"use strict";o.r(v);var d=o(42),e=Object(d.a)({},(function(){var _=this,v=_.$createElement,o=_._self._c||v;return o("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[o("h1",{attrs:{id:"undo日志-下"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#undo日志-下"}},[_._v("#")]),_._v(" undo日志（下）")]),_._v(" "),o("p",[_._v("标签： MySQL是怎样运行的")]),_._v(" "),o("hr"),_._v(" "),o("p",[_._v("上一章我们主要唠叨了为什么需要"),o("code",[_._v("undo日志")]),_._v("，以及"),o("code",[_._v("INSERT")]),_._v("、"),o("code",[_._v("DELETE")]),_._v("、"),o("code",[_._v("UPDATE")]),_._v("这些会对数据做改动的语句都会产生什么类型的"),o("code",[_._v("undo日志")]),_._v("，还有不同类型的"),o("code",[_._v("undo日志")]),_._v("的具体格式是什么。本章会继续唠叨这些"),o("code",[_._v("undo日志")]),_._v("会被具体写到什么地方，以及在写入过程中需要注意的一些问题。")]),_._v(" "),o("h2",{attrs:{id:"通用链表结构"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#通用链表结构"}},[_._v("#")]),_._v(" 通用链表结构")]),_._v(" "),o("p",[_._v("在写入"),o("code",[_._v("undo日志")]),_._v("的过程中会使用到多个链表，很多链表都有同样的节点结构，如图所示：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a7fcc0ca928?w=1115&h=463&f=png&s=107286",alt:"image_1d79gnaudfg2psk2l7mi1146r20.png-104.8kB"}})]),_._v(" "),o("p",[_._v("在某个表空间内，我们可以通过一个页的页号和在页内的偏移量来唯一定位一个节点的位置，这两个信息也就相当于指向这个节点的一个指针。所以：")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("Pre Node Page Number")]),_._v("和"),o("code",[_._v("Pre Node Offset")]),_._v("的组合就是指向前一个节点的指针")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("Next Node Page Number")]),_._v("和"),o("code",[_._v("Next Node Offset")]),_._v("的组合就是指向后一个节点的指针。")])])]),_._v(" "),o("p",[_._v("整个"),o("code",[_._v("List Node")]),_._v("占用"),o("code",[_._v("12")]),_._v("个字节的存储空间。")]),_._v(" "),o("p",[_._v("为了更好的管理链表，设计"),o("code",[_._v("InnoDB")]),_._v("的大叔还提出了一个基节点的结构，里边存储了这个链表的"),o("code",[_._v("头节点")]),_._v("、"),o("code",[_._v("尾节点")]),_._v("以及链表长度信息，基节点的结构示意图如下：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a7fcc9ccd4f?w=978&h=515&f=png&s=106418",alt:"image_1d79o8ra61jh6k0k6af13vpg329.png-103.9kB"}})]),_._v(" "),o("p",[_._v("其中：")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("List Length")]),_._v("表明该链表一共有多少节点。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("First Node Page Number")]),_._v("和"),o("code",[_._v("First Node Offset")]),_._v("的组合就是指向链表头节点的指针。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("Last Node Page Number")]),_._v("和"),o("code",[_._v("Last Node Offset")]),_._v("的组合就是指向链表尾节点的指针。")])])]),_._v(" "),o("p",[_._v("整个"),o("code",[_._v("List Base Node")]),_._v("占用"),o("code",[_._v("16")]),_._v("个字节的存储空间。")]),_._v(" "),o("p",[_._v("所以使用"),o("code",[_._v("List Base Node")]),_._v("和"),o("code",[_._v("List Node")]),_._v("这两个结构组成的链表的示意图就是这样：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a7fcc3c65f1?w=1067&h=377&f=png&s=72751",alt:"image_1d79nq0ge1gn7pmcaa7gma1uh62q.png-71kB"}})]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n上述链表结构我们在前边的文章中频频提到，尤其是在表空间那一章重点描述过，不过我不敢奢求大家都记住了，所以在这里又强调一遍，希望大家不要嫌我烦，我只是怕大家忘了学习后续内容吃力而已～\n")])])]),o("h2",{attrs:{id:"fil-page-undo-log页面"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#fil-page-undo-log页面"}},[_._v("#")]),_._v(" FIL_PAGE_UNDO_LOG页面")]),_._v(" "),o("p",[_._v("我们前边唠叨表空间的时候说过，表空间其实是由许许多多的页面构成的，页面默认大小为"),o("code",[_._v("16KB")]),_._v("。这些页面有不同的类型，比如类型为"),o("code",[_._v("FIL_PAGE_INDEX")]),_._v("的页面用于存储聚簇索引以及二级索引，类型为"),o("code",[_._v("FIL_PAGE_TYPE_FSP_HDR")]),_._v("的页面用于存储表空间头部信息的，还有其他各种类型的页面，其中有一种称之为"),o("code",[_._v("FIL_PAGE_UNDO_LOG")]),_._v("类型的页面是专门用来存储"),o("code",[_._v("undo日志")]),_._v("的，这种类型的页面的通用结构如下图所示（以默认的"),o("code",[_._v("16KB")]),_._v("大小为例）：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a7fd0d7f9fa?w=938&h=589&f=png&s=64680",alt:"image_1d79ec33apm47brq901sur3bi16.png-63.2kB"}})]),_._v(" "),o("p",[_._v("“类型为"),o("code",[_._v("FIL_PAGE_UNDO_LOG")]),_._v("的页”这种说法太绕口，以后我们就简称为"),o("code",[_._v("Undo页面")]),_._v("了哈。上图中的"),o("code",[_._v("File Header")]),_._v("和"),o("code",[_._v("File Trailer")]),_._v("是各种页面都有的通用结构，我们前边唠叨过很多遍了，这里就不赘述了（忘记了的可以到讲述数据页结构或者表空间的章节中查看）。"),o("code",[_._v("Undo Page Header")]),_._v("是"),o("code",[_._v("Undo页面")]),_._v("所特有的，我们来看一下它的结构：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a7fd2ad0290?w=560&h=431&f=png&s=73515",alt:"image_1d79ohe8u1uqgh1e978nji1ip2m.png-71.8kB"}})]),_._v(" "),o("p",[_._v("其中各个属性的意思如下：")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("TRX_UNDO_PAGE_TYPE")]),_._v("：本页面准备存储什么种类的"),o("code",[_._v("undo日志")]),_._v("。")]),_._v(" "),o("p",[_._v("我们前边介绍了好几种类型的"),o("code",[_._v("undo日志")]),_._v("，它们可以被分为两个大类：")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("TRX_UNDO_INSERT")]),_._v("（使用十进制"),o("code",[_._v("1")]),_._v("表示）：类型为"),o("code",[_._v("TRX_UNDO_INSERT_REC")]),_._v("的"),o("code",[_._v("undo日志")]),_._v("属于此大类，一般由"),o("code",[_._v("INSERT")]),_._v("语句产生，或者在"),o("code",[_._v("UPDATE")]),_._v("语句中有更新主键的情况也会产生此类型的"),o("code",[_._v("undo日志")]),_._v("。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_UPDATE")]),_._v("（使用十进制"),o("code",[_._v("2")]),_._v("表示），除了类型为"),o("code",[_._v("TRX_UNDO_INSERT_REC")]),_._v("的"),o("code",[_._v("undo日志")]),_._v("，其他类型的"),o("code",[_._v("undo日志")]),_._v("都属于这个大类，比如我们前边说的"),o("code",[_._v("TRX_UNDO_DEL_MARK_REC")]),_._v("、"),o("code",[_._v("TRX_UNDO_UPD_EXIST_REC")]),_._v("啥的，一般由"),o("code",[_._v("DELETE")]),_._v("、"),o("code",[_._v("UPDATE")]),_._v("语句产生的"),o("code",[_._v("undo日志")]),_._v("属于这个大类。")])])]),_._v(" "),o("p",[_._v("这个"),o("code",[_._v("TRX_UNDO_PAGE_TYPE")]),_._v("属性可选的值就是上边的两个，用来标记本页面用于存储哪个大类的"),o("code",[_._v("undo日志")]),_._v("，不同大类的"),o("code",[_._v("undo日志")]),_._v("不能混着存储，比如一个"),o("code",[_._v("Undo页面")]),_._v("的"),o("code",[_._v("TRX_UNDO_PAGE_TYPE")]),_._v("属性值为"),o("code",[_._v("TRX_UNDO_INSERT")]),_._v("，那么这个页面就只能存储类型为"),o("code",[_._v("TRX_UNDO_INSERT_REC")]),_._v("的"),o("code",[_._v("undo日志")]),_._v("，其他类型的"),o("code",[_._v("undo日志")]),_._v("就不能放到这个页面中了。")]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n之所以把undo日志分成两个大类，是因为类型为TRX_UNDO_INSERT_REC的undo日志在事务提交后可以直接删除掉，而其他类型的undo日志还需要为所谓的MVCC服务，不能直接删除掉，对它们的处理需要区别对待。当然，如果你看这段话迷迷糊糊的话，那就不需要再看一遍了，现在只需要知道undo日志分为2个大类就好了，更详细的东西我们后边会仔细唠叨的。\n")])])])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_PAGE_START")]),_._v("：表示在当前页面中是从什么位置开始存储"),o("code",[_._v("undo日志")]),_._v("的，或者说表示第一条"),o("code",[_._v("undo日志")]),_._v("在本页面中的起始偏移量。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_PAGE_FREE")]),_._v("：与上边的"),o("code",[_._v("TRX_UNDO_PAGE_START")]),_._v("对应，表示当前页面中存储的最后一条"),o("code",[_._v("undo")]),_._v("日志结束时的偏移量，或者说从这个位置开始，可以继续写入新的"),o("code",[_._v("undo日志")]),_._v("。")]),_._v(" "),o("p",[_._v("假设现在向页面中写入了3条"),o("code",[_._v("undo日志")]),_._v("，那么"),o("code",[_._v("TRX_UNDO_PAGE_START")]),_._v("和"),o("code",[_._v("TRX_UNDO_PAGE_FREE")]),_._v("的示意图就是这样：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a7fd2fbc0f4?w=810&h=260&f=png&s=55289",alt:"image_1d79s1ib21rku5fkq3to1e14313.png-54kB"}})]),_._v(" "),o("p",[_._v("当然，在最初一条"),o("code",[_._v("undo日志")]),_._v("也没写入的情况下，"),o("code",[_._v("TRX_UNDO_PAGE_START")]),_._v("和"),o("code",[_._v("TRX_UNDO_PAGE_FREE")]),_._v("的值是相同的。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_PAGE_NODE")]),_._v("：代表一个"),o("code",[_._v("List Node")]),_._v("结构（链表的普通节点，我们上边刚说的）。")]),_._v(" "),o("p",[_._v("下边马上用到这个属性，稍安勿躁。")])])]),_._v(" "),o("h2",{attrs:{id:"undo页面链表"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#undo页面链表"}},[_._v("#")]),_._v(" Undo页面链表")]),_._v(" "),o("h3",{attrs:{id:"单个事务中的undo页面链表"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#单个事务中的undo页面链表"}},[_._v("#")]),_._v(" 单个事务中的Undo页面链表")]),_._v(" "),o("p",[_._v("因为一个事务可能包含多个语句，而且一个语句可能对若干条记录进行改动，而对每条记录进行改动前，都需要记录1条或2条的"),o("code",[_._v("undo日志")]),_._v("，所以在一个事务执行过程中可能产生很多"),o("code",[_._v("undo日志")]),_._v("，这些日志可能一个页面放不下，需要放到多个页面中，这些页面就通过我们上边介绍的"),o("code",[_._v("TRX_UNDO_PAGE_NODE")]),_._v("属性连成了链表：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a8074556f5d?w=1172&h=381&f=png&s=62226",alt:"image_1d79v7bib12041n9d1gpe1t8a10jc1g.png-60.8kB"}})]),_._v(" "),o("p",[_._v("大家往上再瞅一瞅上边的图，我们特意把链表中的第一个"),o("code",[_._v("Undo页面")]),_._v("给标了出来，称它为"),o("code",[_._v("first undo page")]),_._v("，其余的"),o("code",[_._v("Undo页面")]),_._v("称之为"),o("code",[_._v("normal undo page")]),_._v("，这是因为在"),o("code",[_._v("first undo page")]),_._v("中除了记录"),o("code",[_._v("Undo Page Header")]),_._v("之外，还会记录其他的一些管理信息，这个我们稍后再说哈。")]),_._v(" "),o("p",[_._v("在一个事务执行过程中，可能混着执行"),o("code",[_._v("INSERT")]),_._v("、"),o("code",[_._v("DELETE")]),_._v("、"),o("code",[_._v("UPDATE")]),_._v("语句，也就意味着会产生不同类型的"),o("code",[_._v("undo日志")]),_._v("。但是我们前边又强调过，同一个"),o("code",[_._v("Undo页面")]),_._v("要么只存储"),o("code",[_._v("TRX_UNDO_INSERT")]),_._v("大类的"),o("code",[_._v("undo日志")]),_._v("，要么只存储"),o("code",[_._v("TRX_UNDO_UPDATE")]),_._v("大类的"),o("code",[_._v("undo日志")]),_._v("，反正不能混着存，所以在一个事务执行过程中就可能需要2个"),o("code",[_._v("Undo页面")]),_._v("的链表，一个称之为"),o("code",[_._v("insert undo链表")]),_._v("，另一个称之为"),o("code",[_._v("update undo链表")]),_._v("，画个示意图就是这样：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a808197ad5b?w=1173&h=404&f=png&s=55954",alt:"image_1d7a6t4va1e0c1l9t1hq51vlt183l2d.png-54.6kB"}})]),_._v(" "),o("p",[_._v("另外，设计"),o("code",[_._v("InnoDB")]),_._v("的大叔规定对普通表和临时表的记录改动时产生的"),o("code",[_._v("undo日志")]),_._v("要分别记录（我们稍后阐释为啥这么做），所以在一个事务中"),o("span",{staticStyle:{color:"red"}},[_._v("最多")]),_._v("有4个以"),o("code",[_._v("Undo页面")]),_._v("为节点组成的链表：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a80840261ec?w=1107&h=633&f=png&s=109318",alt:"image_1d7bg5o7c3t11nch988lj51hsl9.png-106.8kB"}})]),_._v(" "),o("p",[_._v("当然，并不是在事务一开始就会为这个事务分配这4个链表，具体分配策略如下：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("刚刚开启事务时，一个"),o("code",[_._v("Undo页面")]),_._v("链表也不分配。")])]),_._v(" "),o("li",[o("p",[_._v("当事务执行过程中向普通表中插入记录或者执行更新记录主键的操作之后，就会为其分配一个"),o("code",[_._v("普通表的insert undo链表")]),_._v("。")])]),_._v(" "),o("li",[o("p",[_._v("当事务执行过程中删除或者更新了普通表中的记录之后，就会为其分配一个"),o("code",[_._v("普通表的update undo链表")]),_._v("。")])]),_._v(" "),o("li",[o("p",[_._v("当事务执行过程中向临时表中插入记录或者执行更新记录主键的操作之后，就会为其分配一个"),o("code",[_._v("临时表的insert undo链表")]),_._v("。")])]),_._v(" "),o("li",[o("p",[_._v("当事务执行过程中删除或者更新了临时表中的记录之后，就会为其分配一个"),o("code",[_._v("临时表的update undo链表")]),_._v("。")])])]),_._v(" "),o("p",[_._v("总结一句就是："),o("span",{staticStyle:{color:"red"}},[_._v("按需分配，啥时候需要啥时候再分配，不需要就不分配")]),_._v("。")]),_._v(" "),o("h3",{attrs:{id:"多个事务中的undo页面链表"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#多个事务中的undo页面链表"}},[_._v("#")]),_._v(" 多个事务中的Undo页面链表")]),_._v(" "),o("p",[_._v("为了尽可能提高"),o("code",[_._v("undo日志")]),_._v("的写入效率，"),o("span",{staticStyle:{color:"red"}},[_._v("不同事务执行过程中产生的undo日志需要被写入到不同的Undo页面链表中")]),_._v("。比方说现在有事务"),o("code",[_._v("id")]),_._v("分别为"),o("code",[_._v("1")]),_._v("、"),o("code",[_._v("2")]),_._v("的两个事务，我们分别称之为"),o("code",[_._v("trx 1")]),_._v("和"),o("code",[_._v("trx 2")]),_._v("，假设在这两个事务执行过程中：")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("trx 1")]),_._v("对普通表做了"),o("code",[_._v("DELETE")]),_._v("操作，对临时表做了"),o("code",[_._v("INSERT")]),_._v("和"),o("code",[_._v("UPDATE")]),_._v("操作。")]),_._v(" "),o("p",[o("code",[_._v("InnoDB")]),_._v("会为"),o("code",[_._v("trx 1")]),_._v("分配3个链表，分别是：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("针对普通表的"),o("code",[_._v("update undo链表")])])]),_._v(" "),o("li",[o("p",[_._v("针对临时表的"),o("code",[_._v("insert undo链表")])])]),_._v(" "),o("li",[o("p",[_._v("针对临时表的"),o("code",[_._v("update undo链表")]),_._v("。")])])])]),_._v(" "),o("li",[o("p",[o("code",[_._v("trx 2")]),_._v("对普通表做了"),o("code",[_._v("INSERT")]),_._v("、"),o("code",[_._v("UPDATE")]),_._v("和"),o("code",[_._v("DELETE")]),_._v("操作，没有对临时表做改动。")]),_._v(" "),o("p",[o("code",[_._v("InnoDB")]),_._v("会为"),o("code",[_._v("trx 2")]),_._v("分配2个链表，分别是：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("针对普通表的"),o("code",[_._v("insert undo链表")])])]),_._v(" "),o("li",[o("p",[_._v("针对普通表的"),o("code",[_._v("update undo链表")]),_._v("。")])])])])]),_._v(" "),o("p",[_._v("综上所述，在"),o("code",[_._v("trx 1")]),_._v("和"),o("code",[_._v("trx 2")]),_._v("执行过程中，"),o("code",[_._v("InnoDB")]),_._v("共需为这两个事务分配5个"),o("code",[_._v("Undo页面")]),_._v("链表，画个图就是这样：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a80bf9229a6?w=1145&h=573&f=png&s=99142",alt:"image_1d7blo9dp1m4tj1f1ke9te11654m.png-96.8kB"}})]),_._v(" "),o("p",[_._v("如果有更多的事务，那就意味着可能会产生更多的"),o("code",[_._v("Undo页面")]),_._v("链表。")]),_._v(" "),o("h2",{attrs:{id:"undo日志具体写入过程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#undo日志具体写入过程"}},[_._v("#")]),_._v(" undo日志具体写入过程")]),_._v(" "),o("h3",{attrs:{id:"段-segment-的概念"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#段-segment-的概念"}},[_._v("#")]),_._v(" 段（Segment）的概念")]),_._v(" "),o("p",[_._v("如果你有认真看过表空间那一章的话，对这个"),o("code",[_._v("段")]),_._v("的概念应该印象深刻，我们当时花了非常大的篇幅来唠叨这个概念。简单讲，这个"),o("code",[_._v("段")]),_._v("是一个逻辑上的概念，本质上是由若干个零散页面和若干个完整的区组成的。比如一个"),o("code",[_._v("B+")]),_._v("树索引被划分成两个段，一个叶子节点段，一个非叶子节点段，这样叶子节点就可以被尽可能的存到一起，非叶子节点被尽可能的存到一起。每一个段对应一个"),o("code",[_._v("INODE Entry")]),_._v("结构，这个"),o("code",[_._v("INODE Entry")]),_._v("结构描述了这个段的各种信息，比如段的"),o("code",[_._v("ID")]),_._v("，段内的各种链表基节点，零散页面的页号有哪些等信息（具体该结构中每个属性的意思大家可以到表空间那一章里再次重温一下）。我们前边也说过，为了定位一个"),o("code",[_._v("INODE Entry")]),_._v("，设计"),o("code",[_._v("InnoDB")]),_._v("的大叔设计了一个"),o("code",[_._v("Segment Header")]),_._v("的结构：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a80c187c8c2?w=694&h=361&f=png&s=77504",alt:"image_1d7bp5ndt171bb6rkohot41e023.png-75.7kB"}})]),_._v(" "),o("p",[_._v("整个"),o("code",[_._v("Segment Header")]),_._v("占用10个字节大小，各个属性的意思如下：")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("Space ID of the INODE Entry")]),_._v("："),o("code",[_._v("INODE Entry")]),_._v("结构所在的表空间ID。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("Page Number of the INODE Entry")]),_._v("："),o("code",[_._v("INODE Entry")]),_._v("结构所在的页面页号。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("Byte Offset of the INODE Ent")]),_._v("："),o("code",[_._v("INODE Entry")]),_._v("结构在该页面中的偏移量")])])]),_._v(" "),o("p",[_._v("知道了表空间ID、页号、页内偏移量，不就可以唯一定位一个"),o("code",[_._v("INODE Entry")]),_._v("的地址了么～")]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n这部分关于段的各种概念我们在表空间那一章中都有详细解释，在这里重提一下只是为了唤醒大家沉睡的记忆，如果有任何不清楚的地方可以再次跳回表空间的那一章仔细读一下。\n")])])]),o("h3",{attrs:{id:"undo-log-segment-header"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#undo-log-segment-header"}},[_._v("#")]),_._v(" Undo Log Segment Header")]),_._v(" "),o("p",[_._v("设计"),o("code",[_._v("InnoDB")]),_._v("的大叔规定，每一个"),o("code",[_._v("Undo页面")]),_._v("链表都对应着一个"),o("code",[_._v("段")]),_._v("，称之为"),o("code",[_._v("Undo Log Segment")]),_._v("。也就是说链表中的页面都是从这个段里边申请的，所以他们在"),o("code",[_._v("Undo页面")]),_._v("链表的第一个页面，也就是上边提到的"),o("code",[_._v("first undo page")]),_._v("中设计了一个称之为"),o("code",[_._v("Undo Log Segment Header")]),_._v("的部分，这个部分中包含了该链表对应的段的"),o("code",[_._v("segment header")]),_._v("信息以及其他的一些关于这个段的信息，所以"),o("code",[_._v("Undo")]),_._v("页面链表的第一个页面其实长这样：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a80e0dadcce?w=915&h=555&f=png&s=72243",alt:"image_1d7brcccqah1rdn10573vh1onip.png-70.5kB"}})]),_._v(" "),o("p",[_._v("可以看到这个"),o("code",[_._v("Undo")]),_._v("链表的第一个页面比普通页面多了个"),o("code",[_._v("Undo Log Segment Header")]),_._v("，我们来看一下它的结构：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a80e753a16e?w=642&h=555&f=png&s=82117",alt:"image_1d7bsbk8o15ja2bk1s9p11c51vs2p.png-80.2kB"}})]),_._v(" "),o("p",[_._v("其中各个属性的意思如下：")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("TRX_UNDO_STATE")]),_._v("：本"),o("code",[_._v("Undo页面")]),_._v("链表处在什么状态。")]),_._v(" "),o("p",[_._v("一个"),o("code",[_._v("Undo Log Segment")]),_._v("可能处在的状态包括：")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("TRX_UNDO_ACTIVE")]),_._v("：活跃状态，也就是一个活跃的事务正在往这个段里边写入"),o("code",[_._v("undo日志")]),_._v("。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_CACHED")]),_._v("：被缓存的状态。处在该状态的"),o("code",[_._v("Undo页面")]),_._v("链表等待着之后被其他事务重用。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_TO_FREE")]),_._v("：对于"),o("code",[_._v("insert undo")]),_._v("链表来说，如果在它对应的事务提交之后，该链表不能被重用，那么就会处于这种状态。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_TO_PURGE")]),_._v("：对于"),o("code",[_._v("update undo")]),_._v("链表来说，如果在它对应的事务提交之后，该链表不能被重用，那么就会处于这种状态。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_PREPARED")]),_._v("：包含处于"),o("code",[_._v("PREPARE")]),_._v("阶段的事务产生的"),o("code",[_._v("undo日志")]),_._v("。")])])]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\nUndo页面链表什么时候会被重用，怎么重用我们之后会详细说的。事务的PREPARE阶段是在所谓的分布式事务中才出现的，本书中不会介绍更多关于分布式事务的事情，所以大家目前忽略这个状态就好了。\n")])])])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_LAST_LOG")]),_._v("：本"),o("code",[_._v("Undo页面")]),_._v("链表中最后一个"),o("code",[_._v("Undo Log Header")]),_._v("的位置。")]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n关于什么是Undo Log Header，我们稍后马上介绍哈。\n")])])])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_FSEG_HEADER")]),_._v("：本"),o("code",[_._v("Undo页面")]),_._v("链表对应的段的"),o("code",[_._v("Segment Header")]),_._v("信息（就是我们上一节介绍的那个10字节结构，通过这个信息可以找到该段对应的"),o("code",[_._v("INODE Entry")]),_._v("）。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_PAGE_LIST")]),_._v("："),o("code",[_._v("Undo页面")]),_._v("链表的基节点。")]),_._v(" "),o("p",[_._v("我们上边说"),o("code",[_._v("Undo页面")]),_._v("的"),o("code",[_._v("Undo Page Header")]),_._v("部分有一个12字节大小的"),o("code",[_._v("TRX_UNDO_PAGE_NODE")]),_._v("属性，这个属性代表一个"),o("code",[_._v("List Node")]),_._v("结构。每一个"),o("code",[_._v("Undo页面")]),_._v("都包含"),o("code",[_._v("Undo Page Header")]),_._v("结构，这些页面就可以通过这个属性连成一个链表。这个"),o("code",[_._v("TRX_UNDO_PAGE_LIST")]),_._v("属性代表着这个链表的基节点，当然这个基节点只存在于"),o("code",[_._v("Undo页面")]),_._v("链表的第一个页面，也就是"),o("code",[_._v("first undo page")]),_._v("中。")])])]),_._v(" "),o("h3",{attrs:{id:"undo-log-header"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#undo-log-header"}},[_._v("#")]),_._v(" Undo Log Header")]),_._v(" "),o("p",[_._v("一个事务在向"),o("code",[_._v("Undo页面")]),_._v("中写入"),o("code",[_._v("undo日志")]),_._v("时的方式是十分简单暴力的，就是直接往里怼，写完一条紧接着写另一条，各条"),o("code",[_._v("undo日志")]),_._v("之间是亲密无间的。写完一个"),o("code",[_._v("Undo页面")]),_._v("后，再从段里申请一个新页面，然后把这个页面插入到"),o("code",[_._v("Undo页面")]),_._v("链表中，继续往这个新申请的页面中写。设计"),o("code",[_._v("InnoDB")]),_._v("的大叔认为同一个事务向一个"),o("code",[_._v("Undo页面")]),_._v("链表中写入的"),o("code",[_._v("undo日志")]),_._v("算是一个组，比方说我们上边介绍的"),o("code",[_._v("trx 1")]),_._v("由于会分配3个"),o("code",[_._v("Undo页面")]),_._v("链表，也就会写入3个组的"),o("code",[_._v("undo日志")]),_._v("；"),o("code",[_._v("trx 2")]),_._v("由于会分配2个"),o("code",[_._v("Undo页面")]),_._v("链表，也就会写入2个组的"),o("code",[_._v("undo日志")]),_._v("。在每写入一组"),o("code",[_._v("undo日志")]),_._v("时，都会在这组"),o("code",[_._v("undo日志")]),_._v("前先记录一下关于这个组的一些属性，设计"),o("code",[_._v("InnoDB")]),_._v("的大叔把存储这些属性的地方称之为"),o("code",[_._v("Undo Log Header")]),_._v("。所以"),o("code",[_._v("Undo页面")]),_._v("链表的第一个页面在真正写入"),o("code",[_._v("undo日志")]),_._v("前，其实都会被填充"),o("code",[_._v("Undo Page Header")]),_._v("、"),o("code",[_._v("Undo Log Segment Header")]),_._v("、"),o("code",[_._v("Undo Log Header")]),_._v("这3个部分，如图所示：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a80ee6fb23f?w=964&h=605&f=png&s=83957",alt:"image_1d7cbktqb16oqih12mqmghn2a1m.png-82kB"}})]),_._v(" "),o("p",[_._v("这个"),o("code",[_._v("Undo Log Header")]),_._v("具体的结构如下：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a80f1d5b422?w=500&h=633&f=png&s=125765",alt:"image_1d7cfr3cjsec64714qgucc1s8s9.png-122.8kB"}})]),_._v(" "),o("p",[_._v("哇唔，映入眼帘的又是一大坨属性，我们先大致看一下它们都是啥意思：")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("TRX_UNDO_TRX_ID")]),_._v("：生成本组"),o("code",[_._v("undo日志")]),_._v("的事务"),o("code",[_._v("id")]),_._v("。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_TRX_NO")]),_._v("：事务提交后生成的一个需要序号，使用此序号来标记事务的提交顺序（先提交的此序号小，后提交的此序号大）。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_DEL_MARKS")]),_._v("：标记本组"),o("code",[_._v("undo")]),_._v("日志中是否包含由于"),o("code",[_._v("Delete mark")]),_._v("操作产生的"),o("code",[_._v("undo日志")]),_._v("。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_LOG_START")]),_._v("：表示本组"),o("code",[_._v("undo")]),_._v("日志中第一条"),o("code",[_._v("undo日志")]),_._v("的在页面中的偏移量。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_XID_EXISTS")]),_._v("：本组"),o("code",[_._v("undo日志")]),_._v("是否包含XID信息。")]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n本书不会讲述更多关于XID是个什么东东，有兴趣的同学可以到搜索引擎或者文档中搜一搜哈。\n")])])])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_DICT_TRANS")]),_._v("：标记本组"),o("code",[_._v("undo日志")]),_._v("是不是由DDL语句产生的。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_TABLE_ID")]),_._v("：如果"),o("code",[_._v("TRX_UNDO_DICT_TRANS")]),_._v("为真，那么本属性表示DDL语句操作的表的"),o("code",[_._v("table id")]),_._v("。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_NEXT_LOG")]),_._v("：下一组的"),o("code",[_._v("undo日志")]),_._v("在页面中开始的偏移量。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_PREV_LOG")]),_._v("：上一组的"),o("code",[_._v("undo日志")]),_._v("在页面中开始的偏移量。")]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n一般来说一个Undo页面链表只存储一个事务执行过程中产生的一组undo日志，但是在某些情况下，可能会在一个事务提交之后，之后开启的事务重复利用这个Undo页面链表，这样就会导致一个Undo页面中可能存放多组Undo日志，TRX_UNDO_NEXT_LOG和TRX_UNDO_PREV_LOG就是用来标记下一组和上一组undo日志在页面中的偏移量的。关于什么时候重用Undo页面链表，怎么重用这个链表我们稍后会详细说明的，现在先理解TRX_UNDO_NEXT_LOG和TRX_UNDO_PREV_LOG这两个属性的意思就好了。\n")])])])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_UNDO_HISTORY_NODE")]),_._v("：一个12字节的"),o("code",[_._v("List Node")]),_._v("结构，代表一个称之为"),o("code",[_._v("History")]),_._v("链表的节点。")]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n关于History链表我们后边会格外详细的唠叨，现在先不用管哈。\n")])])])])]),_._v(" "),o("h3",{attrs:{id:"小结"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[_._v("#")]),_._v(" 小结")]),_._v(" "),o("p",[_._v("对于没有被重用的"),o("code",[_._v("Undo页面")]),_._v("链表来说，链表的第一个页面，也就是"),o("code",[_._v("first undo page")]),_._v("在真正写入"),o("code",[_._v("undo日志")]),_._v("前，会填充"),o("code",[_._v("Undo Page Header")]),_._v("、"),o("code",[_._v("Undo Log Segment Header")]),_._v("、"),o("code",[_._v("Undo Log Header")]),_._v("这3个部分，之后才开始正式写入"),o("code",[_._v("undo日志")]),_._v("。对于其他的页面来说，也就是"),o("code",[_._v("normal undo page")]),_._v("在真正写入"),o("code",[_._v("undo日志")]),_._v("前，只会填充"),o("code",[_._v("Undo Page Header")]),_._v("。链表的"),o("code",[_._v("List Base Node")]),_._v("存放到"),o("code",[_._v("first undo page")]),_._v("的"),o("code",[_._v("Undo Log Segment Header")]),_._v("部分，"),o("code",[_._v("List Node")]),_._v("信息存放到每一个"),o("code",[_._v("Undo页面")]),_._v("的"),o("code",[_._v("undo Page Header")]),_._v("部分，所以画一个"),o("code",[_._v("Undo页面")]),_._v("链表的示意图就是这样：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a80f3cc070f?w=1134&h=502&f=png&s=89063",alt:"image_1d7cocjrk1dvm1ehg16da1di4mfb16.png-87kB"}})]),_._v(" "),o("h2",{attrs:{id:"重用undo页面"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#重用undo页面"}},[_._v("#")]),_._v(" 重用Undo页面")]),_._v(" "),o("p",[_._v("我们前边说为了能提高并发执行的多个事务写入"),o("code",[_._v("undo日志")]),_._v("的性能，设计"),o("code",[_._v("InnoDB")]),_._v("的大叔决定为每个事务单独分配相应的"),o("code",[_._v("Undo页面")]),_._v("链表（最多可能单独分配4个链表）。但是这样也造成了一些问题，比如其实大部分事务执行过程中可能只修改了一条或几条记录，针对某个"),o("code",[_._v("Undo页面")]),_._v("链表只产生了非常少的"),o("code",[_._v("undo日志")]),_._v("，这些"),o("code",[_._v("undo日志")]),_._v("可能只占用一丢丢存储空间，每开启一个事务就新创建一个"),o("code",[_._v("Undo页面")]),_._v("链表（虽然这个链表中只有一个页面）来存储这么一丢丢"),o("code",[_._v("undo日志")]),_._v("岂不是太浪费了么？的确是挺浪费，于是设计"),o("code",[_._v("InnoDB")]),_._v("的大叔本着勤俭节约的优良传统，决定在事务提交后在某些情况下重用该事务的"),o("code",[_._v("Undo页面")]),_._v("链表。一个"),o("code",[_._v("Undo页面")]),_._v("链表是否可以被重用的条件很简单：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("该链表中只包含一个"),o("code",[_._v("Undo页面")]),_._v("。")]),_._v(" "),o("p",[_._v("如果一个事务执行过程中产生了非常多的"),o("code",[_._v("undo日志")]),_._v("，那么它可能申请非常多的页面加入到"),o("code",[_._v("Undo页面")]),_._v("链表中。在该事物提交后，如果将整个链表中的页面都重用，那就意味着即使新的事务并没有向该"),o("code",[_._v("Undo页面")]),_._v("链表中写入很多"),o("code",[_._v("undo日志")]),_._v("，那该链表中也得维护非常多的页面，那些用不到的页面也不能被别的事务所使用，这样就造成了另一种浪费。所以设计"),o("code",[_._v("InnoDB")]),_._v("的大叔们规定，只有在"),o("code",[_._v("Undo页面")]),_._v("链表中只包含一个"),o("code",[_._v("Undo页面")]),_._v("时，该链表才可以被下一个事务所重用。")])]),_._v(" "),o("li",[o("p",[_._v("该"),o("code",[_._v("Undo页面")]),_._v("已经使用的空间小于整个页面空间的3/4。")])])]),_._v(" "),o("p",[_._v("我们前边说过，"),o("code",[_._v("Undo页面")]),_._v("链表按照存储的"),o("code",[_._v("undo日志")]),_._v("所属的大类可以被分为"),o("code",[_._v("insert undo链表")]),_._v("和"),o("code",[_._v("update undo链表")]),_._v("两种，这两种链表在被重用时的策略也是不同的，我们分别看一下：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("insert undo链表")]),_._v(" "),o("p",[o("code",[_._v("insert undo链表")]),_._v("中只存储类型为"),o("code",[_._v("TRX_UNDO_INSERT_REC")]),_._v("的"),o("code",[_._v("undo日志")]),_._v("，这种类型的"),o("code",[_._v("undo日志")]),_._v("在事务提交之后就没用了，就可以被清除掉。所以在某个事务提交后，重用这个事务的"),o("code",[_._v("insert undo链表")]),_._v("（这个链表中只有一个页面）时，可以直接把之前事务写入的一组"),o("code",[_._v("undo日志")]),_._v("覆盖掉，从头开始写入新事务的一组"),o("code",[_._v("undo日志")]),_._v("，如下图所示：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a80f3f150f4?w=857&h=514&f=png&s=93950",alt:"image_1d7el7sg0pje14rjc06rp51r8r1m.png-91.7kB"}})]),_._v(" "),o("p",[_._v("如图所示，假设有一个事务使用的"),o("code",[_._v("insert undo链表")]),_._v("，到事务提交时，只向"),o("code",[_._v("insert undo链表")]),_._v("中插入了3条"),o("code",[_._v("undo日志")]),_._v("，这个"),o("code",[_._v("insert undo链表")]),_._v("只申请了一个"),o("code",[_._v("Undo页面")]),_._v("。假设此刻该页面已使用的空间小于整个页面大小的3/4，那么下一个事务就可以重用这个"),o("code",[_._v("insert undo链表")]),_._v("（链表中只有一个页面）。假设此时有一个新事务重用了该"),o("code",[_._v("insert undo链表")]),_._v("，那么可以直接把旧的一组"),o("code",[_._v("undo日志")]),_._v("覆盖掉，写入一组新的"),o("code",[_._v("undo日志")]),_._v("。")]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n当然，在重用Undo页面链表写入新的一组undo日志时，不仅会写入新的Undo Log Header，还会适当调整Undo Page Header、Undo Log Segment Header、Undo Log Header中的一些属性，比如TRX_UNDO_PAGE_START、TRX_UNDO_PAGE_FREE等等等等，这些我们就不具体唠叨了。\n")])])])]),_._v(" "),o("li",[o("p",[_._v("update undo链表")]),_._v(" "),o("p",[_._v("在一个事务提交后，它的"),o("code",[_._v("update undo链表")]),_._v("中的"),o("code",[_._v("undo日志")]),_._v("也不能立即删除掉（这些日志用于MVCC，我们后边会说的）。所以如果之后的事务想重用"),o("code",[_._v("update undo链表")]),_._v("时，就不能覆盖之前事务写入的"),o("code",[_._v("undo日志")]),_._v("。这样就相当于在同一个"),o("code",[_._v("Undo页面")]),_._v("中写入了多组的"),o("code",[_._v("undo日志")]),_._v("，效果看起来就是这样：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a81007cdf9f?w=1003&h=560&f=png&s=129368",alt:"image_1d7elkmtjdbv1kth1c9jk17is123.png-126.3kB"}})])])]),_._v(" "),o("h2",{attrs:{id:"回滚段"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#回滚段"}},[_._v("#")]),_._v(" 回滚段")]),_._v(" "),o("h3",{attrs:{id:"回滚段的概念"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#回滚段的概念"}},[_._v("#")]),_._v(" 回滚段的概念")]),_._v(" "),o("p",[_._v("我们现在知道一个事务在执行过程中最多可以分配4个"),o("code",[_._v("Undo页面")]),_._v("链表，在同一时刻不同事务拥有的"),o("code",[_._v("Undo页面")]),_._v("链表是不一样的，所以在同一时刻系统里其实可以有许许多多个"),o("code",[_._v("Undo页面")]),_._v("链表存在。为了更好的管理这些链表，设计"),o("code",[_._v("InnoDB")]),_._v("的大叔又设计了一个称之为"),o("code",[_._v("Rollback Segment Header")]),_._v("的页面，在这个页面中存放了各个"),o("code",[_._v("Undo页面")]),_._v("链表的"),o("code",[_._v("frist undo page")]),_._v("的"),o("code",[_._v("页号")]),_._v("，他们把这些"),o("code",[_._v("页号")]),_._v("称之为"),o("code",[_._v("undo slot")]),_._v("。我们可以这样理解，每个"),o("code",[_._v("Undo页面")]),_._v("链表都相当于是一个班，这个链表的"),o("code",[_._v("first undo page")]),_._v("就相当于这个班的班长，找到了这个班的班长，就可以找到班里的其他同学（其他同学相当于"),o("code",[_._v("normal undo page")]),_._v("）。有时候学校需要向这些班级传达一下精神，就需要把班长都召集在会议室，这个"),o("code",[_._v("Rollback Segment Header")]),_._v("就相当于是一个会议室。")]),_._v(" "),o("p",[_._v("我们看一下这个称之为"),o("code",[_._v("Rollback Segment Header")]),_._v("的页面长啥样（以默认的16KB为例）：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a810434772a?w=676&h=541&f=png&s=90109",alt:"image_1d7gs2k8u1i9i15r71dg97fj10jv9.png-88kB"}})]),_._v(" "),o("p",[_._v("设计"),o("code",[_._v("InnoDB")]),_._v("的大叔规定，每一个"),o("code",[_._v("Rollback Segment Header")]),_._v("页面都对应着一个段，这个段就称为"),o("code",[_._v("Rollback Segment")]),_._v("，翻译过来就是"),o("code",[_._v("回滚段")]),_._v("。与我们之前介绍的各种段不同的是，这个"),o("code",[_._v("Rollback Segment")]),_._v("里其实只有一个页面（这可能是设计"),o("code",[_._v("InnoDB")]),_._v("的大叔们的一种洁癖，他们可能觉得为了某个目的去分配页面的话都得先申请一个段，或者他们觉得虽然目前版本的"),o("code",[_._v("MySQL")]),_._v("里"),o("code",[_._v("Rollback Segment")]),_._v("里其实只有一个页面，但可能之后的版本里会增加页面也说不定）。")]),_._v(" "),o("p",[_._v("了解了"),o("code",[_._v("Rollback Segment")]),_._v("的含义之后，我们再来看看这个称之为"),o("code",[_._v("Rollback Segment Header")]),_._v("的页面的各个部分的含义都是啥意思：")]),_._v(" "),o("ul",[o("li",[o("p",[o("code",[_._v("TRX_RSEG_MAX_SIZE")]),_._v("：本"),o("code",[_._v("Rollback Segment")]),_._v("中管理的所有"),o("code",[_._v("Undo页面")]),_._v("链表中的"),o("code",[_._v("Undo页面")]),_._v("数量之和的最大值。换句话说，本"),o("code",[_._v("Rollback Segment")]),_._v("中所有"),o("code",[_._v("Undo页面")]),_._v("链表中的"),o("code",[_._v("Undo页面")]),_._v("数量之和不能超过"),o("code",[_._v("TRX_RSEG_MAX_SIZE")]),_._v("代表的值。")]),_._v(" "),o("p",[_._v("该属性的值默认为无限大，也就是我们想写多少"),o("code",[_._v("Undo页面")]),_._v("都可以。")]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n无限大其实也只是个夸张的说法，4个字节能表示最大的数也就是0xFFFFFFFF，但是我们之后会看到，0xFFFFFFFF这个数有特殊用途，所以实际上TRX_RSEG_MAX_SIZE的值为0xFFFFFFFE。\n")])])])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_RSEG_HISTORY_SIZE")]),_._v("："),o("code",[_._v("History")]),_._v("链表占用的页面数量。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_RSEG_HISTORY")]),_._v("："),o("code",[_._v("History")]),_._v("链表的基节点。")]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\nHistory链表后边讲，稍安勿躁。\n")])])])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_RSEG_FSEG_HEADER")]),_._v("：本"),o("code",[_._v("Rollback Segment")]),_._v("对应的10字节大小的"),o("code",[_._v("Segment Header")]),_._v("结构，通过它可以找到本段对应的"),o("code",[_._v("INODE Entry")]),_._v("。")])]),_._v(" "),o("li",[o("p",[o("code",[_._v("TRX_RSEG_UNDO_SLOTS")]),_._v("：各个"),o("code",[_._v("Undo页面")]),_._v("链表的"),o("code",[_._v("first undo page")]),_._v("的"),o("code",[_._v("页号")]),_._v("集合，也就是"),o("code",[_._v("undo slot")]),_._v("集合。")]),_._v(" "),o("p",[_._v("一个页号占用"),o("code",[_._v("4")]),_._v("个字节，对于"),o("code",[_._v("16KB")]),_._v("大小的页面来说，这个"),o("code",[_._v("TRX_RSEG_UNDO_SLOTS")]),_._v("部分共存储了"),o("code",[_._v("1024")]),_._v("个"),o("code",[_._v("undo slot")]),_._v("，所以共需"),o("code",[_._v("1024 × 4 = 4096")]),_._v("个字节。")])])]),_._v(" "),o("h3",{attrs:{id:"从回滚段中申请undo页面链表"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#从回滚段中申请undo页面链表"}},[_._v("#")]),_._v(" 从回滚段中申请Undo页面链表")]),_._v(" "),o("p",[_._v("初始情况下，由于未向任何事务分配任何"),o("code",[_._v("Undo页面")]),_._v("链表，所以对于一个"),o("code",[_._v("Rollback Segment Header")]),_._v("页面来说，它的各个"),o("code",[_._v("undo slot")]),_._v("都被设置成了一个特殊的值："),o("code",[_._v("FIL_NULL")]),_._v("（对应的十六进制就是"),o("code",[_._v("0xFFFFFFFF")]),_._v("），表示该"),o("code",[_._v("undo slot")]),_._v("不指向任何页面。")]),_._v(" "),o("p",[_._v("随着时间的流逝，开始有事务需要分配"),o("code",[_._v("Undo页面")]),_._v("链表了，就从回滚段的第一个"),o("code",[_._v("undo slot")]),_._v("开始，看看该"),o("code",[_._v("undo slot")]),_._v("的值是不是"),o("code",[_._v("FIL_NULL")]),_._v("：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("如果是"),o("code",[_._v("FIL_NULL")]),_._v("，那么在表空间中新创建一个段（也就是"),o("code",[_._v("Undo Log Segment")]),_._v("），然后从段里申请一个页面作为"),o("code",[_._v("Undo页面")]),_._v("链表的"),o("code",[_._v("first undo page")]),_._v("，然后把该"),o("code",[_._v("undo slot")]),_._v("的值设置为刚刚申请的这个页面的地址，这样也就意味着这个"),o("code",[_._v("undo slot")]),_._v("被分配给了这个事务。")])]),_._v(" "),o("li",[o("p",[_._v("如果不是"),o("code",[_._v("FIL_NULL")]),_._v("，说明该"),o("code",[_._v("undo slot")]),_._v("已经指向了一个"),o("code",[_._v("undo链表")]),_._v("，也就是说这个"),o("code",[_._v("undo slot")]),_._v("已经被别的事务占用了，那就跳到下一个"),o("code",[_._v("undo slot")]),_._v("，判断该"),o("code",[_._v("undo slot")]),_._v("的值是不是"),o("code",[_._v("FIL_NULL")]),_._v("，重复上边的步骤。")])])]),_._v(" "),o("p",[_._v("一个"),o("code",[_._v("Rollback Segment Header")]),_._v("页面中包含"),o("code",[_._v("1024")]),_._v("个"),o("code",[_._v("undo slot")]),_._v("，如果这"),o("code",[_._v("1024")]),_._v("个"),o("code",[_._v("undo slot")]),_._v("的值都不为"),o("code",[_._v("FIL_NULL")]),_._v("，这就意味着这"),o("code",[_._v("1024")]),_._v("个"),o("code",[_._v("undo slot")]),_._v("都已经名花有主（被分配给了某个事务），此时由于新事务无法再获得新的"),o("code",[_._v("Undo页面")]),_._v("链表，就会回滚这个事务并且给用户报错：")]),_._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("Too many active concurrent transactions\n")])])]),o("p",[_._v("用户看到这个错误，可以选择重新执行这个事务（可能重新执行时有别的事务提交了，该事务就可以被分配"),o("code",[_._v("Undo页面")]),_._v("链表了）。")]),_._v(" "),o("p",[_._v("当一个事务提交时，它所占用的"),o("code",[_._v("undo slot")]),_._v("有两种命运：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("如果该"),o("code",[_._v("undo slot")]),_._v("指向的"),o("code",[_._v("Undo页面")]),_._v("链表符合被重用的条件（就是我们上边说的"),o("code",[_._v("Undo页面")]),_._v("链表只占用一个页面并且已使用空间小于整个页面的3/4）。")]),_._v(" "),o("p",[_._v("该"),o("code",[_._v("undo slot")]),_._v("就处于被缓存的状态，设计"),o("code",[_._v("InnoDB")]),_._v("的大叔规定这时该"),o("code",[_._v("Undo页面")]),_._v("链表的"),o("code",[_._v("TRX_UNDO_STATE")]),_._v("属性（该属性在"),o("code",[_._v("first undo page")]),_._v("的"),o("code",[_._v("Undo Log Segment Header")]),_._v("部分）会被设置为"),o("code",[_._v("TRX_UNDO_CACHED")]),_._v("。")]),_._v(" "),o("p",[_._v("被缓存的"),o("code",[_._v("undo slot")]),_._v("都会被加入到一个链表，根据对应的"),o("code",[_._v("Undo页面")]),_._v("链表的类型不同，也会被加入到不同的链表：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("如果对应的"),o("code",[_._v("Undo页面")]),_._v("链表是"),o("code",[_._v("insert undo链表")]),_._v("，则该"),o("code",[_._v("undo slot")]),_._v("会被加入"),o("code",[_._v("insert undo cached链表")]),_._v("。")])]),_._v(" "),o("li",[o("p",[_._v("如果对应的"),o("code",[_._v("Undo页面")]),_._v("链表是"),o("code",[_._v("update undo链表")]),_._v("，则该"),o("code",[_._v("undo slot")]),_._v("会被加入"),o("code",[_._v("update undo cached链表")]),_._v("。")])])]),_._v(" "),o("p",[_._v("一个回滚段就对应着上述两个"),o("code",[_._v("cached链表")]),_._v("，如果有新事务要分配"),o("code",[_._v("undo slot")]),_._v("时，先从对应的"),o("code",[_._v("cached链表")]),_._v("中找。如果没有被缓存的"),o("code",[_._v("undo slot")]),_._v("，才会到回滚段的"),o("code",[_._v("Rollback Segment Header")]),_._v("页面中再去找。")])]),_._v(" "),o("li",[o("p",[_._v("如果该"),o("code",[_._v("undo slot")]),_._v("指向的"),o("code",[_._v("Undo页面")]),_._v("链表不符合被重用的条件，那么针对该"),o("code",[_._v("undo slot")]),_._v("对应的"),o("code",[_._v("Undo页面")]),_._v("链表类型不同，也会有不同的处理：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("如果对应的"),o("code",[_._v("Undo页面")]),_._v("链表是"),o("code",[_._v("insert undo链表")]),_._v("，则该"),o("code",[_._v("Undo页面")]),_._v("链表的"),o("code",[_._v("TRX_UNDO_STATE")]),_._v("属性会被设置为"),o("code",[_._v("TRX_UNDO_TO_FREE")]),_._v("，之后该"),o("code",[_._v("Undo页面")]),_._v("链表对应的段会被释放掉（也就意味着段中的页面可以被挪作他用），然后把该"),o("code",[_._v("undo slot")]),_._v("的值设置为"),o("code",[_._v("FIL_NULL")]),_._v("。")])]),_._v(" "),o("li",[o("p",[_._v("如果对应的"),o("code",[_._v("Undo页面")]),_._v("链表是"),o("code",[_._v("update undo链表")]),_._v("，则该"),o("code",[_._v("Undo页面")]),_._v("链表的"),o("code",[_._v("TRX_UNDO_STATE")]),_._v("属性会被设置为"),o("code",[_._v("TRX_UNDO_TO_PRUGE")]),_._v("，则会将该"),o("code",[_._v("undo slot")]),_._v("的值设置为"),o("code",[_._v("FIL_NULL")]),_._v("，然后将本次事务写入的一组"),o("code",[_._v("undo")]),_._v("日志放到所谓的"),o("code",[_._v("History链表")]),_._v("中（需要注意的是，这里并不会将"),o("code",[_._v("Undo页面")]),_._v("链表对应的段给释放掉，因为这些"),o("code",[_._v("undo")]),_._v("日志还有用呢～）。")])])]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n更多关于History链表的事我们稍后再说，稍安勿躁哈。\n")])])])])]),_._v(" "),o("h3",{attrs:{id:"多个回滚段"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#多个回滚段"}},[_._v("#")]),_._v(" 多个回滚段")]),_._v(" "),o("p",[_._v("我们说一个事务执行过程中最多分配"),o("code",[_._v("4")]),_._v("个"),o("code",[_._v("Undo页面")]),_._v("链表，而一个回滚段里只有"),o("code",[_._v("1024")]),_._v("个"),o("code",[_._v("undo slot")]),_._v("，很显然"),o("code",[_._v("undo slot")]),_._v("的数量有点少啊。我们即使假设一个读写事务执行过程中只分配"),o("code",[_._v("1")]),_._v("个"),o("code",[_._v("Undo页面")]),_._v("链表，那"),o("code",[_._v("1024")]),_._v("个"),o("code",[_._v("undo slot")]),_._v("也只能支持"),o("code",[_._v("1024")]),_._v("个读写事务同时执行，再多了就崩溃了。这就相当于会议室只能容下1024个班长同时开会，如果有几千人同时到会议室开会的话，那后来的那些班长就没地方坐了，只能等待前边的人开完会自己再进去开。")]),_._v(" "),o("p",[_._v("话说在"),o("code",[_._v("InnoDB")]),_._v("的早期发展阶段的确只有一个回滚段，但是设计"),o("code",[_._v("InnoDB")]),_._v("的大叔后来意识到了这个问题，咋解决这问题呢？会议室不够，多盖几个会议室不就得了。所以设计"),o("code",[_._v("InnoDB")]),_._v("的大叔一口气定义了"),o("code",[_._v("128")]),_._v("个回滚段，也就相当于有了"),o("code",[_._v("128 × 1024 = 131072")]),_._v("个"),o("code",[_._v("undo slot")]),_._v("。假设一个读写事务执行过程中只分配"),o("code",[_._v("1")]),_._v("个"),o("code",[_._v("Undo页面")]),_._v("链表，那么就可以同时支持"),o("code",[_._v("131072")]),_._v("个读写事务并发执行（这么多事务在一台机器上并发执行，还真没见过呢～）。")]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n只读事务并不需要分配Undo页面链表，MySQL 5.7中所有刚开启的事务默认都是只读事务，只有在事务执行过程中对记录做了某些改动时才会被升级为读写事务。\n")])])]),o("p",[_._v("每个回滚段都对应着一个"),o("code",[_._v("Rollback Segment Header")]),_._v("页面，有128个回滚段，自然就要有128个"),o("code",[_._v("Rollback Segment Header")]),_._v("页面，这些页面的地址总得找个地方存一下吧！于是设计"),o("code",[_._v("InnoDB")]),_._v("的大叔在系统表空间的第"),o("code",[_._v("5")]),_._v("号页面的某个区域包含了128个8字节大小的格子：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a810c4f1311?w=665&h=465&f=png&s=28093",alt:"image_1d7214jha1cua1dgu1r6718091gbfm.png-27.4kB"}})]),_._v(" "),o("p",[_._v("每个8字节的格子的构造就像这样：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a810fe2ad15?w=362&h=161&f=png&s=10187",alt:"image_1d721oblche9a4pmng15p1dk313.png-9.9kB"}})]),_._v(" "),o("p",[_._v("如果所示，每个8字节的格子其实由两部分组成：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("4字节大小的"),o("code",[_._v("Space ID")]),_._v("，代表一个表空间的ID。")])]),_._v(" "),o("li",[o("p",[_._v("4字节大小的"),o("code",[_._v("Page number")]),_._v("，代表一个页号。")])])]),_._v(" "),o("p",[_._v("也就是说每个8字节大小的"),o("code",[_._v("格子")]),_._v("相当于一个指针，指向某个表空间中的某个页面，这些页面就是"),o("code",[_._v("Rollback Segment Header")]),_._v("。这里需要注意的一点事，要定位一个"),o("code",[_._v("Rollback Segment Header")]),_._v("还需要知道对应的表空间ID，这也就意味着"),o("span",{staticStyle:{color:"red"}},[_._v("不同的回滚段可能分布在不同的表空间中")]),_._v("。")]),_._v(" "),o("p",[_._v("所以通过上边的叙述我们可以大致清楚，在系统表空间的第"),o("code",[_._v("5")]),_._v("号页面中存储了128个"),o("code",[_._v("Rollback Segment Header")]),_._v("页面地址，每个"),o("code",[_._v("Rollback Segment Header")]),_._v("就相当于一个回滚段。在"),o("code",[_._v("Rollback Segment Header")]),_._v("页面中，又包含"),o("code",[_._v("1024")]),_._v("个"),o("code",[_._v("undo slot")]),_._v("，每个"),o("code",[_._v("undo slot")]),_._v("都对应一个"),o("code",[_._v("Undo页面")]),_._v("链表。我们画个示意图：")]),_._v(" "),o("p",[o("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/16/16a24a8116df4474?w=1070&h=618&f=png&s=99368",alt:"image_1d7h72gvlin31far16h11elj16tu1m.png-97kB"}})]),_._v(" "),o("p",[_._v("把图一画出来就清爽多了。")]),_._v(" "),o("h3",{attrs:{id:"回滚段的分类"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#回滚段的分类"}},[_._v("#")]),_._v(" 回滚段的分类")]),_._v(" "),o("p",[_._v("我们把这128个回滚段给编一下号，最开始的回滚段称之为"),o("code",[_._v("第0号回滚段")]),_._v("，之后依次递增，最后一个回滚段就称之为"),o("code",[_._v("第127号回滚段")]),_._v("。这128个回滚段可以被分成两大类：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("第"),o("code",[_._v("0")]),_._v("号、第"),o("code",[_._v("33～127")]),_._v("号回滚段属于一类。其中第"),o("code",[_._v("0")]),_._v("号回滚段必须在系统表空间中（就是说第"),o("code",[_._v("0")]),_._v("号回滚段对应的"),o("code",[_._v("Rollback Segment Header")]),_._v("页面必须在系统表空间中），第"),o("code",[_._v("33～127")]),_._v("号回滚段既可以在系统表空间中，也可以在自己配置的"),o("code",[_._v("undo")]),_._v("表空间中，关于怎么配置我们稍后再说。")]),_._v(" "),o("p",[_._v("如果一个事务在执行过程中由于对普通表的记录做了改动需要分配"),o("code",[_._v("Undo页面")]),_._v("链表时，必须从这一类的段中分配相应的"),o("code",[_._v("undo slot")]),_._v("。")])]),_._v(" "),o("li",[o("p",[_._v("第"),o("code",[_._v("1～32")]),_._v("号回滚段属于一类。这些回滚段必须在临时表空间（对应着数据目录中的"),o("code",[_._v("ibtmp1")]),_._v("文件）中。")]),_._v(" "),o("p",[_._v("如果一个事务在执行过程中由于对临时表的记录做了改动需要分配"),o("code",[_._v("Undo页面")]),_._v("链表时，必须从这一类的段中分配相应的"),o("code",[_._v("undo slot")]),_._v("。")])])]),_._v(" "),o("p",[_._v("也就是说如果一个事务在执行过程中既对普通表的记录做了改动，又对临时表的记录做了改动，那么需要为这个记录分配2个回滚段，再分别到这两个回滚段中分配对应的"),o("code",[_._v("undo slot")]),_._v("。")]),_._v(" "),o("p",[_._v("不知道大家有没有疑惑，为啥要把针对普通表和临时表来划分不同种类的"),o("code",[_._v("回滚段")]),_._v("呢？这个还得从"),o("code",[_._v("Undo页面")]),_._v("本身说起，我们说"),o("code",[_._v("Undo页面")]),_._v("其实是类型为"),o("code",[_._v("FIL_PAGE_UNDO_LOG")]),_._v("的页面的简称，说到底它也是一个普通的页面。我们前边说过，在修改页面之前一定要先把对应的"),o("code",[_._v("redo日志")]),_._v("写上，这样在系统奔溃重启时才能恢复到奔溃前的状态。我们向"),o("code",[_._v("Undo页面")]),_._v("写入"),o("code",[_._v("undo日志")]),_._v("本身也是一个写页面的过程，设计"),o("code",[_._v("InnoDB")]),_._v("的大叔为此还设计了许多种"),o("code",[_._v("redo日志")]),_._v("的类型，比方说"),o("code",[_._v("MLOG_UNDO_HDR_CREATE")]),_._v("、"),o("code",[_._v("MLOG_UNDO_INSERT")]),_._v("、"),o("code",[_._v("MLOG_UNDO_INIT")]),_._v("等等等等，也就是说我们对"),o("code",[_._v("Undo页面")]),_._v("做的任何改动都会记录相应类型的"),o("code",[_._v("redo日志")]),_._v("。但是对于临时表来说，因为修改临时表而产生的"),o("code",[_._v("undo日志")]),_._v("只需要在系统运行过程中有效，如果系统奔溃了，那么在重启时也不需要恢复这些"),o("code",[_._v("undo")]),_._v("日志所在的页面，所以在写针对临时表的"),o("code",[_._v("Undo页面")]),_._v("时，并不需要记录相应的"),o("code",[_._v("redo日志")]),_._v("。总结一下针对普通表和临时表划分不同种类的"),o("code",[_._v("回滚段")]),_._v("的原因："),o("span",{staticStyle:{color:"red"}},[_._v("在修改针对普通表的回滚段中的Undo页面时，需要记录对应的redo日志，而修改针对临时表的回滚段中的Undo页面时，不需要记录对应的redo日志")]),_._v("。")]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n实际上在MySQL 5.7.21这个版本中，如果我们仅仅对普通表的记录做了改动，那么只会为该事务分配针对普通表的回滚段，不分配针对临时表的回滚段。但是如果我们仅仅对临时表的记录做了改动，那么既会为该事务分配针对普通表的回滚段，又会为其分配针对临时表的回滚段（不过分配了回滚段并不会立即分配undo slot，只有在真正需要Undo页面链表时才会去分配回滚段中的undo slot）。\n")])])]),o("h3",{attrs:{id:"为事务分配undo页面链表详细过程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#为事务分配undo页面链表详细过程"}},[_._v("#")]),_._v(" 为事务分配Undo页面链表详细过程")]),_._v(" "),o("p",[_._v("上边说了一大堆的概念，大家应该有一点点的小晕，接下来我们以事务对普通表的记录做改动为例，给大家梳理一下事务执行过程中分配"),o("code",[_._v("Undo页面")]),_._v("链表时的完整过程，")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("事务在执行过程中对普通表的记录首次做改动之前，首先会到系统表空间的第"),o("code",[_._v("5")]),_._v("号页面中分配一个回滚段（其实就是获取一个"),o("code",[_._v("Rollback Segment Header")]),_._v("页面的地址）。一旦某个回滚段被分配给了这个事务，那么之后该事务中再对普通表的记录做改动时，就不会重复分配了。")]),_._v(" "),o("p",[_._v("使用传说中的"),o("code",[_._v("round-robin")]),_._v("（循环使用）方式来分配回滚段。比如当前事务分配了第"),o("code",[_._v("0")]),_._v("号回滚段，那么下一个事务就要分配第"),o("code",[_._v("33")]),_._v("号回滚段，下下个事务就要分配第"),o("code",[_._v("34")]),_._v("号回滚段，简单一点的说就是这些回滚段被轮着分配给不同的事务（就是这么简单粗暴，没啥好说的）。")])]),_._v(" "),o("li",[o("p",[_._v("在分配到回滚段后，首先看一下这个回滚段的两个"),o("code",[_._v("cached链表")]),_._v("有没有已经缓存了的"),o("code",[_._v("undo slot")]),_._v("，比如如果事务做的是"),o("code",[_._v("INSERT")]),_._v("操作，就去回滚段对应的"),o("code",[_._v("insert undo cached链表")]),_._v("中看看有没有缓存的"),o("code",[_._v("undo slot")]),_._v("；如果事务做的是"),o("code",[_._v("DELETE")]),_._v("操作，就去回滚段对应的"),o("code",[_._v("update undo cached链表")]),_._v("中看看有没有缓存的"),o("code",[_._v("undo slot")]),_._v("。如果有缓存的"),o("code",[_._v("undo slot")]),_._v("，那么就把这个缓存的"),o("code",[_._v("undo slot")]),_._v("分配给该事务。")])]),_._v(" "),o("li",[o("p",[_._v("如果没有缓存的"),o("code",[_._v("undo slot")]),_._v("可供分配，那么就要到"),o("code",[_._v("Rollback Segment Header")]),_._v("页面中找一个可用的"),o("code",[_._v("undo slot")]),_._v("分配给当前事务。")]),_._v(" "),o("p",[_._v("从"),o("code",[_._v("Rollback Segment Header")]),_._v("页面中分配可用的"),o("code",[_._v("undo slot")]),_._v("的方式我们上边也说过了，就是从第"),o("code",[_._v("0")]),_._v("个"),o("code",[_._v("undo slot")]),_._v("开始，如果该"),o("code",[_._v("undo slot")]),_._v("的值为"),o("code",[_._v("FIL_NULL")]),_._v("，意味着这个"),o("code",[_._v("undo slot")]),_._v("是空闲的，就把这个"),o("code",[_._v("undo slot")]),_._v("分配给当前事务，否则查看第"),o("code",[_._v("1")]),_._v("个"),o("code",[_._v("undo slot")]),_._v("是否满足条件，依次类推，直到最后一个"),o("code",[_._v("undo slot")]),_._v("。如果这"),o("code",[_._v("1024")]),_._v("个"),o("code",[_._v("undo slot")]),_._v("都没有值为"),o("code",[_._v("FIL_NULL")]),_._v("的情况，就直接报错喽（一般不会出现这种情况）～")])]),_._v(" "),o("li",[o("p",[_._v("找到可用的"),o("code",[_._v("undo slot")]),_._v("后，如果该"),o("code",[_._v("undo slot")]),_._v("是从"),o("code",[_._v("cached链表")]),_._v("中获取的，那么它对应的"),o("code",[_._v("Undo Log Segment")]),_._v("已经分配了，否则的话需要重新分配一个"),o("code",[_._v("Undo Log Segment")]),_._v("，然后从该"),o("code",[_._v("Undo Log Segment")]),_._v("中申请一个页面作为"),o("code",[_._v("Undo页面")]),_._v("链表的"),o("code",[_._v("first undo page")]),_._v("。")])]),_._v(" "),o("li",[o("p",[_._v("然后事务就可以把"),o("code",[_._v("undo日志")]),_._v("写入到上边申请的"),o("code",[_._v("Undo页面")]),_._v("链表了！")])])]),_._v(" "),o("p",[_._v("对临时表的记录做改动的步骤和上述的一样，就不赘述了。不错需要再次强调一次，"),o("span",{staticStyle:{color:"red"}},[_._v("如果一个事务在执行过程中既对普通表的记录做了改动，又对临时表的记录做了改动，那么需要为这个记录分配2个回滚段。并发执行的不同事务其实也可以被分配相同的回滚段，只要分配不同的undo slot就可以了")]),_._v("。")]),_._v(" "),o("h2",{attrs:{id:"回滚段相关配置"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#回滚段相关配置"}},[_._v("#")]),_._v(" 回滚段相关配置")]),_._v(" "),o("h3",{attrs:{id:"配置回滚段数量"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#配置回滚段数量"}},[_._v("#")]),_._v(" 配置回滚段数量")]),_._v(" "),o("p",[_._v("我们前边说系统中一共有"),o("code",[_._v("128")]),_._v("个回滚段，其实这只是默认值，我们可以通过启动参数"),o("code",[_._v("innodb_rollback_segments")]),_._v("来配置回滚段的数量，可配置的范围是"),o("code",[_._v("1~128")]),_._v("。但是这个参数并不会影响针对临时表的回滚段数量，针对临时表的回滚段数量一直是"),o("code",[_._v("32")]),_._v("，也就是说：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("如果我们把"),o("code",[_._v("innodb_rollback_segments")]),_._v("的值设置为"),o("code",[_._v("1")]),_._v("，那么只会有1个针对普通表的可用回滚段，但是仍然有32个针对临时表的可用回滚段。")])]),_._v(" "),o("li",[o("ul",[o("li",[_._v("如果我们把"),o("code",[_._v("innodb_rollback_segments")]),_._v("的值设置为"),o("code",[_._v("2～33")]),_._v("之间的数，效果和将其设置为"),o("code",[_._v("1")]),_._v("是一样的。")])])]),_._v(" "),o("li",[o("p",[_._v("如果我们把"),o("code",[_._v("innodb_rollback_segments")]),_._v("设置为大于"),o("code",[_._v("33")]),_._v("的数，那么针对普通表的可用回滚段数量就是该值减去32。")])])]),_._v(" "),o("h3",{attrs:{id:"配置undo表空间"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#配置undo表空间"}},[_._v("#")]),_._v(" 配置undo表空间")]),_._v(" "),o("p",[_._v("默认情况下，针对普通表设立的回滚段（第"),o("code",[_._v("0")]),_._v("号以及第"),o("code",[_._v("33~127")]),_._v("号回滚段）都是被分配到系统表空间的。其中的第第"),o("code",[_._v("0")]),_._v("号回滚段是一直在系统表空间的，但是第"),o("code",[_._v("33~127")]),_._v("号回滚段可以通过配置放到自定义的"),o("code",[_._v("undo表空间")]),_._v("中。但是这种配置只能在系统初始化（创建数据目录时）的时候使用，一旦初始化完成，之后就不能再次更改了。我们看一下相关启动参数：")]),_._v(" "),o("ul",[o("li",[o("p",[_._v("通过"),o("code",[_._v("innodb_undo_directory")]),_._v("指定"),o("code",[_._v("undo表空间")]),_._v("所在的目录，如果没有指定该参数，则默认"),o("code",[_._v("undo表空间")]),_._v("所在的目录就是数据目录。")])]),_._v(" "),o("li",[o("p",[_._v("通过"),o("code",[_._v("innodb_undo_tablespaces")]),_._v("定义"),o("code",[_._v("undo表空间")]),_._v("的数量。该参数的默认值为"),o("code",[_._v("0")]),_._v("，表明不创建任何"),o("code",[_._v("undo表空间")]),_._v("。")]),_._v(" "),o("p",[_._v("第"),o("code",[_._v("33~127")]),_._v("号回滚段可以平均分布到不同的"),o("code",[_._v("undo表空间")]),_._v("中。")])])]),_._v(" "),o("div",{staticClass:"language-! extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[_._v("小贴士：\n\n如果我们在系统初始化的时候指定了创建了undo表空间，那么系统表空间中的第0号回滚段将处于不可用状态。\n")])])]),o("p",[_._v("比如我们在系统初始化时指定的"),o("code",[_._v("innodb_rollback_segments")]),_._v("为"),o("code",[_._v("35")]),_._v("，"),o("code",[_._v("innodb_undo_tablespaces")]),_._v("为"),o("code",[_._v("2")]),_._v("，这样就会将第"),o("code",[_._v("33")]),_._v("、"),o("code",[_._v("34")]),_._v("号回滚段分别分布到一个"),o("code",[_._v("undo表空间")]),_._v("中。")]),_._v(" "),o("p",[_._v("设立"),o("code",[_._v("undo表空间")]),_._v("的一个好处就是在"),o("code",[_._v("undo表空间")]),_._v("中的文件大到一定程度时，可以自动的将该"),o("code",[_._v("undo表空间")]),_._v("截断（truncate）成一个小文件。而系统表空间的大小只能不断的增大，却不能截断。")])])}),[],!1,null,null,null);v.default=e.exports}}]);