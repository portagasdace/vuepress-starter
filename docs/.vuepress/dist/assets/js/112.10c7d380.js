(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{468:function(t,a,e){"use strict";e.r(a);var s=e(42),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"数据请求的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据请求的实现"}},[t._v("#")]),t._v(" 数据请求的实现")]),t._v(" "),e("p",[t._v("前面在实现信息流的时候，使用的是本地写死的数据，这个肯定是不行的，所以本节介绍如何去请求数据并将数据显示出来。")]),t._v(" "),e("h2",{attrs:{id:"豆瓣电影的api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#豆瓣电影的api"}},[t._v("#")]),t._v(" 豆瓣电影的API")]),t._v(" "),e("p",[t._v("豆瓣电影的API参考的是 "),e("a",{attrs:{href:"https://github.com/koudle/The-Guide-to-the-Flutter/blob/master/flutter_doubanmovie/douban_api.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),e("OutboundLink")],1),t._v(" 上的资料，API包括：")]),t._v(" "),e("ul",[e("li",[t._v("正在热映的电影")]),t._v(" "),e("li",[t._v("获取电影Top250")]),t._v(" "),e("li",[t._v("获取即将上映电影")]),t._v(" "),e("li",[t._v("电影搜索")]),t._v(" "),e("li",[t._v("电影详情")])]),t._v(" "),e("p",[t._v("本节使用正在热映的电影的API来获取信息流页面的数据。")]),t._v(" "),e("h2",{attrs:{id:"给-flutter-工程添加第三方库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给-flutter-工程添加第三方库"}},[t._v("#")]),t._v(" 给 Flutter 工程添加第三方库")]),t._v(" "),e("p",[t._v("请求数据需要用到 http，所以首先需要找到一个第三方的 http库，然后在 Flutter 工程里添加第三方库的依赖声明。")]),t._v(" "),e("h4",{attrs:{id:"找第三方库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#找第三方库"}},[t._v("#")]),t._v(" 找第三方库")]),t._v(" "),e("p",[t._v("可以在 "),e("a",{attrs:{href:"https://pub.dartlang.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://pub.dartlang.org/"),e("OutboundLink")],1),t._v(" 网站上查找想要的库。")]),t._v(" "),e("p",[t._v("比如，我想要一个 http 库，那在这个网站上搜索 http，并且选中 Flutter，表示要查找的是 Flutter 的库：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/13/16a158845dcdfd93?w=1986&h=1242&f=jpeg&s=270535",alt:""}})]),t._v(" "),e("p",[t._v("然后在搜索结果里选择想要的库使用。")]),t._v(" "),e("h4",{attrs:{id:"添加依赖声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加依赖声明"}},[t._v("#")]),t._v(" 添加依赖声明")]),t._v(" "),e("p",[t._v("我选择第一个搜索结果，点进去之后，选择 "),e("code",[t._v("Installing")]),t._v(" 页面：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/13/16a158b01c7b00bb?w=2160&h=1608&f=jpeg&s=322166",alt:""}})]),t._v(" "),e("p",[t._v("这个页面会告诉你如何使用第三方库。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("pubspec.yaml")]),t._v(" "),e("p",[t._v("在 pubspec.yaml 的 dependencies 添加:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("dependencies:\n  flutter:\n    sdk: flutter\n\n  # The following adds the Cupertino Icons font to your application.\n  # Use with the CupertinoIcons class for iOS style icons.\n  cupertino_icons: ^0.1.2\n  http: ^0.12.0+2\n\n")])])])]),t._v(" "),e("li",[e("p",[t._v("flutter packages get")]),t._v(" "),e("p",[t._v("在添加完依赖之后，在当前工程目录下还要运行：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("flutter packages get\n\n")])])]),e("p",[t._v("这一步的目的是在本地安装第三方库。")]),t._v(" "),e("p",[t._v("在 VS Code 里，选择面板的 TERMINAL 运行：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/13/16a159598cf150d5?w=1114&h=286&f=jpeg&s=68624",alt:""}})])])]),t._v(" "),e("h2",{attrs:{id:"使用-http-发起请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-http-发起请求"}},[t._v("#")]),t._v(" 使用 http 发起请求")]),t._v(" "),e("p",[t._v("因为 http 请求比较耗时，所以为了不阻塞 UI，http 的请求使用 async异步函数，async异步函数是 Flutter 的异步编程，下节会详细介绍 Flutter 的异步编程。")]),t._v(" "),e("h4",{attrs:{id:"async"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async"}},[t._v("#")]),t._v(" async")]),t._v(" "),e("p",[t._v("使用 async 发起请求：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    List<HotMovieData> serverDataList = new List();\n    var response = await http.get(\n        'https://api.douban.com/v2/movie/in_theaters?apikey=0b2bdeda43b5688921839c8ecb20399b&city=%E6%B7%B1%E5%9C%B3&start=0&count=10');\n    //成功获取数据\n    if (response.statusCode == 200) {\n      print(response.body);\n    } \n  }\n\n")])])]),e("p",[t._v("这里 await 的作用是，等待 http.get() 的数据返回后再执行下一步。因为下一步要对数据进行解析，所以一定要等 http.get() 返回数据。")]),t._v(" "),e("h4",{attrs:{id:"json数据解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#json数据解析"}},[t._v("#")]),t._v(" json数据解析")]),t._v(" "),e("p",[e("code",[t._v("response.body")]),t._v(" 是返回的数据，为了方便数据解析，可以讲 String 转换成 json 来解析，就需要用到 "),e("code",[t._v("dart:convert")]),t._v(" 库里的 "),e("code",[t._v("json.decode()")]),t._v(" 方法。"),e("code",[t._v("json.decode()")]),t._v(" 方法会将 String 解析成 Map数据结构： "),e("code",[t._v("Map<String, dynamic>")]),t._v(",那么取数据的格式就是 "),e("code",[t._v("object[key]")]),t._v("。")]),t._v(" "),e("p",[t._v("解析的方法如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var responseJson = json.decode(response.body);\n\n")])])]),e("p",[t._v("下面是正在上映的电影的数据格式如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/13/16a166f877afe8f1?w=660&h=690&f=jpeg&s=64195",alt:""}})]),t._v(" "),e("p",[e("code",[t._v("subjects")]),t._v(" 里的就是具体的正在上映的电影的信息，而 "),e("code",[t._v("subjects")]),t._v(" 是一个数组，解析数组数据的方法如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("for (dynamic data in responseJson['subjects']) {\n    HotMovieData hotMovieData = HotMovieData.fromJson(data);\n    serverDataList.add(hotMovieData);\n}\n\n")])])]),e("p",[t._v("这里我们按照 json 的数据格式，创建一个数据类 HotMovieData：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import 'dart:convert';\n\nclass HotMovieData {\n  Rating rating;\n  List<String> genres;\n  String title;\n  List<Cast> casts;\n  int collectCount;\n  List<Cast> directors;\n  Avatars images;\n  String id;\n\n  HotMovieData();\n}\n\nclass Rating {\n  int max;\n  double average;\n  int min;\n\n  Rating(this.max,this.average,this.min);\n}\n\nclass Cast {\n  String alt;\n  Avatars avatars;\n  String name;\n  String id;\n\n  Cast(this.alt,this.avatars,this.name,this.id);\n}\n\nclass Avatars {\n  String small;\n  String large;\n  String medium;\n\n  Avatars(this.small,this.large,this.medium);\n}\n\n")])])]),e("p",[t._v("这里我们把电影信息的解析放在了 HotMovieData 里来解析，给 HotMovieData 增加一个 fromJson 的工厂构造函数：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("factory HotMovieData.fromJson(Map<String, dynamic> movieDataJson) {\n    HotMovieData hotMovieData = HotMovieData();\n\n    Rating rating = Rating(movieDataJson['rating']['max'], double.parse(movieDataJson['rating']['average'].toString()), movieDataJson['rating']['min']);\n    hotMovieData.rating = rating;\n\n    List<String> genres =new List();\n    for(String genre in movieDataJson['genres']){\n      genres.add(genre);\n    }\n    hotMovieData.genres = genres;\n\n    hotMovieData.title = movieDataJson['title'];\n\n    List<Cast> casts = new List();\n    for (dynamic castData in movieDataJson['casts']) {\n      Avatars avatars = Avatars(castData['avatars']['small'], castData['avatars']['large'], castData['avatars']['medium']);\n      Cast cast= new Cast(castData['alt'],avatars,castData['name'],castData['id']);\n      casts.add(cast);\n    }\n    hotMovieData.casts = casts;\n\n    hotMovieData.collectCount = movieDataJson['collect_count'];\n\n    List<Cast> directors = new List();\n    for (dynamic castData in movieDataJson['directors']) {\n      Avatars avatars = Avatars(castData['avatars']['small'], castData['avatars']['large'], castData['avatars']['medium']);\n      Cast cast= new Cast(castData['alt'],avatars,castData['name'],castData['id']);\n      directors.add(cast);\n    }\n    hotMovieData.directors = directors;\n\n    hotMovieData.images = Avatars(movieDataJson['images']['small'],movieDataJson['images']['large'],movieDataJson['images']['medium']);\n\n    hotMovieData.id = movieDataJson['id'];\n    return hotMovieData;\n  }\n\n")])])]),e("p",[t._v("解析完后的数据要保存起来，然后复制给变量 hotMovies，解析数据到复制的完整代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("void _getData() async {\n    List<HotMovieData> serverDataList = new List();\n    var response = await http.get(\n        'https://api.douban.com/v2/movie/in_theaters?apikey=0b2bdeda43b5688921839c8ecb20399b&city=%E6%B7%B1%E5%9C%B3&start=0&count=10&client=&udid=');\n    //成功获取数据\n    if (response.statusCode == 200) {\n      var responseJson = json.decode(response.body);\n      for (dynamic data in responseJson['subjects']) {\n        HotMovieData hotMovieData = HotMovieData.fromJson(data);\n        serverDataList.add(hotMovieData);\n      }\n      setState(() {\n        hotMovies = serverDataList;\n      });\n    } \n  }\n\n")])])]),e("h4",{attrs:{id:"修改-initstate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改-initstate"}},[t._v("#")]),t._v(" 修改 initState()")]),t._v(" "),e("p",[t._v("将 initState() 里的代码修改为：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" @override\n  void initState() {\n    // TODO: implement initState\n    super.initState();\n\n    _getData();\n  }\n\n")])])]),e("p",[t._v("然后运行程序，运行的效果为：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/13/16a167aa4b4cd81f?w=413&h=768&f=jpeg&s=80606",alt:""}})]),t._v(" "),e("h2",{attrs:{id:"添加刷新界面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加刷新界面"}},[t._v("#")]),t._v(" 添加刷新界面")]),t._v(" "),e("p",[t._v("因为 http 请求是异步的，所以这里加一个刷新界面：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  @override\n  Widget build(BuildContext context) {\n    // TODO: implement build\n    if (hotMovies == null || hotMovies.isEmpty) {\n      return Center(\n        child: CircularProgressIndicator(),\n      );\n    } else {\n      return MediaQuery.removePadding(\n        ...\n      );\n    }\n  }\n\n")])])]),e("p",[t._v("效果如下图：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/4/29/16a69bc7a15d7d9b?w=320&h=640&f=gif&s=135474",alt:""}})]),t._v(" "),e("h2",{attrs:{id:"优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),e("p",[t._v("在加了刷新界面后，发现 TabBar 每次切换，Widget 都会重新加载，会重新请求数据，是因为 DefaultTabController 在切换 Widget 的时候，为了回收内存，会将不显示的 Widget 回收掉，但是这个不是我们想见到的，我们要切换 Widget 的时候，不会回收不显示的 Widget，这就需要让 HotMoviesListWidgetState mixin AutomaticKeepAliveClientMixin。")]),t._v(" "),e("p",[t._v("代码如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class HotMoviesListWidgetState extends State<HotMoviesListWidget> with AutomaticKeepAliveClientMixin {\n  ....\n\n  @override\n  // TODO: implement wantKeepAlive\n  bool get wantKeepAlive => true; //返回 true，表示不会被回收\n}\n\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);