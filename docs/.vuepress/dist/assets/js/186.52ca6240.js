(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{541:function(a,e,t){"use strict";t.r(e);var n=t(42),s=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"第-9-节-复杂数据处理-·-结构转换-上"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-9-节-复杂数据处理-·-结构转换-上"}},[a._v("#")]),a._v(" 第 9 节 复杂数据处理 · 结构转换（上）")]),a._v(" "),t("p",[a._v("前面我们相继介绍了多种数据结构，它们各自都承担着不同类型数据的承载功能。不同的数据之间有着不同的表现方式，而在实际工作中我们却常常需要将不同的数据类型进行相互转换，以满足不同的需求。")]),a._v(" "),t("h2",{attrs:{id:"_9-1-any-↔-字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-any-↔-字符串"}},[a._v("#")]),a._v(" 9.1 Any ↔ 字符串")]),a._v(" "),t("p",[a._v("在开发数据应用的时候，有大部分的数据都不会是由 JavaScript 或用户的操作实时生成的，更多的是直接从服务端的数据存储设施中提取出来，然后通过网络协议传输到客户端以用于展示。")]),a._v(" "),t("p",[a._v("这样的话我们可以首先引入一个题外话，既然我们知道前端使用的数据大部分都需要通过网络协议从服务端传往前端，那这样一个传输过程就是抽象内容的编码和解编码的过程。而且在计算机科学中，通信协议基本上都是以字符串（或二进制）为基础承载数据结构，也就是说在一个服务端与客户端的通信架构中，会需要将各种数据结构首先转换为字符串，经过了网络的传输过程而达到另一端之后，再以相同的方式转换为原本的数据结构。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/28/163a4bdd7c3eb81f?w=861&h=261&f=png&s=24905",alt:"network-transport"}})]),a._v(" "),t("h3",{attrs:{id:"_9-1-1-json"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-1-json"}},[a._v("#")]),a._v(" 9.1.1 JSON")]),a._v(" "),t("p",[a._v("JSON，全称为 JavaScript Object Notation，是目前最流行的网络数据传输格式之一。相比于 CSV（Comma-Separated Values，逗号分隔值）、XML（Extensible Markup Language，可扩展标记语言）等历史更为悠久的格式化数据传输格式，JSON 同时拥有着易读性强（完全符合 JavaScript 标准）、格式不敏感和轻量化的特点。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('{\n  "name": "Chaoyang Gan",\n  "nickname": "iwillwen"\n}\n\n')])])]),t("p",[a._v("JSON 是一个 JavaScript 语言标准的子集，它完全可以直接运行在 JavaScript 引擎中。当然因为 JavaScript 语言本身是具有可被攻击的可能性的，所以在解析 JSON 数据内容的时候，并不能直接作为一段 JavaScript 代码运行。")]),a._v(" "),t("p",[a._v("JavaScript 引擎中提供了一个 "),t("code",[a._v("eval")]),a._v(" 函数以用于运行一段 JavaScript 代码，所以假如一段 JSON 数据内容是绝对安全的，确实可以使用 "),t("code",[a._v("eval")]),a._v(" 函数当做是 JSON 解析器。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('const jsonStr = `{\n  "name": "Chaoyang Gan",\n  "nickname": "iwillwen"\n}`\n\neval(\'var me = \' + jsonStr)\n\nconsole.log(me.name) //=> Chaoyang Gan\n\n')])])]),t("p",[a._v("但如果需要解析的 JSON 数据并不能保证安全甚至可以被恶意篡改（通过中间人劫持、XSS 攻击等方式），就会出现非常不安全的情况，严重者会导致用户私密信息被盗取。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const somethingImportant = 'some secret'\n\nconst jsonStr = `{\n  \"attack\": (function(){\n    alert(somethingImportant)\n  })()\n}`\n\neval('var me = ' + jsonStr) //=> some secret\n\n")])])]),t("p",[a._v("为了避免这种情况的出现，我们必须使用现代 JavaScript 引擎中提供的或其他可信任的 "),t("code",[a._v("JSON.parse")]),a._v(" 函数进行解码和 "),t("code",[a._v("JSON.stringify")]),a._v(" 函数进行编码。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('JSON.parse(`{\n  "attack": (function(){\n    alert(somethingImportant)\n  })()\n}`) //=> SyntaxError: Unexpected token ( in JSON\n\n')])])]),t("p",[a._v("言归正传，通常来说，我们可以把将非字符串类型的数据通过某种算法转换为字符串的过程称为"),t("strong",[a._v("序列化")]),a._v("（字符串也是一种有序序列），而利用 JSON 格式便是目前最流行的序列化方法之一。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('const jsonStr = JSON.stringify({\n  name: \'Chaoyang Gan\',\n  nickname: \'iwillwen\'\n})\n\nconsole.log(jsonStr) //=> {"name":"Chaoyang Gan","nickname":"iwillwen"}\n\n')])])]),t("h3",{attrs:{id:"_9-1-2-直接转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-2-直接转换"}},[a._v("#")]),a._v(" 9.1.2 直接转换")]),a._v(" "),t("p",[a._v("JSON 格式的好处是将结构不确定的数据转换为字符串格式，但同时也会强行带来可能不必要的内容，比如 JSON 的边界字符（如 "),t("code",[a._v('"')]),a._v("、"),t("code",[a._v("{}")]),a._v(" 等）。在需要转换的目标数据类型是确定的，而且将序列化后的字符串数据进行解析的接收方也是可控的的情况下，可以选择直接对数据进行类型转换。")]),a._v(" "),t("p",[t("strong",[a._v("数值类型")])]),a._v(" "),t("p",[a._v("在 JavaScript 中所有的对象都会默认带有一个 "),t("code",[a._v("toString")]),a._v(" 方法，而对于数值类型来说，可以直接使用这个方法来进行向字符串类型的转换。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const n1 = 1\nconst n2 = 1.2\n\nconst s1 = n1.toString()\nconst s2 = n2.toString()\n\nconsole.log(s1, typeof s1) //=> 1 string\nconsole.log(s2, typeof s2) //=> 1.2 string\n\n")])])]),t("p",[a._v("除了将数值直接转换为字符串之外，我们常常需要实现一个将数据类型的小数点后的值固定在一个长度范围内，比如 "),t("code",[a._v("5 -> 5.00")]),a._v(" 和 "),t("code",[a._v("3.1415 -> 3.14")]),a._v("，这个主要用于表格和图表的展示上。"),t("code",[a._v("3.1415")]),a._v(" 可以通过数值计算得到需要的 "),t("code",[a._v("3.14")]),a._v("，但是 "),t("code",[a._v("5")]),a._v(" 没办法直接通过计算得到 "),t("code",[a._v("5.00")]),a._v("。因为 JavaScript 并不像其他语言那样区分开整型和非整型的数值，所以它提供了一个用于实现这个需求的方法 "),t("code",[a._v("Number.toFixed")]),a._v("。这个方法接受一个数值参数，即小数点后的保留位数，一般来说这个参数需要是非负整型数值，当然如果传入一个非整型数值，该方法也会自动取整进行计算。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const int = 5\nconst pi = Math.PI //=> 3.141592653589793 (约等于)\n\nconsole.log(int.toFixed(2)) //=> '5.00'\nconsole.log(pi.toFixed(2)) //=> '3.14'\nconsole.log(int.toFixed(pi)) //=> '5.000'\n\n")])])]),t("p",[a._v("转换成字符串之后还可以通过 "),t("code",[a._v("parseInt")]),a._v(" 和 "),t("code",[a._v("parseFloat")]),a._v(" 将以字符串形式存储的数值转换为整型或浮点型。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.log(parseInt('5.00')) //=> 5\nconsole.log(parseFloat('3.14')) //=> 3.14\n\n")])])]),t("p",[t("strong",[a._v("布尔型（逻辑型）")])]),a._v(" "),t("p",[a._v("布尔型也就是"),t("strong",[a._v("真")]),a._v("与"),t("strong",[a._v("假")]),a._v("（幸亏 JavaScript 并不存在中间态），在 JavaScript 中表现为 "),t("code",[a._v("true")]),a._v(" 与 "),t("code",[a._v("false")]),a._v("。显而易见，这两个值各自都有一个以英文单词来表示的意义，那么我们自然可以非常简单地对其进行转换了。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.log(true.toString()) //=> 'true'\nconsole.log(false.toString()) //=> 'false'\n\n")])])]),t("p",[a._v("但是要将其再转换成布尔型就没那么简单了，因为 JavaScript 中并没有直接提供 "),t("code",[a._v("parseBoolean")]),a._v(" 这样的函数，而且作为弱类型语言，JavaScript 在进行一些判断时也有不少让人非常费解的“操作”。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("true == 'true' //=> false\nfalse == 'false' //=> false\n\ntrue == 1 //=> true\nfalse == 0 //=> true\n\n")])])]),t("p",[a._v("所以一般来说我们可以使用强类型判断 "),t("code",[a._v("===")]),a._v(" 分别判断一个字符串是否是 "),t("code",[a._v('"true"')]),a._v("，不是则为 "),t("code",[a._v("false")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function parseBoolean(string) {\n  return string === 'true'\n}\n\nconsole.log(parseBoolean('true')) //=> true\nconsole.log(parseBoolean('false')) //=> false\n\n")])])]),t("p",[t("strong",[a._v("数组")])]),a._v(" "),t("p",[a._v("事实上，我们在第 2 节中就已经接触过字符串中的 "),t("code",[a._v("split")]),a._v(" 方法，它用于将一个字符串以指定字符串为分隔符分割成一个数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const str = '1,2,3,4,5'\nconst arr = str.split(',')\n\nconsole.log(arr) //=> [ 1, 2, 3, 4, 5 ]\n\n")])])]),t("p",[a._v("对应地，数组也可以进行组合变成一个字符串，使用的是 "),t("code",[a._v("Array.join")]),a._v(" 方法。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr = [ 1, 2, 3, 4, 5 ]\n\nconsole.log(arr.join()) //=> 1,2,3,4,5\nconsole.log(arr.join('#')) //=> 1#2#3#4#5\n\n")])])]),t("h2",{attrs:{id:"_9-2-对象-↔-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-对象-↔-数组"}},[a._v("#")]),a._v(" 9.2 对象 ↔ 数组")]),a._v(" "),t("p",[a._v("我们在第 5 节中介绍对象字面量的时候曾经介绍过，在 JavaScript 中的数组实际上是一个特殊的对象字面量，那么在从属关系上看数组应该是对象字面量的一个子集 "),t("img",{attrs:{src:"https://juejin.im/equation?tex=Array%20%5Csubseteq%20Object",alt:"Array \\subseteq Object"}}),a._v("。")]),a._v(" "),t("p",[a._v("但为什么我们这里还是要提到对象和数组之间的互相转换呢？假设我们需要将一个对象字面量中的属性以列表的形式展示出来：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/28/163a4bdd78d715d4?w=911&h=191&f=png&s=25744",alt:"object-as-list"}})]),a._v(" "),t("p",[a._v("虽然各种框架都有相关的函数或者工具来完成这个需求，但是为了更好地理解数据结构之间的差异及对其的应用，我们还是需要了解其中如何进行数据格式的转换。")]),a._v(" "),t("p",[a._v("JavaScript 中提供了一个 "),t("code",[a._v("Object.keys()")]),a._v(" 函数，可以提取出对象的所有属性键，并以数组的形式表示。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('const object = {\n  "name": "Chaoyang Gan",\n  "title": "Engineer",\n  "subject": "Maths"\n}\n\nconst keys = Object.keys(object)\nconsole.log(keys) //=> ["name", "title", "subject"]\n\n')])])]),t("p",[a._v("得到了目标对象的属性键数组后，配合数组的 "),t("code",[a._v(".map")]),a._v(" 方法便可以将每一个属性键对应的值提取出来。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('const list = keys.map(key => {\n  return {\n    key, value: object[key]\n  }\n})\n\nconsole.log(list)\n//=> [\n// {key: "name", value: "Chaoyang Gan"},\n// {key: "title", value: "Engineer"},\n// {key: "subject", value: "Maths"}\n// ]\n\n')])])]),t("p",[a._v("当然我们可以将第二层中的对象也使用数组表示。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('const pairs = keys.map(key => {\n  return [ key, object[key] ]\n})\n\nconsole.log(pairs)\n// => [\n// ["name", "Chaoyang Gan"],\n// ["title", "Engineer"],\n// ["subject", "Maths"]\n// ]\n\n')])])]),t("p",[a._v("同样，我们也可以使用 Lodash 中提供的 "),t("code",[a._v("_.toPairs")]),a._v(" 方法将对象转换为以双元素为键值对表达方式的数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const pairs = _.toPairs(object)\n\n")])])]),t("p",[a._v("完成了从对象到数组的转换后自然需要一个将其进行逆转换的方法，可以直接使用 Lodash 中提供的 "),t("code",[a._v("_.fromPairs")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('const object = _.fromPairs(pairs)\nconsole.log(object)\n// => {\n// name: "Chaoyang Gan",\n// title: "Engineer",\n// subject: "Maths"\n// }\n\n')])])]),t("p",[a._v("事实上，我们在第 5 节中用过的 "),t("code",[a._v("_.groupBy")]),a._v(" 函数也是一种将数组转换为对象的方法，但它更多的是为了将数组根据其中的某一个字段或某一种变换结果来进行字典化，而不是单纯地将其进行转换。")]),a._v(" "),t("p",[t("strong",[a._v("我们需要明确的原则是，数据转换的出发点和目的都是为了服务需求，而不是单纯地将其进行数据结构上的转换，在思考如何对数据进行处理之前，首先要明确目标需求究竟需要怎样的数据形式。")]),a._v(" 究竟是需要一个以数值作为元素的数组（如人工神经网络的输入和输出值），还是以对象作为元素类型的数组以用于表格的展示（每一个对象元素代表表格中的一行），或是以列为单位存储的数据框对象（如 ECharts 框架中常用）。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// Input data for ANN\nconst xorArray = [ 1, 0, 0, 1, 1, 0, 1 ]\n\n// Row-base dataset\nconst rDataset = [\n  { name: "iwillwen", gender: "male" },\n  { name: "rrrruu", gender: "female" }\n]\n\n// Column-base dataset\nconst cDataset = {\n  name: [ "iwillwen", "rrrruu" ],\n  gender: [ "male", "female" ]\n}\n\n')])])]),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),t("p",[a._v("我们在这一节中学习了字符串、对象以及数组间的相互转化，这些都是比较常见也比较简单的数据转换需求和方法，一般用于数据的预处理和使用过程中的转换步骤。")]),a._v(" "),t("h3",{attrs:{id:"习题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#习题"}},[a._v("#")]),a._v(" 习题")]),a._v(" "),t("ol",[t("li",[a._v("我们分别介绍了两种可以存储一个对象信息的数组格式，请分别实现它们的逆转换过程 "),t("code",[a._v("fromList")]),a._v("（用于以 "),t("code",[a._v('{ key: "key", value: "value" }')]),a._v(" 为元素的数组）和 "),t("code",[a._v("fromPairs")]),a._v("。")]),a._v(" "),t("li",[a._v("请分别实现 Row-base dataset 和 Column-base dataset 之间的转换过程。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);