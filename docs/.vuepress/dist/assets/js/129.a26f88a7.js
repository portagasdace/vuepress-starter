(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{485:function(t,e,r){"use strict";r.r(e);var a=r(42),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"使用-redux-对豆瓣电影app-进行重构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用-redux-对豆瓣电影app-进行重构"}},[t._v("#")]),t._v(" 使用 Redux 对豆瓣电影App 进行重构")]),t._v(" "),r("p",[t._v("本节使用 Redux 对豆瓣电影 App 进行重构。")]),t._v(" "),r("h2",{attrs:{id:"重构后的工程路径"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重构后的工程路径"}},[t._v("#")]),t._v(" 重构后的工程路径")]),t._v(" "),r("p",[t._v("StateManager/flutter_doubanmovie_redux")]),t._v(" "),r("h2",{attrs:{id:"redux-简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux-简介"}},[t._v("#")]),t._v(" Redux 简介")]),t._v(" "),r("p",[t._v("Redux 是 JavaScript 状态容器，提供可预测化的状态管理，经常和 React 一起使用。当你的场景非常复杂，具有以下场景时：")]),t._v(" "),r("ul",[r("li",[t._v("某个组件的状态，需要共享")]),t._v(" "),r("li",[t._v("某个状态需要在任何地方都可以拿到")]),t._v(" "),r("li",[t._v("一个组件需要改变全局状态")]),t._v(" "),r("li",[t._v("一个组件需要改变另一个组件的状态")])]),t._v(" "),r("p",[t._v("如果你不按照一定规律处理状态的读写，代码很快就会变成一团乱麻。这时候就需要用到 Redux，可以方便的帮助你管理状态。正是因为 Redux 管理状态的特性，所以也可以应用到 Flutter 上，但是 Redux 是用 JavaScript 写的，为了在 Flutter 上也使用 Redux，所以就有了用 Dart 语言写的 Redux，即 "),r("a",{attrs:{href:"https://github.com/johnpryan/redux.dart",target:"_blank",rel:"noopener noreferrer"}},[t._v("redux.dart"),r("OutboundLink")],1),t._v("。")]),t._v(" "),r("h2",{attrs:{id:"redux-dart"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redux-dart"}},[t._v("#")]),t._v(" redux.dart")]),t._v(" "),r("p",[t._v("redux.dart 是用 Dart 语言写的 Redux 库，它的 Git 地址为："),r("a",{attrs:{href:"https://github.com/johnpryan/redux.dart",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/johnpryan/redux.dart"),r("OutboundLink")],1),t._v("。其概念和使用方式与 JavaScript 的 Redux 保持一致，如果你之前接触过 Redux，那么这节的内容对你来说基本没问题。")]),t._v(" "),r("p",[t._v("先看下面的 Redux 使用流程图：")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/5/28/16afd93530ff8adb?w=1316&h=660&f=png&s=56046",alt:""}})]),t._v(" "),r("p",[t._v("在这张图中：")]),t._v(" "),r("ol",[r("li",[t._v("如果 View 受到点击，就会抛出一个 Action，Action 是用来描述发生了什么。")]),t._v(" "),r("li",[t._v("Action 会首先被 Middleware 接收，Middleware 里会根据接收到的 Action 进行不同的处理，但 Middleware 里主要是用来处理一些耗时的操作，例如 API 的数据请求，所以在 Middleware 里的操作都是异步的。")]),t._v(" "),r("li",[t._v("在 Middleware 异步操作得到数据后，便会把 Action 和数据一起抛给 Reducer 处理，Reducer 是纯函数，作用是生成新的 State，所以在接收到 Action 和数据之后，Reducer 会根据不同的业务逻辑，对数据进行处理，生成一个新的 State，并抛给 Store。")]),t._v(" "),r("li",[t._v("Store 是用来存取状态的，当 Store 接收到从 Reducer 传过来的最新状态后，便会用最新的状态去刷新 View。")])]),t._v(" "),r("p",[t._v("此过程中，Action、Middleware、Reducer、Store 的角色和作用分别是：")]),t._v(" "),r("ul",[r("li",[t._v("Action：Action 是一个简单的普通对象，用来描述发生了什么，也可以在 Action 中携带数据。")]),t._v(" "),r("li",[t._v("Middleware：Middleware 是嵌到 Action 和 Reducer 之间的操作，用于处理耗时的操作，所以 Middleware 里都是异步操作，常用于数据请求。如果你的操作不耗时，就没必要使用 Middleware。")]),t._v(" "),r("li",[t._v("Reducer：Reducer 是纯函数，用来描述应用如何更新状态，业务逻辑都在 Reducer 里，以此可以实现业务逻辑和 UI 逻辑的分离。")]),t._v(" "),r("li",[t._v("Store 是用来存储和共享状态的，而且一个应用只有一个单一的 Store。")])]),t._v(" "),r("h4",{attrs:{id:"什么是纯函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是纯函数"}},[t._v("#")]),t._v(" 什么是纯函数")]),t._v(" "),r("p",[t._v("前面在讲 Reducer 的时候说到，Reducer 是纯函数，那么什么是纯函数呢？")]),t._v(" "),r("p",[t._v("纯函数是函数式编程的一部分，只有满足下面 3 个原则的函数才是纯函数：")]),t._v(" "),r("ol",[r("li",[t._v("变量都只在函数作用域内获取, 作为的函数的参数传入")]),t._v(" "),r("li",[t._v("不会产生副作用, 不会改变被传入的数据或者其他数据")]),t._v(" "),r("li",[t._v("相同的输入保证相同的输出")])]),t._v(" "),r("p",[t._v("因为纯函数的这 3 个特性，使得使用纯函数可以减少 bug。")]),t._v(" "),r("h2",{attrs:{id:"flutter-redux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#flutter-redux"}},[t._v("#")]),t._v(" flutter_redux")]),t._v(" "),r("p",[t._v("前面讲了使用 Dart 语言开发的 Redux 库：redux.dart，在 Flutter 中，基于 redux.dart ，开发了适合在 Flutter 中使用的 Redux 库，就是： "),r("code",[t._v("flutter_redux")]),t._v("。")]),t._v(" "),r("p",[t._v("flutter_redux 非常强大，只要使用几个类，就可以让我们在 Flutter 中使用 Redux 来开发程序，这几个类是：")]),t._v(" "),r("ul",[r("li",[t._v("Reducer")]),t._v(" "),r("li",[t._v("Middleware")]),t._v(" "),r("li",[t._v("Store")]),t._v(" "),r("li",[t._v("StoreProvider")]),t._v(" "),r("li",[t._v("StoreBuilder")]),t._v(" "),r("li",[t._v("StoreConnector")])]),t._v(" "),r("h4",{attrs:{id:"reducer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reducer"}},[t._v("#")]),t._v(" Reducer")]),t._v(" "),r("p",[t._v("Reducer 用于响应 Action，进行逻辑操作，然后生成新的 State。")]),t._v(" "),r("p",[t._v("Reducer 是函数，其定义为：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("typedef State Reducer<State>(State state, dynamic action);\n\n")])])]),r("p",[t._v("Reducer 的定义有一个泛型，代表着要 Reducer 里要生成的 State，函数里有两个参数：")]),t._v(" "),r("p",[t._v("参数名字")]),t._v(" "),r("p",[t._v("参数类型")]),t._v(" "),r("p",[t._v("意义")]),t._v(" "),r("p",[t._v("state")]),t._v(" "),r("p",[t._v("State")]),t._v(" "),r("p",[t._v("表示的是前一个状态")]),t._v(" "),r("p",[t._v("action")]),t._v(" "),r("p",[t._v("dynamic")]),t._v(" "),r("p",[t._v("action 表示一个操作，可以是 Enum 或 Class，如果 action 没有参数就是用 Enum，有参数就用 Class")]),t._v(" "),r("p",[t._v("这里举一个计数器的例子，点击按钮，计数器就会在原来的基础上加 1，先创建一个类 AppState 代表全局状态：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("class AppState{\n  int count;\n\n  AppState(this.count);\n}\n\n")])])]),r("p",[t._v("然后定义一个自增的 Action:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("enum Actions {Increment}\n\n")])])]),r("p",[t._v("Reducer 就可以这么写：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("AppState counterReducer(AppState state,dynamic action){\n  if(action == Actions.Increment){\n    return AppState(state.count + 1);\n  }\n\n  return AppState(state.count);\n}\n\n")])])]),r("p",[t._v("注意：Reducer 返回的状态必须是新建的，而不能复用之前的，而且从上面的代码里也能看出 Reducer 的参数 state 的用法，state 是前一个状态，把 state 里的值取出来 +1 ，然后创建新的 AppState 实例并返回。")]),t._v(" "),r("h4",{attrs:{id:"middleware"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#middleware"}},[t._v("#")]),t._v(" Middleware")]),t._v(" "),r("p",[t._v("Middleware 处于 Action 和 Reducer 之间，可以在 Reducer 之前拦截 Action。为什么要多这一层呢？因为发出 Action 的操作之后，有时候不能立马拿到想要的数据，需要去发请求获取，那么这里就不能写成同步的，所以需要 Middleware 层来处理异步操作，等结果取到之后在发送给 Reducer。")]),t._v(" "),r("p",[t._v("Middleware 除了做异步操作外，也可以在 Reducer 之前拦截 Action，做一个日志打印的功能。")]),t._v(" "),r("p",[t._v("Middleware 是函数，其定义为：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("typedef void Middleware<State>(\n  Store<State> store,\n  dynamic action,\n  NextDispatcher next,\n);\n\n")])])]),r("p",[t._v("参数名字")]),t._v(" "),r("p",[t._v("参数类型")]),t._v(" "),r("p",[t._v("意义")]),t._v(" "),r("p",[t._v("state")]),t._v(" "),r("p",[t._v("State")]),t._v(" "),r("p",[t._v("表示的是前一个状态")]),t._v(" "),r("p",[t._v("action")]),t._v(" "),r("p",[t._v("dynamic")]),t._v(" "),r("p",[t._v("action 表示一个操作，可以是 Enum 或 Class，如果 action 没有参数就是用 Enum，有参数就用 Class")]),t._v(" "),r("p",[t._v("next")]),t._v(" "),r("p",[t._v("NextDispatcher")]),t._v(" "),r("p",[t._v("使用 next 方法，结束 Middleware 的执行，将 Action 从 Middleware 传向 Reducer")]),t._v(" "),r("p",[t._v("在计数器的例子中，假设 Actions.Increment 之后，还要打印一下日志，则可以这么做：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("void loggingCounter(Store<AppState> store,dynamic action,NextDispatcher next) async{\n  if(action == Actions.Increment){\n    print('Counter is ${store.state.count.toString()}');\n  }\n  next(action);\n}\n\n")])])]),r("p",[t._v("先判断 action 是不是 Actions.Increment，是的话就打印日志，这时有一个很重要的操作就是：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("next(action);\n\n")])])]),r("h4",{attrs:{id:"store"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#store"}},[t._v("#")]),t._v(" Store")]),t._v(" "),r("p",[t._v("Store 是用来存储和共享状态的，Store 的定义里有一个泛型：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("class Store<State> {\n   ...\n}\n\n")])])]),r("p",[t._v("这里的泛型就代表着 Store 里要存储和共享的状态。")]),t._v(" "),r("p",[t._v("在看一下 Store 的构造函数：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(" Store(\n    this.reducer, {\n    State initialState,\n    List<Middleware<State>> middleware = const [],\n    bool syncStream: false,\n\n    /// If set to true, the Store will not emit onChange events if the new State\n    /// that is returned from your [reducer] in response to an Action is equal\n    /// to the previous state.\n    ///\n    /// Under the hood, it will use the `==` method from your State class to\n    /// determine whether or not the two States are equal.\n    bool distinct: false,\n  })\n\n")])])]),r("p",[t._v("参数名字")]),t._v(" "),r("p",[t._v("参数类型")]),t._v(" "),r("p",[t._v("意义")]),t._v(" "),r("p",[t._v("必选 or 可选")]),t._v(" "),r("p",[t._v("reducer")]),t._v(" "),r("p",[t._v("Reducer"),r("State")],1),t._v(" "),r("p",[t._v("Redux 里的 Reducer，响应 Action，生成新的 State")]),t._v(" "),r("p",[t._v("必选")]),t._v(" "),r("p",[t._v("initialState")]),t._v(" "),r("p",[t._v("State")]),t._v(" "),r("p",[t._v("初始化状态")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("middleware")]),t._v(" "),r("p",[t._v("List<Middleware"),r("State",[t._v(">")])],1),t._v(" "),r("p",[t._v("Redux 里的 Middleware，在 Action 和 Reducer 之间，常用来处理耗时操作。")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("syncStream")]),t._v(" "),r("p",[t._v("bool")]),t._v(" "),r("p",[t._v("表示 middleware 里的操作 是否是同步的，默认不是同步的（也就是异步的）")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("distinct")]),t._v(" "),r("p",[t._v("当收到的状态和前一个状态相同时，是否触发 onChange 事件")]),t._v(" "),r("p",[t._v("默认为触发")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("那么在计数器的例子里，Store 就可以这么写：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("  final appStateStore = Store<AppState>(counterReducer,\n      initialState: AppState(0), \n      middleware: [loggingCounter]);\n\n")])])]),r("h4",{attrs:{id:"storeprovider"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#storeprovider"}},[t._v("#")]),t._v(" StoreProvider")]),t._v(" "),r("p",[t._v("StoreProvider 是一个 Widget，可以将指定的 Store 传递给它的子 Widget。")]),t._v(" "),r("p",[t._v("StoreProvider 的构造函数为：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("  const StoreProvider({\n    Key key,\n    @required Store<S> store,\n    @required Widget child,\n  }) \n\n")])])]),r("p",[t._v("参数名字")]),t._v(" "),r("p",[t._v("参数类型")]),t._v(" "),r("p",[t._v("意义")]),t._v(" "),r("p",[t._v("必选 or 可选")]),t._v(" "),r("p",[t._v("key")]),t._v(" "),r("p",[t._v("Key")]),t._v(" "),r("p",[t._v("Widget 的标识")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("store")]),t._v(" "),r("p",[t._v("Store"),r("S")],1),t._v(" "),r("p",[t._v("就是前面创建的 Store，表示要将这个 Store 传递给子 Widget")]),t._v(" "),r("p",[t._v("必选")]),t._v(" "),r("p",[t._v("child")]),t._v(" "),r("p",[t._v("Widget")]),t._v(" "),r("p",[t._v("StoreProvider 的子 Widget")]),t._v(" "),r("p",[t._v("必选")]),t._v(" "),r("p",[t._v("使用方法如下：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("return StoreProvider<AppState>(\n      store: appStateStore,\n      child: ...,\n    );\n\n")])])]),r("h4",{attrs:{id:"storebuilder"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#storebuilder"}},[t._v("#")]),t._v(" StoreBuilder")]),t._v(" "),r("p",[t._v("StoreBuilder 也是一个 Widget，它要作为 StoreProvider 的子 Widget，可以从 StoreProvider 获取 Store 并将其传递给 StoreBuilder 里的 builder 方法用于创建 Widget。StoreBuilder 会自动订阅 Store，当 Store 发生变化时，就会自动重建 Widget。")]),t._v(" "),r("p",[t._v("StoreBuilder 的构造函数为：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("  StoreBuilder({\n    Key key,\n    @required this.builder,\n    this.onInit,\n    this.onDispose,\n    this.rebuildOnChange = true,\n    this.onWillChange,\n    this.onDidChange,\n    this.onInitialBuild,\n  })  : assert(builder != null),\n        super(key: key);\n\n")])])]),r("p",[t._v("参数名字")]),t._v(" "),r("p",[t._v("参数类型")]),t._v(" "),r("p",[t._v("意义")]),t._v(" "),r("p",[t._v("必选 or 可选")]),t._v(" "),r("p",[t._v("key")]),t._v(" "),r("p",[t._v("Key")]),t._v(" "),r("p",[t._v("Widget 的标识")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("builder")]),t._v(" "),r("p",[t._v("ViewModelBuilder<Store"),r("S",[t._v(">")])],1),t._v(" "),r("p",[t._v("创建 Widget")]),t._v(" "),r("p",[t._v("必选")]),t._v(" "),r("p",[t._v("onInit")]),t._v(" "),r("p",[t._v("OnInitCallback"),r("S")],1),t._v(" "),r("p",[t._v("初始化的时候调用")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("onDispose")]),t._v(" "),r("p",[t._v("OnInitCallback"),r("S")],1),t._v(" "),r("p",[t._v("销毁的时候调用")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("rebuildOnChange")]),t._v(" "),r("p",[t._v("bool")]),t._v(" "),r("p",[t._v("当 Store 变化时需不需要创建 Widget，默认为需要")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("onWillChange")]),t._v(" "),r("p",[t._v("OnWillChangeCallback<Store"),r("S",[t._v(">")])],1),t._v(" "),r("p",[t._v("当状态发生变化时调用，在 build 之前运行")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("onDidChange")]),t._v(" "),r("p",[t._v("OnDidChangeCallback<Store"),r("S",[t._v(">")])],1),t._v(" "),r("p",[t._v("当状态发生变化时调用，在 build 之后运行")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("onInitialBuild")]),t._v(" "),r("p",[t._v("OnInitialBuildCallback<Store"),r("S",[t._v(">")])],1),t._v(" "),r("p",[t._v("Widget 第一次 built 的时候调用")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("使用方法为：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("return StoreProvider<AppState>(\n store: appStateStore,\n  child: StoreBuilder<AppState>(\n    builder: (context,viewmodel){\n      return Text(viewmodel.state.count.toString());\n    },\n  )\n);\n\n")])])]),r("p",[t._v("一般不使用 StoreBuilder 而是 StoreConnector，因为 StoreBuilder 会把整个 Store 传递给子 Widget，而 StoreConnector 提供了 converter 方法可以把 Store 处理成子 Widget 想要的数据类型，在传递给子 Widget，而不是整个 Store。")]),t._v(" "),r("h4",{attrs:{id:"storeconnector"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#storeconnector"}},[t._v("#")]),t._v(" StoreConnector")]),t._v(" "),r("p",[t._v("StoreConnector 也是一个 Widget，它要作为 StoreProvider 的子 Widget，可以从 StoreProvider 获取 Store，并使用 converter 方法 将 Store 转化为子 Widget 想要的数据类型，然后传递给 builder 方法用于创建 Widget。StoreConnector 会自动订阅 Store，当 Store 发生变化时，就会自动重建 Widget。")]),t._v(" "),r("p",[t._v("StoreConnector 的定义为：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("class StoreConnector<S, ViewModel> extends StatelessWidget\n\n")])])]),r("p",[t._v("StoreConnector 有两个泛型，第一个泛型就是前面定义的全局状态，第二个泛型就是子 Widget 想要的数据类型，在计数器的例子里，第一个泛型就是 AppState，第二个泛型应该是 String，因为子 Widget 要显示当前的数字，所以关心的是当前的数字大小。")]),t._v(" "),r("p",[t._v("StoreConnector 的构造函数为：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("  StoreConnector({\n    Key key,\n    @required this.builder,\n    @required this.converter,\n    this.distinct = false,\n    this.onInit,\n    this.onDispose,\n    this.rebuildOnChange = true,\n    this.ignoreChange,\n    this.onWillChange,\n    this.onDidChange,\n    this.onInitialBuild,\n  })  : assert(builder != null),\n        assert(converter != null),\n        super(key: key);\n\n")])])]),r("p",[t._v("参数名字")]),t._v(" "),r("p",[t._v("参数类型")]),t._v(" "),r("p",[t._v("意义")]),t._v(" "),r("p",[t._v("必选 or 可选")]),t._v(" "),r("p",[t._v("key")]),t._v(" "),r("p",[t._v("Key")]),t._v(" "),r("p",[t._v("Widget 的标识")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("builder")]),t._v(" "),r("p",[t._v("ViewModelBuilder<Store"),r("S",[t._v(">")])],1),t._v(" "),r("p",[t._v("创建 Widget")]),t._v(" "),r("p",[t._v("必选")]),t._v(" "),r("p",[t._v("converter")]),t._v(" "),r("p",[t._v("StoreConverter<S, ViewModel>")]),t._v(" "),r("p",[t._v("将 Store 处理成子 Widget 想要的数据类型")]),t._v(" "),r("p",[t._v("必选")]),t._v(" "),r("p",[t._v("onInit")]),t._v(" "),r("p",[t._v("OnInitCallback"),r("S")],1),t._v(" "),r("p",[t._v("初始化的时候调用")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("onDispose")]),t._v(" "),r("p",[t._v("OnInitCallback"),r("S")],1),t._v(" "),r("p",[t._v("销毁的时候调用")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("rebuildOnChange")]),t._v(" "),r("p",[t._v("bool")]),t._v(" "),r("p",[t._v("当 Store 变化时需不需要创建 Widget，默认为需要")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("onWillChange")]),t._v(" "),r("p",[t._v("OnWillChangeCallback<Store"),r("S",[t._v(">")])],1),t._v(" "),r("p",[t._v("当状态发生变化时调用，在 build 之前运行")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("onDidChange")]),t._v(" "),r("p",[t._v("OnDidChangeCallback<Store"),r("S",[t._v(">")])],1),t._v(" "),r("p",[t._v("当状态发生变化时调用，在 build 之后运行")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("onInitialBuild")]),t._v(" "),r("p",[t._v("OnInitialBuildCallback<Store"),r("S",[t._v(">")])],1),t._v(" "),r("p",[t._v("Widget 第一次 built 的时候调用")]),t._v(" "),r("p",[t._v("可选")]),t._v(" "),r("p",[t._v("使用方法为：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("    return StoreProvider<AppState>(\n      store: appStateStore,\n      child: StoreConnector<AppState,String>(\n        converter: (store) => store.state.count.toString(),\n        builder: (context,value){\n          return Text(value);\n        },\n      )\n    );\n\n")])])]),r("h2",{attrs:{id:"使用-flutter-redux-重构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用-flutter-redux-重构"}},[t._v("#")]),t._v(" 使用 flutter_redux 重构")]),t._v(" "),r("p",[t._v("接下来使用 "),r("code",[t._v("flutter_redux")]),t._v(" 这个库对豆瓣电影App 进行重构。")]),t._v(" "),r("p",[t._v("首先，在 pubspec.yaml 里添加 "),r("code",[t._v("flutter_redux")]),t._v(" 库的依赖：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("dependencies:\n  ...\n  flutter_redux: ^0.5.3\n\n")])])]),r("p",[t._v("在 VS Code 里使用快捷键保存后，会自动下载依赖库。")]),t._v(" "),r("p",[t._v("前面已经知道了 Redux 里有 Action、Reducer、Middleware、Store，按道理应该写在不同的 Dart 文件里，但是 Reducer 和 Middleware 都是函数，如果把 Reducer 和 Middleware 写在不同的文件里，那么 Store 就无法引用到，所以 Action、Reducer、Middleware、Store 这四个只能写在同一个 Dart 文件里。")]),t._v(" "),r("p",[t._v("在 "),r("code",[t._v("main.dart")]),t._v(" 中，先定义一个 InitCityAction，用来表示初始化：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("class InitCityAction {\n  String city;\n\n  InitCityAction(this.city);\n}\n\n")])])]),r("p",[t._v("因为城市需要先从本地读取数据，读取数据是耗时操作，所以需要放到 Middleware 里进行异步操作，所以在写一个 readCityFromDisk 的 Middleware：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("void readCityFromDisk(\n    Store<CityState> store, dynamic action, NextDispatcher next) async {\n  if (action is InitCityAction) {\n    String city = await initCity();\n    next(InitCityAction(city));\n    return;\n  }\n\n  next(action);\n}\n\nFuture<String> initCity() async {\n  final prefs = await SharedPreferences.getInstance(); //获取 prefs\n\n  String city = prefs.getString('curCity'); //获取 key 为 curCity 的值\n\n  if (city == null || city.isEmpty) {\n    //如果 city 为空，则使用默认值\n    city = '深圳';\n  }\n  return city;\n}\n\n")])])]),r("p",[t._v("接下来开始定义一个 changeCityReducer，接收到 InitCityAction 后，产生一个新的 CityState：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("CityState changeCityReducer(CityState state, dynamic action) {\n  if(action is InitCityAction){\n    return CityState(action.city);\n  }\n\n  return state;\n}\n\n")])])]),r("p",[t._v("新的 CityState 的值是 InitCityAction 的参数的值。")]),t._v(" "),r("p",[t._v("现在做好准备工作了，开始创建 _cityStore：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("class _MyHomePageState extends State<MyHomePage> {\n  ...\n\n  final _cityStore = Store<CityState>(\n    changeCityReducer,\n    initialState: CityState(null),\n    middleware: [readCityFromDisk]\n  );\n  \n  ...\n}\n\n")])])]),r("p",[t._v("_cityStore 的初始值为 CityState(null)，意思是当前选中的城市为 null，Reducer 为 changeCityReducer，middleware 为 readCityFromDisk。")]),t._v(" "),r("p",[t._v("为了把 _cityStore 共享给子 Widget，需要使用 StoreProvider：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("class _MyHomePageState extends State<MyHomePage> {\n  ...\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: StoreProvider<CityState>(\n        store: _cityStore,\n        child: _widgetItems[_selectedIndex], //选中不同的选项显示不同的界面,,\n      ),\n      ....\n    );\n  }\n  ...\n}\n\n")])])]),r("p",[t._v("然后为了在 HotWidget 里访问到 _cityStore，需要使用 StoreConnector，HotWidget 关心的是当前选中城市的值，所以应该这么定义：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("StoreConnector<CityState, String>\n\n")])])]),r("p",[t._v("在 HotWidgetState 里就可以改为：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("class HotWidgetState extends State<HotWidget> {\n  ...\n\n  @override\n  Widget build(BuildContext context) {\n    // TODO: implement build\n    print('HotWidgetState build');\n    return StoreConnector<CityState, String>(\n      converter: (store) {\n        String curCity = store.state.curCity;\n        if (curCity == null) {\n          //如果 curCity 为 null，说明没有初始化，则触发初始化\n          store.dispatch(InitCityAction(null));\n        }\n        return curCity;\n      },\n      builder: (context, curCity) {\n        if (curCity != null && curCity.isNotEmpty) {\n          //如果 curCity 不为空\n          return ...\n        } else {\n          //如果 curCity 为空\n          return ...\n        }\n      },\n    );\n  }\n\n")])])]),r("p",[t._v("这时候 _jumpToCitysWidget() 方法会报错，将 _jumpToCitysWidget() 重构为：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("  void _jumpToCitysWidget(String curCity) async {\n    var selectCity =\n        await Navigator.pushNamed(context, '/Citys', arguments: curCity);\n    if (selectCity == null) return;\n\n    final prefs = await SharedPreferences.getInstance();\n    prefs.setString('curCity', selectCity); //存取数据\n\n    setState(() {\n      curCity = selectCity;\n    });\n  }\n\n")])])]),r("p",[t._v("在 _jumpToCitysWidget 的调用处加上参数：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("_jumpToCitysWidget(curCity);\n\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);