(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{513:function(e,t,a){"use strict";a.r(t);var r=a(42),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"用户注册登录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户注册登录"}},[e._v("#")]),e._v(" 用户注册登录")]),e._v(" "),a("p",[e._v("给大家画了个简易的注册登录流程图，我们就按照这个流程图来进行我们下面的操作")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/28/1708aa69fca9f43e?w=969&h=447&f=png&s=27801",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"短信发送-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短信发送-api"}},[e._v("#")]),e._v(" 短信发送 API")]),e._v(" "),a("p",[e._v("在给客户开发一个信息发送功能的时候，需要涉及到短信的发送，短信发送一般不同的厂商提供的接口不同，处理方式也不太一样，之前用的一个厂商的，提供了一个封装类就很容易发送短息，因此都是基于HTTP协议做的一个数据发送而已，接触阿里云的短信服务器后，发现阿里云还增加了非常多的参数，其中包括一些秘钥和签名的内容。短信发送由于比较敏感原因，大多数应用场景是验证码或者一些固定的信息提醒，因此厂商都要求客户按预定的模板来发送，这样限制了短信的应用场景，只能根据业务进行消息定制了。本篇随笔主要介绍阿里云的短信服务的发送处理。")]),e._v(" "),a("h4",{attrs:{id:"创建阿里云账号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建阿里云账号"}},[e._v("#")]),e._v(" 创建阿里云账号")]),e._v(" "),a("p",[e._v("为了访问短信服务，您需要有一个阿里云账号。如果没有，可首先按照如下步骤创建阿里云账号：")]),e._v(" "),a("ol",[a("li",[e._v("访问阿里云 "),a("a",{attrs:{href:"https://www.aliyun.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方网站"),a("OutboundLink")],1),e._v("，单击页面上的 免费注册 按钮。")]),e._v(" "),a("li",[e._v("按照屏幕提示完成注册流程并进行实名认证，短信服务只支持实名认证用户使用。为了更好地使用阿里云服务，建议尽快完成实名认证，否则部分阿里云服务将无法使用。具体实名认证流程，请参考 "),a("a",{attrs:{href:"https://help.aliyun.com/knowledge_detail/37171.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),a("OutboundLink")],1),e._v("。")])]),e._v(" "),a("h4",{attrs:{id:"获取阿里云访问密钥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取阿里云访问密钥"}},[e._v("#")]),e._v(" 获取阿里云访问密钥")]),e._v(" "),a("p",[e._v("为了使用短信发送API-node.js-SDK，您必须申请阿里云的访问密钥。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/28/1708aa8b96c51507?w=276&h=327&f=png&s=21635",alt:""}})]),e._v(" "),a("p",[e._v("阿里云访问秘钥是阿里云为用户使用 API（非控制台）来访问其云资源设计的“安全口令”。您可以用它来签名 API 请求内容以通过服务端的安全验证。")]),e._v(" "),a("p",[e._v("该访问秘钥成对（AccessKeyId 与 AccessKeySecret）生成和使用。每个阿里云用户可以创建多对访问秘钥，且可随时启用（Active）、禁用（Inactive）或者删除已经生成的访问秘钥对。")]),e._v(" "),a("p",[e._v("您可以通过阿里云控制台的 "),a("a",{attrs:{href:"https://ak-console.aliyun.com/#/accesskey",target:"_blank",rel:"noopener noreferrer"}},[e._v("秘钥管理页面"),a("OutboundLink")],1),e._v(" 创建、管理所有的访问秘钥对，且保证它处于“启用”状态。由于访问秘钥是阿里云对 API 请求进行安全验证的关键因子，请妥善保管你的访问秘钥。如果某些秘钥对出现泄漏风险，建议及时删除该秘钥对并生成新的替代秘钥对。")]),e._v(" "),a("h4",{attrs:{id:"在控制台完成模板与签名的申请-获得调用接口必备的参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在控制台完成模板与签名的申请-获得调用接口必备的参数"}},[e._v("#")]),e._v(" 在控制台完成模板与签名的申请，获得调用接口必备的参数")]),e._v(" "),a("p",[a("strong",[e._v("短信签名")])]),e._v(" "),a("p",[e._v("根据用户属性来创建符合自身属性的签名信息。企业用户需要上传相关企业资质证明，个人用户需要上传证明个人身份的证明。")]),e._v(" "),a("p",[a("em",[e._v("短信签名需要审核通过后才可以使用。")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/28/1708aa93a4e42ccc?w=1770&h=645&f=png&s=41683",alt:""}})]),e._v(" "),a("p",[a("strong",[e._v("短信模板")])]),e._v(" "),a("p",[e._v("短信模板，即具体发送的短信内容。")]),e._v(" "),a("p",[e._v("短信模板可以支持验证码、短信通知、推广短信、国际/港澳台消息四种模式。验证码和短信通知，通过变量替换实现个性短信定制。推广短信不支持在模板中添加变量。国际/港澳台消息只能使用国际/港澳台短信模版发送短信。")]),e._v(" "),a("p",[a("em",[e._v("短信模板需要审核通过后才可以使用。")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/28/1708aa9852acd0d2?w=1000&h=317&f=png&s=30270",alt:""}})]),e._v(" "),a("p",[a("strong",[e._v("为了成功发送一条短信通知，您至少需要完成以下步骤")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("在控制台完成短信签名与短信模板的申请，获得调用接口必备的参数")])]),e._v(" "),a("li",[a("p",[e._v("在“短信签名”页面完成签名的申请，获得短信签名的字符串 "),a("a",{attrs:{href:"https://help.aliyun.com/document_detail/55327.html?spm=5176.doc55288.2.1.X0mqQo",target:"_blank",rel:"noopener noreferrer"}},[e._v("签名申请手册"),a("OutboundLink")],1)])]),e._v(" "),a("li",[a("p",[e._v("在“短信模板”页面完成模板的申请，获得模板ID。"),a("a",{attrs:{href:"https://help.aliyun.com/document_detail/55330.html?spm=5176.doc55288.2.2.n0lubD",target:"_blank",rel:"noopener noreferrer"}},[e._v("模板申请手册"),a("OutboundLink")],1)])])]),e._v(" "),a("h4",{attrs:{id:"入参列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#入参列表"}},[e._v("#")]),e._v(" 入参列表")]),e._v(" "),a("p",[e._v("参数名称")]),e._v(" "),a("p",[e._v("类型")]),e._v(" "),a("p",[e._v("是否必填")]),e._v(" "),a("p",[e._v("样例取值")]),e._v(" "),a("p",[e._v("参数说明")]),e._v(" "),a("p",[e._v("PhoneNumbers")]),e._v(" "),a("p",[e._v("String")]),e._v(" "),a("p",[e._v("Y")]),e._v(" "),a("p",[e._v("15000000000")]),e._v(" "),a("p",[e._v("短信接收号码。支持以逗号分隔的形式进行批量调用，批量上限为1000个手机号码,批量调用相对于单条调用及时性稍有延迟,验证码类型的短信推荐使用单条调用的方式，发送国际/港澳台消息时，接收号码格式为：国际区号+号码，如“85200000000”")]),e._v(" "),a("p",[e._v("SignName")]),e._v(" "),a("p",[e._v("String")]),e._v(" "),a("p",[e._v("Y")]),e._v(" "),a("p",[e._v("云通信")]),e._v(" "),a("p",[e._v("短信签名")]),e._v(" "),a("p",[e._v("TemplateCode")]),e._v(" "),a("p",[e._v("String")]),e._v(" "),a("p",[e._v("Y")]),e._v(" "),a("p",[e._v("SMS_0000")]),e._v(" "),a("p",[e._v("短信模板ID，发送国际/港澳台消息时，请使用国际/港澳台短信模版")]),e._v(" "),a("p",[e._v("TemplateParam")]),e._v(" "),a("p",[e._v("String")]),e._v(" "),a("p",[e._v("N")]),e._v(" "),a("p",[e._v("{“code”:”1234”,”product”:”ytx”}")]),e._v(" "),a("p",[e._v("短信模板变量替换JSON串,友情提示:如果JSON中需要带换行符,请参照标准的JSON协议要求。")]),e._v(" "),a("p",[e._v("OutId")]),e._v(" "),a("p",[e._v("String")]),e._v(" "),a("p",[e._v("N")]),e._v(" "),a("p",[e._v("abcdefgh")]),e._v(" "),a("p",[e._v("外部流水扩展字段")]),e._v(" "),a("h4",{attrs:{id:"出参列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#出参列表"}},[e._v("#")]),e._v(" 出参列表")]),e._v(" "),a("p",[e._v("出参名称")]),e._v(" "),a("p",[e._v("出参类型")]),e._v(" "),a("p",[e._v("样例取值")]),e._v(" "),a("p",[e._v("参数说明")]),e._v(" "),a("p",[e._v("RequestId")]),e._v(" "),a("p",[e._v("String")]),e._v(" "),a("p",[e._v("8906582E-6722")]),e._v(" "),a("p",[e._v("请求ID")]),e._v(" "),a("p",[e._v("Code")]),e._v(" "),a("p",[e._v("String")]),e._v(" "),a("p",[e._v("OK")]),e._v(" "),a("p",[e._v("状态码-返回OK代表请求成功,其他错误码详见错误码列表")]),e._v(" "),a("p",[e._v("Message")]),e._v(" "),a("p",[e._v("String")]),e._v(" "),a("p",[e._v("请求成功")]),e._v(" "),a("p",[e._v("状态码的描述")]),e._v(" "),a("p",[e._v("BizId")]),e._v(" "),a("p",[e._v("String")]),e._v(" "),a("p",[e._v("134523^4351232")]),e._v(" "),a("p",[e._v("发送回执ID,可根据该ID查询具体的发送状态")]),e._v(" "),a("h2",{attrs:{id:"安装插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装插件"}},[e._v("#")]),e._v(" 安装插件")]),e._v(" "),a("p",[e._v("这是阿里官方提供的一个 阿里云开发者工具套件（SDK）。让我们不用复杂编程即可访问云服务器、云数据库RDS、云监控等多个阿里云服务。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ npm install @alicloud/pop-core --save\n\n")])])]),a("h2",{attrs:{id:"配置参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置参数"}},[e._v("#")]),e._v(" 配置参数")]),e._v(" "),a("p",[e._v("接下来将这些参数放到"),a("a",{attrs:{href:"https://github.com/push-over/egg-example/blob/master/config/config.default.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("配置"),a("OutboundLink")],1),e._v("文件中：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("config.aliyun = {\n    accessKeyId: 'xxxxxxxxxxxxxxxx',   // 秘钥\n    accessKeySecret: 'xxxxxxxxxxxx',   // 秘钥\n    endpoint: 'https://dysmsapi.aliyuncs.com',\n    apiVersion: '2017-05-25',\n    sendSms: {\n      RegionId: 'cn-hangzhou',\n      SignName: 'xxxx',   // 短信签名\n      TemplateCode: 'xxxxxx', // 短信模板ID\n    },\n};\n\n")])])]),a("h2",{attrs:{id:"注册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册"}},[e._v("#")]),e._v(" 注册")]),e._v(" "),a("p",[e._v("有了上面的信息介绍，我们大概了解了短信消息发送的处理规则了。接下来我们就来基于腾讯的 SDK 来发送短信，并完成注册。")]),e._v(" "),a("h3",{attrs:{id:"短信发送方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#短信发送方法"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/service/Utils.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("短信发送方法"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("阿里的 SDK 发送短信为我们提供了一个demo，我们来简单的改造一下这个方法来供我们使用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public sendSms(PhoneNumbers: string) {\n    const { ctx, app } = this;\n    const { accessKeyId, accessKeySecret, endpoint, apiVersion, sendSms } = app.config.aliyun;\n    const { RegionId, SignName, TemplateCode } = sendSms;\n\n    const client = new Core({\n      accessKeyId,\n      accessKeySecret,\n      endpoint,\n      apiVersion,\n    });\n    \n    // 生成验证码\n    const sendCode = ctx.helper.smsCode();\n\n    const params = {\n      RegionId,\n      PhoneNumbers,\n      SignName,\n      TemplateCode,\n      TemplateParam: JSON.stringify({ code: sendCode }),\n    };\n\t\n    // 请求方式 POST\n    const requestOption = {\n      method: 'POST',\n    };\n}\n\n")])])]),a("p",[e._v("在上方实例化了 SDK 这个对象， 使用 "),a("code",[e._v("client")]),e._v(" 这个实例调用 "),a("a",{attrs:{href:"https://help.aliyun.com/document_detail/101414.html?spm=a2c4g.11186623.6.624.3a9756e0v8n0uz",target:"_blank",rel:"noopener noreferrer"}},[e._v("SendSms"),a("OutboundLink")],1),e._v(" 方法传递参数以完成短信发送：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" return new Promise(async (resolve, _reject) => {\n  // 调用方法完成短信发送\n  await client.request('SendSms', params, requestOption).then(async (result: any) => {\n    // 把生成的验证码存到redis中\n    await ctx.service.redis.set(PhoneNumbers, sendCode, 60);\n    return resolve(result);\n  }).catch((ex: any) => {\n    resolve(ex.data);\n  });\n});\n\n")])])]),a("h3",{attrs:{id:"注册方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册方法"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://github.com/push-over/egg-example/blob/c72d08141fbd2fd52ebfbf0b5141c07e6aa86f8a/app/service/User.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("注册方法"),a("OutboundLink")],1)]),e._v(" "),a("h4",{attrs:{id:"操作数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作数据库"}},[e._v("#")]),e._v(" 操作数据库")]),e._v(" "),a("p",[e._v("我们把关于数据库的操作全部放到 service 里来进行")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("async register(data: IRegisterData) {\n    const { ctx } = this;\n    const { code, name, phone, password } = data;\n    // 根据号码在redis中取出验证码\n    const r_code = await ctx.service.redis.get(phone);\n    // 判断存取的验证码和用户输入的是否一致\n    if (Number(code) === Number(r_code)) {\n      // 把用户信息写入数据库\n      return await this.database.create({ name, phone, password });\n    }\n}\n\n// TypeScript 中的接口，之前已为大家做过介绍哦\ninterface IRegisterData {\n  code: string;  // 验证码\n  name: string;\t // 名称\n  phone: string;\t// 手机号\n  password: string;\t// 密码\n}\n\n")])])]),a("h4",{attrs:{id:"定义类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义类型"}},[e._v("#")]),e._v(" 定义类型")]),e._v(" "),a("p",[e._v("可以将 GraphQL 的类型系统分为标量类型（Scalar Types，标量类型）和其他高级数据类型，标量类型即可以表示最细粒度数据结构的数据类型，可以和 JavaScript 的原始类型对应。GraphQL 规范目前规定支持的标量类型有：")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Int")]),e._v(" ：整数，对应 JavaScript 的 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Number",target:"_blank",rel:"noopener noreferrer"}},[e._v("Number"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("code",[e._v("Float")]),e._v(" ：浮点数，对应 JavaScript 的 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Number",target:"_blank",rel:"noopener noreferrer"}},[e._v("Number"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("code",[e._v("String")]),e._v(" ：字符串，对应 JavaScript 的 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/String",target:"_blank",rel:"noopener noreferrer"}},[e._v("String"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("code",[e._v("Boolean")]),e._v(" ：布尔值，对应 JavaScript 的 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Boolean",target:"_blank",rel:"noopener noreferrer"}},[e._v("Boolean"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("code",[e._v("ID")]),e._v(" ：ID 值，是一个序列化后值唯一的字符串，可以视作对应 ES 2015 新增的 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Symbol",target:"_blank",rel:"noopener noreferrer"}},[e._v("Symbol"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("还有一些高级类型，具体大家可以去查询相关文档。我们来定义在我们这个注册登录功能的所需要的一些类型。")]),e._v(" "),a("p",[e._v("类型`GraphQL schema 定义。我们根据用户表结构、短信出参列表以及注册所需参数来定义 "),a("a",{attrs:{href:"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/graphql/user/schema.graphql",target:"_blank",rel:"noopener noreferrer"}},[e._v("schema"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# 用户\ntype User {     // User: 一般是根据数据库表结构\n  # 唯一索引\n  id: ID\n  # 手机号\n  phone: String\n  # 昵称\n  name: String\n  # 头像\n  avatar: String\n}\n\n# 短信\ntype SendSms {\t// SendSms: 可以参照阿里云短信的返回参数\n # 状态码的描述\n Message: String\n # 请求ID\n RequestId: String\n # 发送回执ID\n BizId: String\n # 状态码\n Code: String\n}\n\n# 注册\ninput Register {  // Register: 注册所需要的数据\n  # 昵称\n  name: String!\n  # 手机号\n  phone: String!\n  # 密码\n  password: String!\n  # 验证码\n  code: Int!\n}\n\n")])])]),a("p",[e._v("目前为止，我们只讨论过将例如枚举和字符串等标量值作为参数传递给字段，但是你也能很容易地传递复杂对象。这在变更（mutation）中特别有用，因为有时候你需要传递一整个对象作为新建对象。输入对象看上去和常规对象一模一样，除了关键字是 "),a("code",[e._v("input")]),e._v(" 。")]),e._v(" "),a("h4",{attrs:{id:"处理逻辑"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理逻辑"}},[e._v("#")]),e._v(" 处理逻辑")]),e._v(" "),a("p",[e._v("编写完 schema 之后，graphql 知道有哪些数据了，这个时候我们就要用到 "),a("a",{attrs:{href:"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/graphql/utils/connector.ts",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("connector")]),a("OutboundLink")],1),e._v(" 调用 egg 的 service。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n// 短信发送\npublic async sendSms(PhoneNumbers: string) {\n    const { ctx } = this;\n    return await ctx.service.utils.sendSms(PhoneNumbers);\n}\n\n// 注册\npublic async register(data: IRegisterData) {\n    const { ctx } = this;\n    return await ctx.service.user.register(data);\n}\n\n")])])]),a("h4",{attrs:{id:"进行处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进行处理"}},[e._v("#")]),e._v(" 进行处理")]),e._v(" "),a("p",[e._v("大家还记得在启动一个最简单的 graphql api 服务器一篇时为大家画的一个简易流程图吗，"),a("a",{attrs:{href:"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/graphql/utils/resolver.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("resolver"),a("OutboundLink")],1),e._v(" 调用对应的 connector 进行处理。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("export default {\n  Mutation: {\n    // 短信发送\n    async sendSms(_root: any, { PhoneNumbers }, { connector }) {\n      return await connector.utils.sendSms(PhoneNumbers);\n    },\n    \n    // 注册\n    async register(_root: any, { data }, { connector }) {\n      return await connector.user.register(data);\n    },\n  },\n};\n\n")])])]),a("h4",{attrs:{id:"查询和变更类型-types-mutation-and-query"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询和变更类型-types-mutation-and-query"}},[e._v("#")]),e._v(" 查询和变更类型（Types Mutation And Query）")]),e._v(" "),a("p",[e._v("GraphQL 的一个查询请求被称为一份 query 文档（query document），即 GraphQL 服务能够解析验证并执行的一串请求字符串。query 由操作（Operation）和片段（Fragments）组成。一个 query 可以包含多个操作和片段。只有包含操作的 query 才会被 GraphQL 服务执行。但是不包含操作，只有片段的 query 也会被 GraphQL 服务解析验证，这样一份片段就可以在多个 query 文档内使用。")]),e._v(" "),a("p",[e._v("只包含一个操作的 query 可以不带操作名称或者使用简写形式（即 query 关键字加操作名）。query 包含多个操作时，所有操作都必须带上名称。")]),e._v(" "),a("p",[e._v("GraphQL 规范支持两种操作：")]),e._v(" "),a("ul",[a("li",[e._v("Query ：仅获取数据（fetch）的只读请求")]),e._v(" "),a("li",[e._v("Mutation ：获取数据后还有写操作的请求")])]),e._v(" "),a("p",[e._v("简单来讲， Query 就是获取数据的基本查询；Mutation 支持对数据的增、删、改等操作。")]),e._v(" "),a("p",[e._v("注册肯定是要写入数据库的，发送短信也不仅仅是只读的请求，所以在这里我选择了 "),a("a",{attrs:{href:"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/graphql/mutation/schema.graphql",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("Mutation")]),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Mutation {\n  sendSms(PhoneNumbers: String!) : SendSms\n  register(data: Register!): User\n}\n\n")])])]),a("h3",{attrs:{id:"完成注册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完成注册"}},[e._v("#")]),e._v(" 完成注册")]),e._v(" "),a("p",[e._v("我们把 GraphQL 服务运行起来")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/28/1708aaa31feb8e74?w=1876&h=487&f=png&s=53125",alt:""}})]),e._v(" "),a("p",[e._v("然后这时候手机上就来了条短信")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/28/1708aaa8ac94e29f?w=1080&h=2400&f=jpeg&s=186509",alt:""}})]),e._v(" "),a("p",[e._v("紧接着我们去完成注册")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/28/1708aaac156d9f1a?w=1902&h=555&f=png&s=54749",alt:""}})]),e._v(" "),a("p",[e._v("至此我们的注册就算是告一段落了，接下来我们来看登录。")]),e._v(" "),a("h2",{attrs:{id:"登录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#登录"}},[e._v("#")]),e._v(" 登录")]),e._v(" "),a("p",[e._v("按照我们的注册流程，我们再来利用登陆这个功能熟悉一下 graphql 的工作流程。")]),e._v(" "),a("h4",{attrs:{id:"操作数据库-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作数据库-2"}},[e._v("#")]),e._v(" 操作数据库")]),e._v(" "),a("p",[e._v("我们先在 "),a("a",{attrs:{href:"https://github.com/push-over/egg-example/blob/c72d08141fbd2fd52ebfbf0b5141c07e6aa86f8a/app/service/User.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("service"),a("OutboundLink")],1),e._v(" 里操作数据库，接收两个参数，登录成功后我们会生成一个 "),a("code",[e._v("uuid")]),e._v(" 返回给前端来当做 "),a("code",[e._v("token")]),e._v("使用。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  public async fetchByNamePassword(phone: string, password: string) {\n    const { ctx } = this;\n    // 生成一个唯一标识\n    const uuid = ctx.helper.uuidv1();\n   \t// 查询当前用户是否存在\n    const user = await this.database.findOne({\n      where: {\n        phone,\n        password,\n      },\n    });\n\n    if (!user) return null;\n    const result = JSON.stringify(user);\n    // 存到redis中\n    await ctx.service.redis.set(uuid, result, 3600 * 24);\n    return uuid;\n  }\n\n")])])]),a("h4",{attrs:{id:"定义类型-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义类型-2"}},[e._v("#")]),e._v(" 定义类型")]),e._v(" "),a("p",[e._v("我们定义一个输入类型，你可以理解为这是前端传递的数据。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("input Authentication {\n  # 手机号\n  phone: String!\n  # 密码\n  password: String!\n}\n\n")])])]),a("h4",{attrs:{id:"处理逻辑-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理逻辑-2"}},[e._v("#")]),e._v(" 处理逻辑")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/graphql/user/connector.ts",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("connector")]),a("OutboundLink")],1),e._v(" 调用 egg 的 service。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("async fetchByNamePassword(phone: string, password: string) {\n    const { ctx } = this;\n    return await ctx.service.user.fetchByNamePassword(phone, password);\n}\n\n")])])]),a("h4",{attrs:{id:"进行处理-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进行处理-2"}},[e._v("#")]),e._v(" 进行处理")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/push-over/egg-example/blob/70dc0ac730c452f2344568a75cf5ce1f6394811d/app/graphql/user/resolver.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("resolver"),a("OutboundLink")],1),e._v(" 调用对应的 connector 进行处理。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("export default {\n  Query: {\n    async login(_root: any, { data }, { connector }) {\n      const { phone, password } = data;\n      return await connector.user.fetchByNamePassword(phone, password);\n    },\n  },\n};\n\n")])])]),a("h4",{attrs:{id:"查询类型-query-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询类型-query-types"}},[e._v("#")]),e._v(" 查询类型（Query Types）")]),e._v(" "),a("ul",[a("li",[e._v("Query 对应 读")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Query {\n  login(data: Authentication): String!\n}\n\n")])])]),a("h3",{attrs:{id:"完成登录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完成登录"}},[e._v("#")]),e._v(" 完成登录")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/2/28/1708aab158638588?w=1833&h=364&f=png&s=30583",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("p",[e._v("在这一节中，我们学习到一个注册登录的流程是怎样的，以及怎么使用短信服务商来进行短信验证，以及使用graphql 的一个完整流程是怎样的，在之后的练习中，我都将以这种流程来进行操作。")])])}),[],!1,null,null,null);t.default=n.exports}}]);