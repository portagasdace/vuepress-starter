(window.webpackJsonp=window.webpackJsonp||[]).push([[352],{708:function(e,t,a){"use strict";a.r(t);var s=a(42),v=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"导读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导读"}},[e._v("#")]),e._v(" 导读")]),e._v(" "),a("p",[e._v("本节标题：「小试牛刀」- 初步认识同构 - 交互实现")]),e._v(" "),a("p",[e._v("本节主旨： 基于上一节，尝试引出最明显的问题，分析问题，逐步解决问题，实现可交互的 react ssr 应用")]),e._v(" "),a("p",[e._v("本节配套代码:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Bigerfe/koa-react-ssr/tree/better/packages/my-react-ssr",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/Bigerfe/koa-react-ssr/tree/better/packages/my-react-ssr"),a("OutboundLink")],1)]),e._v(" "),a("h1",{attrs:{id:"正文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正文"}},[e._v("#")]),e._v(" 正文")]),e._v(" "),a("p",[e._v("上一节，我们实现了一个"),a("code",[e._v("react ssr")]),e._v("版的"),a("code",[e._v("hello world")]),e._v("，让我们对服务端组件直出有了一个基本的了解。")]),e._v(" "),a("p",[e._v("单纯的"),a("code",[e._v("ssr")]),e._v("也没啥意义，也只能把组件当做一个模板来用，连个最基本的交互都没有。")]),e._v(" "),a("p",[e._v("比如：我想点击页面某个元素的时候给我一个反馈提示。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/27/16f46b21bc6512c1?w=500&h=373&f=png&s=23714",alt:""}})]),e._v(" "),a("p",[e._v("ok ，这不就是增加一个事件么，这个太简单了吧，代码信手拈来。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("//组件\nexport default class Index extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n   handlerClick(){\n       alert('一起来玩 react ssr 啊');\n   }\n\n    render() {\n        return <h1 onClick={this.handlerClick}>click here!</h1>\n    }\n}\n\n")])])]),a("p",[e._v("其实结果可想而知，这个事件根本不会执行的。")]),e._v(" "),a("p",[a("strong",[e._v("这是为什么呢？")])]),e._v(" "),a("p",[e._v("我们都知道元素事件是基于浏览器执行的，只有在浏览器端执行了相应的 "),a("code",[e._v("js")]),e._v(" 代码才能绑定事件。")]),e._v(" "),a("p",[e._v("在上一节我们实现的这是一个 "),a("code",[e._v("ssr")]),e._v(" 直出效果，也就是说只是一个静态页面。")]),e._v(" "),a("p",[e._v("所以我们需要让代码在浏览器端也执行一次，组件在浏览器端挂载完后"),a("code",[e._v("react")]),e._v("会自动完成事件绑定。")]),e._v(" "),a("p",[a("strong",[e._v("浏览器也执行一次代码，组件不会重复渲染吗？")])]),e._v(" "),a("p",[e._v("浏览器接管页面后，"),a("code",[e._v("react-dom")]),e._v("在渲染组件前会先和页面中的节点做对比，只有对比失败的时候才会采用客户端的内容进行渲染,且"),a("code",[e._v("react")]),e._v("会尽量多的复用已有的节点。")]),e._v(" "),a("h1",{attrs:{id:"初识同构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初识同构"}},[e._v("#")]),e._v(" 初识同构")]),e._v(" "),a("p",[a("strong",[e._v("那需要写两套代码？")])]),e._v(" "),a("p",[e._v("既然客户端和服务端都要执行，那是不是就要写两份代码，供双端使用?")]),e._v(" "),a("p",[e._v("当然不需要，也完全不合理。")]),e._v(" "),a("p",[e._v("这正是我们本节的重点 - "),a("strong",[e._v("同构")]),e._v("。")]),e._v(" "),a("p",[e._v("基于同构，浏览器和服务端可以运行同一份代码，服务端直出组件后，浏览器接管页面，然后剩下的工作由浏览器来完成。")]),e._v(" "),a("h1",{attrs:{id:"客户端代码执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端代码执行"}},[e._v("#")]),e._v(" 客户端代码执行")]),e._v(" "),a("p",[e._v("经过上面一些理论的分析，我们已经清楚的了解到我们应该做什么。")]),e._v(" "),a("p",[e._v("现在回到正题，来实现元素事件的绑定。")]),e._v(" "),a("h2",{attrs:{id:"如何实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现"}},[e._v("#")]),e._v(" 如何实现？")]),e._v(" "),a("p",[e._v("大家应该都做过"),a("code",[e._v("react spa")]),e._v("项目，大部分情况都是 请求页面后服务器返回了一个页面的基本框架，同时包括 "),a("code",[e._v("js css")]),e._v(" 等静态资源。")]),e._v(" "),a("p",[e._v("所以这里我们第一步要先把"),a("code",[e._v("js")]),e._v("代码打包，在服务端"),a("code",[e._v("ssr")]),e._v(" 时,同时将这个 "),a("code",[e._v("js")]),e._v(" 资源输出就可以了。")]),e._v(" "),a("p",[e._v("如图")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/27/16f46ca8c95b96fc?w=505&h=375&f=png&s=59883",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"实现思路说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现思路说明"}},[e._v("#")]),e._v(" 实现思路说明")]),e._v(" "),a("p",[e._v("为了方便开发我们从这里开始使用 "),a("code",[e._v("koa2")]),e._v("来构建 "),a("code",[e._v("http")]),e._v(" 服务。")]),e._v(" "),a("p",[e._v("另外统一双端的模块化方式，在 "),a("code",[e._v("node")]),e._v(" 端也使用 "),a("code",[e._v("es6 module")]),e._v(" 方式进行模块的引入，但是在"),a("code",[e._v("node")]),e._v(" 端不能运行，所以需要使用 "),a("code",[e._v("babel")]),e._v(" 进行编译。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npx babel xxx.js \n\n")])])]),a("p",[a("strong",[e._v("整体实现思路")])]),e._v(" "),a("ul",[a("li",[e._v("使用 "),a("code",[e._v("koa")]),e._v(" 创建一个基础 "),a("code",[e._v("http")]),e._v(" 服务，可以直出 "),a("code",[e._v("Index")]),e._v(" 组件。")]),e._v(" "),a("li",[e._v("然后编写客户端代码，增加 "),a("code",[e._v("Index")]),e._v(" 组件的渲染入口，使用"),a("code",[e._v("react-dom")]),e._v(" 库渲染 "),a("code",[e._v("Index")]),e._v(" 组件。")]),e._v(" "),a("li",[e._v("然后使用 "),a("code",[e._v("webpack")]),e._v(" 将"),a("code",[e._v("js")]),e._v("代码打包到一个文件内 "),a("code",[e._v("index.js")]),e._v(" 内。")]),e._v(" "),a("li",[e._v("服务端直出的时候输出这个 "),a("code",[e._v("js")]),e._v(" 资源到浏览器。")]),e._v(" "),a("li",[e._v("在运行前，需要使用"),a("code",[e._v("webpack")]),e._v("将客户端代码编译打包，使用"),a("code",[e._v("babel cli")]),e._v("打包编译服务端代码。")])]),e._v(" "),a("h2",{attrs:{id:"安装插件、工具、库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装插件、工具、库"}},[e._v("#")]),e._v(" 安装插件、工具、库")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("react react-dom //react 基础库\n@babel/core @babel/cli //babel 基础库\n@babel/preset-react //编译 react 代码\n@babel/preset-env //配置 babel 编译的一些选项\nbabel-loader //编译 js 代码\nwebpack webpack-cli   //webpack 两个核心库\nkoa2 //web 开发框架\nkoa-static //实现静态资源的访问\n\n")])])]),a("p",[e._v("ps:"),a("code",[e._v("@babel/preset-env")]),e._v(" 是一个预设集合，代替了以往的 "),a("code",[e._v("stage-*")]),e._v(" "),a("code",[e._v("babel-preset-es2015")]),e._v("等包，可以根据开发者的配置，按需加载插件,还可以通过设置"),a("code",[e._v("target")]),e._v("属性对"),a("code",[e._v("node")]),e._v(" 或者"),a("code",[e._v("浏览器")]),e._v("端进行编译输出设置。")]),e._v(" "),a("h2",{attrs:{id:"具体实施"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具体实施"}},[e._v("#")]),e._v(" 具体实施")]),e._v(" "),a("p",[a("strong",[e._v("创建基础 "),a("code",[e._v("http")]),e._v(" 服务")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// /app.js \n\n//web 服务启动入口文件\n//这是一个中间件，它用于处理web 请求，实现react ssr，将组件转换为 html字符串\n\nconst reactSsr  = require('./dist/src/server/middlewares/react-ssr').default;\nconst Koa = require('koa2');\nconst koaStatic =require('koa-static');\nconst path = require('path');\n\nconst app = new Koa();\n\n//设置可访问的静态资源，我们把 webpack 打包后的代码放到/dist/static目录下\napp.use(koaStatic(\n        path.join(__dirname, './dist/static')\n));\n\n//react ssr 中间件\napp.use(reactSsr);\n\n//启动服务\napp.listen(9001);\n\nconsole.log('server is start .9001');\n\n")])])]),a("p",[a("strong",[e._v("react ssr 中间件")])]),e._v(" "),a("p",[e._v("直出组件的同时， 将"),a("code",[e._v("index.js")]),e._v("代码资源直出到浏览器端。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<script type="text/javascript"  src="index.js"><\/script>\n\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// ./src/server/middlewares/react-ssr.js\n\n//完成 react ssr 工作的中间件,组件在服务端渲染的逻辑都在这个文件内\n\n//引入Index 组件\nimport React from \'react\';\n//引入index 组件\nimport Index from \'../../client/pages/index\';\nimport { renderToString} from \'react-dom/server\';\n\nexport default  (ctx,next)=>{\n\n    const html = renderToString(<Index/>);\n    ctx.body=`<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>my react ssr</title>\n</head>\n<body>\n    <div id="root">\n       ${html}\n    </div>\n</body>\n</html>\n<script type="text/javascript"  src="index.js"><\/script>//这里绑定了 index.js代码，浏览器会下载后执行\n`;\n\n    return next();\n}\n\n')])])]),a("p",[a("strong",[e._v("Index组件定义")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// /src/client/pages/index/index.js\n//index 组件\n\nimport React from 'react';\n\n//组件\nexport default class Index extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n   handlerClick(){\n       alert('一起来玩 react ssr 呀。');\n   }\n\n    render() {\n        return <h1 onClick={this.handlerClick}>click here!</h1>\n    }\n}\n\n")])])]),a("p",[a("strong",[e._v("实现组件在浏览器端渲染和挂载")])]),e._v(" "),a("p",[e._v("浏览器端执行组件渲染的入口文件,也是 "),a("code",[e._v("webpack")]),e._v(" 进行资源构建的 "),a("code",[e._v("entry")]),e._v(" 入口。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// ./src/client/app/index.js\n\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport Index from '../pages/index';\n\n//渲染 index 组件 到页面\nReactDom.hydrate(<Index />, document.getElementById('root'))\n\n\n")])])]),a("p",[a("strong",[e._v("webpack 配置")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// ./webpack/webpack.dev.config.js\n\nconst path = require('path');\n\n//定一个通用的路径转换方法\nconst resolvePath = (pathstr) => path.resolve(__dirname, pathstr);\n\nmodule.exports = {\n    mode: 'development',\n    entry: resolvePath('../src/client/app/index.js'),//入口文件\n    output: {\n        filename: 'index.js', //设置打包后的文件名\n        path: resolvePath('../dist/static')//设置构建结果的输出目录\n    },\n    module: {\n        rules: [{\n                test: /\\.jsx?$/,\n                loader: 'babel-loader',\n                exclude: /node_modules/\n            }\n        ]\n    }\n}\n\n")])])]),a("p",[a("strong",[e._v("babel 配置")])]),e._v(" "),a("p",[e._v("个人习惯喜欢把配置单独放在"),a("code",[e._v(".babelrc")]),e._v("里面，当然也可以放到 "),a("code",[e._v("webpack")]),e._v(" 配置文件内。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "env": {\n        "development": {\n            "presets": [\n                [\n                    "@babel/preset-env",\n                    {\n                        "targets": {\n                            "browsers": [\n                                ">1%",\n                                "last 2 versions",\n                                "not ie <= 8"\n                            ]\n                        }\n                    }\n                ],\n                "@babel/preset-react"\n            ]\n        }\n    }\n}\n\n')])])]),a("p",[e._v("简单说下上面配置中"),a("code",[e._v("env")]),e._v("和"),a("code",[e._v("development")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("env")]),e._v(" 用于设置对应环境下的配置, 在编译的时候"),a("code",[e._v("babel")]),e._v("会根据当前环境变量的值来决定采用哪个配置。")]),e._v(" "),a("p",[a("code",[e._v("env")]),e._v("字段的值会从"),a("code",[e._v("process.env.BABEL_ENV")]),e._v("获取，如果"),a("code",[e._v("BABEL_ENV")]),e._v("不存在，则从"),a("code",[e._v("process.env.NODE_ENV")]),e._v("获取，如果"),a("code",[e._v("NODE_ENV")]),e._v("还不存在，则取默认值"),a("code",[e._v("development")]),e._v("，使用这样方式进行配置可以定义多个不同的配置项，同时可以通过环境变量来控制要读取的配置。")]),e._v(" "),a("p",[a("strong",[e._v("客户端代码打包")])]),e._v(" "),a("p",[a("code",[e._v("webapck")]),e._v("构建，配置一个 "),a("code",[e._v("npm script")]),e._v("命令")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"dev": "webpack --config ./webpack/webpack.dev.config.js",\n\n')])])]),a("p",[a("strong",[e._v("服务端代码打包")])]),e._v(" "),a("p",[a("code",[e._v("node")]),e._v(" 端代码使用的是"),a("code",[e._v("es6 module")]),e._v("方式，所以需要编译一次。")]),e._v(" "),a("p",[a("code",[e._v("node")]),e._v(" 端所需要的 "),a("code",[e._v("react")]),e._v(" 组件代码需要使用 "),a("code",[e._v("babel")]),e._v(" 进行编译。")]),e._v(" "),a("p",[a("code",[e._v("babel")]),e._v("除了可以编译单独的文件外，还可以直接编译整个目录。")]),e._v(" "),a("p",[e._v("这里我们也为其配一个 "),a("code",[e._v("npm script")]),e._v(" 命令，并将代码打包到"),a("code",[e._v("dist/src")]),e._v("目录下")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"babel-node": "babel  src -d dist/src"\n\n')])])]),a("p",[e._v("执行上面的两个命令")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm run dev\nnpm run babel-node\n\n")])])]),a("p",[e._v("ok，到这里浏览器端和服务端所需的最终代码已转换完成。")]),e._v(" "),a("p",[a("strong",[e._v("http 服务启动")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("node ./app.js\n\n")])])]),a("p",[e._v("元素事件已正常绑定上。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/27/16f46e2db550ca51?w=787&h=416&f=png&s=65617",alt:""}})]),e._v(" "),a("h1",{attrs:{id:"双端对比测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双端对比测试"}},[e._v("#")]),e._v(" 双端对比测试")]),e._v(" "),a("p",[e._v("到这里我们再回看一下，前面说 "),a("code",[e._v("react ssr")]),e._v(" 原理的时候，有说到双端节点对比。")]),e._v(" "),a("p",[e._v("意思是浏览器端代码执行时生成的节点结构会和网页内已有的结构进行对比。如果对比失败，则采用浏览器端的结构。")]),e._v(" "),a("p",[e._v("这个对比过程由 "),a("code",[e._v("react")]),e._v(" 完成。")]),e._v(" "),a("p",[e._v("现在我们就来测试一下，以便更具象的理解这个概念。")]),e._v(" "),a("p",[e._v("我们在"),a("code",[e._v("react ssr")]),e._v(" 中间件内多增加一个标签。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<body>\n    <div id="root">\n       ${html} <span>测试内容</span>//增加了span 标签\n    </div>\n</body>\n\n')])])]),a("p",[e._v("再次运行服务查看页面，"),a("code",[e._v("span")]),e._v(" 标签内容会一闪而过。")]),e._v(" "),a("p",[e._v("因为节点对比失败，结果使用的是客户端的节点。")]),e._v(" "),a("p",[e._v("当然还有一个重点就是浏览器端的组件渲染和服务端渲染的差别，服务端只是生成-"),a("code",[e._v("html")]),e._v(" 字符串，也只会执行组件的"),a("code",[e._v("componentWillMount")]),e._v("方法。")]),e._v(" "),a("p",[e._v("在浏览器端渲染同时会对比节点，进行节点重用，完成事件的绑定。")]),e._v(" "),a("h1",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("p",[e._v("这一节，我们对同构有了初步的了解和认识，然后基于同构的理念，一步一步的从零实现了一个组件的双端渲染，同时这个实践也是对之前理论进行验证的重要过程。")]),e._v(" "),a("p",[e._v("虽然这仍然是一个 "),a("code",[e._v("demo")]),e._v(",功能虽小，但是思想才是重要的，我们可以基于此举一反三。会让你对"),a("code",[e._v("react ssr")]),e._v(" 的理解更深一步，当然对于构建完整的"),a("code",[e._v("react ssr")]),e._v("应用骨架这也是必经之路。")]),e._v(" "),a("p",[e._v("最后，你也可以试试给组件添加一些其他的交互或者数据，体验一下这个过程,毕竟实践出真知嘛。")]),e._v(" "),a("p",[e._v("本节完整代码:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Bigerfe/koa-react-ssr/tree/better/packages/my-react-ssr",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/Bigerfe/koa-react-ssr/tree/better/packages/my-react-ssr"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("感谢你的阅读。")]),e._v(" "),a("p",[e._v("如果有问题欢迎留言，也欢迎在留言区留下你的想法和思考。")])])}),[],!1,null,null,null);t.default=v.exports}}]);