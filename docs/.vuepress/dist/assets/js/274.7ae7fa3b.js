(window.webpackJsonp=window.webpackJsonp||[]).push([[274],{630:function(e,s,n){"use strict";n.r(s);var t=n(42),r=Object(t.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"web-ui-之编写首页功能性代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#web-ui-之编写首页功能性代码"}},[e._v("#")]),e._v(" Web UI 之编写首页功能性代码")]),e._v(" "),n("p",[e._v("紧接着上一个小节，将整个逻辑整理出来后，又准备好了静态资源，本小节将带领大家编写首页的功能性代码。")]),e._v(" "),n("h2",{attrs:{id:"界面重构-编写首页功能性代码之爬虫状态统计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#界面重构-编写首页功能性代码之爬虫状态统计"}},[e._v("#")]),e._v(" 界面重构-编写首页功能性代码之爬虫状态统计")]),e._v(" "),n("p",[e._v("爬虫状态的统计，有利于日常管理时观察平台上爬虫的运行情况，对于运行情况的分析提供了一定的信息基础。这里的爬虫状态指的是待启动/正在运行/已结束爬虫数，也就是页面中「爬虫运行信息一览」部分的的数据。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/15/1667587dde8223de?w=1236&h=200&f=png&s=12718",alt:""}})]),e._v(" "),n("p",[e._v("通过对 Jobs 类的源码跟进，可以知道记录 Pending 状态、运行状态的对象，它们都跟"),n("code",[e._v("self.root")]),e._v("有关，所以代码改为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\ndef status_nums(self, finishes):\n    """获取当前不同状态的爬虫数\n    :param finishes: 已行完毕的爬虫列表\n    :return: pending/running/finished 状态爬虫数的列表 list\n    """\n    pends = [queue.list() for project, queue in self.root.poller.queues.items()]\n    run_value = self.root.launcher.processes.values()  # 正在运行的爬虫列表\n    pend = pends[0] if pends else []\n    return list(map(len, [pend, run_value, finishes]))\n\ndef features(self):\n    """ 爬虫统计数据 """\n    finishes = self.root.launcher.finished\n    pending, running, finished = status_nums(self, finishes) # 待启动/正在运行/已结束爬虫数\n\n')])])]),n("p",[e._v("为了保持主要代码的逻辑清晰，在上方代码中定义了"),n("code",[e._v("status_nums")]),e._v("函数以获取当前不同状态的爬虫数，并以列表形式返回，接着只需要通过 Python 列表的特性即可轻松将其拆包。")]),e._v(" "),n("h2",{attrs:{id:"界面重构-编写首页功能性代码之爬虫运行时间统计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#界面重构-编写首页功能性代码之爬虫运行时间统计"}},[e._v("#")]),e._v(" 界面重构-编写首页功能性代码之爬虫运行时间统计")]),e._v(" "),n("p",[e._v("统计信息中必不可少的就是平均值、最大值与最小值，对应的是首页中"),n("strong",[e._v("爬虫平均运行时间")]),e._v("、"),n("strong",[e._v("最短运行时间")]),e._v("、"),n("strong",[e._v("最长运行时间")]),e._v("。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/15/16675b7f9d504b59?w=1210&h=157&f=png&s=15649",alt:""}})]),e._v(" "),n("blockquote",[n("p",[e._v("为了提高文章可读性并保持逻辑清晰，在文章中"),n("code",[e._v("+")]),e._v("代表"),n("code",[e._v("新增的代码")]),e._v("，"),n("code",[e._v("-")]),e._v("代表"),n("code",[e._v("删除的代码")])])]),e._v(" "),n("p",[e._v("通过定义新的函数来保持主代码的逻辑清晰，在下面的代码基础上进行改动。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('+from functools import reduce\n\n\n+def run_time_stats(finishes):\n    """爬虫运行时间统计\n    :param finishes: 已行完毕的爬虫列表\n    :return: average-平均时间，shortest-最短运行时间， longest-最长运行时间\n    """\n    runtime = [microsec_trunc(f.end_time - f.start_time) for f in finishes]  # 爬虫运行时间\n    # 平均时间, 求和不能用sum, 采用reduce进行计算\n    average = reduce(lambda x, y: x + y, runtime) / len(runtime) if runtime else "0:00:00"\n    shortest = min(runtime) if runtime else "0:00:00"  # 最短运行时间\n    longest = max(runtime) if runtime else "0:00:00"  # 最长运行时间\n    return average, shortest, longest\n\ndef features(self):\n    """ 爬虫统计数据 """\n    finishes = self.root.launcher.finished\n    pending, running, finished = status_nums(self, finishes) # 待启动/正在运行/已结束爬虫数\n    + average, shortest, longest = run_time_stats(finishes) # 爬虫运行时间统计\n\n')])])]),n("p",[e._v("将爬虫运行记录对象"),n("code",[e._v("finishes")]),e._v("交给"),n("code",[e._v("run_time_stats")]),e._v("，通过"),n("code",[e._v("reduce")]),e._v("对爬虫运行时长进行累加并求平均值，然后通过"),n("code",[e._v("min")]),e._v("和"),n("code",[e._v("max")]),e._v("取出其中的运行时长最小值、运行时长最大值。如果没有爬虫被调用过，则"),n("code",[e._v("finishes")]),e._v("中也不会有运行记录，这样的取值方式会出异常的。考虑到页面的友好交互且规避取空值的问题，如果记录为空给出默认时间格式"),n("code",[e._v("0:00:00")]),e._v("，并且通过三目运算的方式决定最后的返回结果。")]),e._v(" "),n("h2",{attrs:{id:"界面重构-编写首页功能性代码之爬虫运行时长-rank-榜"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#界面重构-编写首页功能性代码之爬虫运行时长-rank-榜"}},[e._v("#")]),e._v(" 界面重构-编写首页功能性代码之爬虫运行时长 Rank 榜")]),e._v(" "),n("p",[e._v("榜单是数据可视化中比较有意思的模块，它可以很直观的告诉你，哪些爬虫运行的时间是最长，或许会在榜单上发现一些异常的爬虫。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/15/16675b902b1915fa?w=1745&h=237&f=png&s=16053",alt:""}})]),e._v(" "),n("p",[e._v("完成榜单排行这个功能需要获取所有的爬虫运行时间，并计算出爬虫运行时长，再根据运行时长做排序与切片：")]),e._v(" "),n("blockquote",[n("p",[e._v("为了提高文章可读性并保持逻辑清晰，在文章中"),n("code",[e._v("+")]),e._v("代表"),n("code",[e._v("新增的代码")]),e._v("，"),n("code",[e._v("-")]),e._v("代表"),n("code",[e._v("删除的代码")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('+from datetime import timedelta\n+from datetime import datetime\n\n+def microsec_trunc(timelike):\n    if hasattr(timelike, \'microsecond\'):\n        ms = timelike.microsecond\n    else:\n        ms = timelike.microseconds\n    return timelike - timedelta(microseconds=ms)\n\n+def time_rank(self, index=0):\n    """爬虫运行时间排行 从高到低\n    :param index: 排行榜数量 为0时默认取全部数据\n    :return: 按运行时长排序的排行榜数据\n    """\n    finished = self.root.launcher.finished\n    # 由于dict的键不能重复，但时间作为键是必定会重复的，所以这里将列表的index位置与时间组成tuple作为dict的键\n    tps = {(microsec_trunc(f.end_time - f.start_time), i): f.spider for i, f in enumerate(finished)}\n    # rps格式 [{"time": time, "spider": spider}, {"time": time, "spider": spider}]\n    result = [{"time": str(k[0]), "spider": tps[k]} for k in sorted(tps.keys(), reverse=True)]  # 已排序\n    if len(result) == 0:\n        result = [{"rank": 0, "spider": "nothing", "time": "00:00:00"}]\n    rps = result if index == 0 else result[:index]  # 为0时取所有排行，为int则进行切片\n    return rps\n\n+def time_ranks_table(self, index=0):\n    """爬虫运行时间排行 从高到低\n    :param index: 排行榜数量\n    :return: 符合排行榜数的<table>表格\n    """\n    tds = []\n    rps = time_rank(self, index=index)\n    for i, r in enumerate(rps):\n        aps = "<tr><td><i>{key}</i></td><td>{spider}</td><td>{number}</td></tr>".format(\n            key=i, spider=r.get("spider"), number=r.get("time"))\n        tds.append(aps)\n    table = "".join(tds) if len(tds) else ""\n    return table\n\ndef features(self):\n    """ 爬虫统计数据 """\n    finishes = self.root.launcher.finished\n    pending, running, finished = status_nums(self, finishes) # 待启动/正在运行/已结束爬虫数\n    average, shortest, longest = run_time_stats(finishes) # 爬虫运行时间统计\n    +ranks = time_ranks_table(self, index=10) # 爬虫运行时间排行\n\n')])])]),n("p",[e._v("上方代码中"),n("code",[e._v("time_ranks_table")]),e._v("接收 index 参数，计算后的结果列表根据传入的 index 参数进行切片，这样就可以实现排行榜的排行长度选择，比如运行时长前 15 的爬虫运行记录或运行时长前 10 的爬虫运行记录。其中"),n("code",[e._v("microsec_trunc")]),e._v("方法是 Scrapyd 在"),n("code",[e._v("webwite.py")]),e._v("中使用的方法，此处笔者将其代码复制到"),n("code",[e._v("webtools.py")]),e._v("中。由于在 HTML 中，表格代码结构为：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<table>\n    <tbody>\n        <tr>\n            <td></td>\n        </tr>\n    </tbody>\n</table>\n\n")])])]),n("p",[e._v("所以这里只需要将"),n("code",[e._v("<tr><td></td></tr>")]),e._v("格式的数据生成即可，所以将时间计算与样式生成拆成两个不同的函数"),n("code",[e._v("time_rank")]),e._v("和"),n("code",[e._v("time_ranks_table")]),e._v("。")]),e._v(" "),n("h2",{attrs:{id:"界面重构-编写首页功能性代码之爬虫调用情况统计"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#界面重构-编写首页功能性代码之爬虫调用情况统计"}},[e._v("#")]),e._v(" 界面重构 - 编写首页功能性代码之爬虫调用情况统计")]),e._v(" "),n("p",[e._v("平台上部署的爬虫数量很多，随着时间的推移，你无法从数以千计的爬虫运行记录中判断到底哪一些爬虫是部署后重来未被调用过的，哪一些爬虫是被调用过的甚至哪一个爬虫被调用的次数最多，它被调用了多少次。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/15/16675e3b43be94b7?w=601&h=143&f=png&s=15195",alt:""}})]),e._v(" "),n("p",[e._v("对于爬虫是否被调用，也是需要根据已有条件进行计算或比对的，这里的逻辑是：")]),e._v(" "),n("ul",[n("li",[e._v("先获取所有项目中的所有爬虫名")]),e._v(" "),n("li",[e._v("再获取已运行结束的爬虫记录中的爬虫名")]),e._v(" "),n("li",[e._v("通过 set 的 different 进行比对，求出差值")]),e._v(" "),n("li",[e._v("通过 Counter 和 most_common 计算得出被调用次数最多的爬虫及对应次数")])]),e._v(" "),n("blockquote",[n("p",[e._v("为了提高文章可读性并保持逻辑清晰，在文章中"),n("code",[e._v("+")]),e._v("代表"),n("code",[e._v("新增的代码")]),e._v("，"),n("code",[e._v("-")]),e._v("代表"),n("code",[e._v("删除的代码")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('+from collections import Counter\n\n\n+def get_ps(self):\n    """获取项目列表与爬虫列表\n    :param self:\n    :return: projects-项目列表， spiders-爬虫列表\n    """\n    projects = list(self.root.scheduler.list_projects())\n    spiders = get_spiders(projects)\n    return projects, spiders\n\n+def get_invokes(finishes, spiders):\n    """获取已被调用与未被调用的爬虫名称\n    :param: finishes 已运行完毕的爬虫列表\n    :param: spiders 爬虫列表\n    :return: invoked-被调用过的爬虫集合, un_invoked-未被调用的爬虫集合, most_record-被调用次数最多的爬虫名与次数\n    """\n    invoked = set(i.spider for i in finishes)\n    un_invoked = set(spiders).difference(invoked)\n    invoked_record = Counter(i.spider for i in finishes)\n    most_record = invoked_record.most_common(1)[0] if invoked_record else ("nothing", 0)\n    return invoked, un_invoked, most_record\n\ndef features(self):\n    """ 爬虫统计数据 """\n    finishes = self.root.launcher.finished\n    pending, running, finished = status_nums(self, finishes) # 待启动/正在运行/已结束爬虫数\n    average, shortest, longest = run_time_stats(finishes) # 爬虫运行时间统计\n    ranks = time_ranks_table(self, index=10) # 爬虫运行时间排行\n    +projects, spiders = get_ps(self) # 项目/爬虫列表\n    +invoked_spider, un_invoked_spider, most_record = get_invokes(finishes, spiders) # 被调用过/未被调用的爬虫\n\n')])])]),n("h2",{attrs:{id:"界面重构-编写首页功能性代码之爬虫项目及对应爬虫名和数量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#界面重构-编写首页功能性代码之爬虫项目及对应爬虫名和数量"}},[e._v("#")]),e._v(" 界面重构 - 编写首页功能性代码之爬虫项目及对应爬虫名和数量")]),e._v(" "),n("p",[e._v("Scrapyd 首页默认显示当前已部署的爬虫项目名称，当需要通过 API：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$ curl http://localhost:6800/schedule.json -p project -p spider\n\n")])])]),n("p",[e._v("调用爬虫的时候，你可能无法完全记得到底哪个爬虫会在哪个项目里，你还需要通过另一个 API 去查看指定项目名中的爬虫，这显然是不友好的。所以 ScrapydArt 设计的时候，就将这个功能考虑了进来。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/15/16675e539925bbe7?w=1743&h=121&f=png&s=9495",alt:""}})]),e._v(" "),n("p",[e._v("这里可以回想之前对 Home 与 Jobs 的调试经验，可以通过"),n("code",[e._v("utils.py")]),e._v("中的"),n("code",[e._v("get_spider_list")]),e._v("方法获取指定项目名的爬虫名，这里用列表推导式将爬虫名依次传入"),n("code",[e._v("get_spider_list")]),e._v("，并将每一次得到的结果都保存到列表中：")]),e._v(" "),n("blockquote",[n("p",[e._v("为了提高文章可读性并保持逻辑清晰，在文章中"),n("code",[e._v("+")]),e._v("代表"),n("code",[e._v("新增的代码")]),e._v("，"),n("code",[e._v("-")]),e._v("代表"),n("code",[e._v("删除的代码")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('+def get_psn(projects):\n    """ 获取项目与对应爬虫的名称及数量\n    :param projects: 项目列表\n    :return: [{"project": i, "spider": "tip, sms", "number": 2}, {……}] 结果列表\n    """\n    return [{"project": i, "spider": ",".join(get_spider_list(i)), "number": len(get_spider_list(i))} for i in projects]\n\ndef features(self):\n    """ 爬虫统计数据 """\n    finishes = self.root.launcher.finished\n    pending, running, finished = status_nums(self, finishes) # 待启动/正在运行/已结束爬虫数\n    average, shortest, longest = run_time_stats(finishes) # 爬虫运行时间统计\n    ranks = time_ranks_table(self, index=10) # 爬虫运行时间排行\n    +projects, spiders = get_ps(self) # 项目/爬虫列表\n\n')])])]),n("p",[e._v("将上一步得到的 projects 作为参数传入 get_ps 函数中对所需的数据进行计算，获得"),n("code",[e._v('[{"project": i, "spider": "tip, sms", "number": 2}, {……}]')]),e._v("格式的结果列表。")]),e._v(" "),n("h2",{attrs:{id:"界面重构-编写首页功能性代码之项目总数与爬虫总数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#界面重构-编写首页功能性代码之项目总数与爬虫总数"}},[e._v("#")]),e._v(" 界面重构 - 编写首页功能性代码之项目总数与爬虫总数")]),e._v(" "),n("p",[e._v("我们需要清楚的知道平台上到底部署了多少个项目，总共有多少个爬虫，这信息跟你服务器内存承受的压力息息相关。")]),e._v(" "),n("blockquote",[n("p",[e._v("假如你有 30 多个爬虫，但是服务器只有 4G 内存，当你的爬虫火力全开时服务器有可能承受不住。")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/10/15/166766ba802c5698?w=474&h=349&f=png&s=11063",alt:""}})]),e._v(" "),n("p",[e._v("ScrapydArt 就为你计算了这些数据。上方的代码中通过"),n("code",[e._v("get_ps")]),e._v("函数已经将数值计算好，并且在"),n("code",[e._v("features")]),e._v("函数中进行了拆包。")]),e._v(" "),n("h2",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),n("p",[e._v("将所有的数据处理函数都放到"),n("code",[e._v("webtools.py")]),e._v("中有利于后期维护与管理，在需要使用的地方导入并调用即可。")])])}),[],!1,null,null,null);s.default=r.exports}}]);